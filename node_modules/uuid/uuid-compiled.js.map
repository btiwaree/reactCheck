{"version":3,"sources":["uuid.js"],"names":[],"mappings":"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","file":"uuid-compiled.js","sourcesContent":["//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = require('./rng');\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n  var i = (buf && offset) || 0, ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n    if (ii < 16) { // Don't overflow!\n      buf[i + ii++] = _hexToByte[oct];\n    }\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n}\n\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n  var i = offset || 0, bth = _byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; n++) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : unparse(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\n\nmodule.exports = uuid;\n"]}