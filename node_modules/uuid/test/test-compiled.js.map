{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var assert = require('assert');\n\nvar uuid = require('../');\n\n// Verify ordering of v1 ids created with explicit times\nvar TIME = 1321644961388; // 2011-11-18 11:36:01.388-08:00\n\nfunction compare(name, ids) {\n  test(name, function() {\n    // avoid .map for older browsers\n    for (var i=0 ; i<ids.length ; ++i) {\n      ids[i] = ids[i].split('-').reverse().join('-');\n    }\n    ids = ids.sort();\n    var sorted = ([].concat(ids)).sort();\n\n    assert(sorted.toString() == ids.toString(), name + ' have expected order');\n  });\n}\n\n// Verify ordering of v1 ids created using default behavior\ncompare('uuids with current time', [\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1()\n]);\n\n// Verify ordering of v1 ids created with explicit times\ncompare('uuids with time option', [\n  uuid.v1({msecs: TIME - 10*3600*1000}),\n  uuid.v1({msecs: TIME - 1}),\n  uuid.v1({msecs: TIME}),\n  uuid.v1({msecs: TIME + 1}),\n  uuid.v1({msecs: TIME + 28*24*3600*1000})\n]);\n\ntest('msec', function() {\n  assert(\n    uuid.v1({msecs: TIME}) != uuid.v1({msecs: TIME}),\n    'IDs created at same msec are different'\n  );\n});\n\ntest('exception thrown when > 10k ids created in 1ms', function() {\n  // Verify throw if too many ids created\n  var thrown = false;\n  try {\n    uuid.v1({msecs: TIME, nsecs: 10000});\n  } catch (e) {\n    thrown = true;\n  }\n  assert(thrown, 'Exception thrown when > 10K ids created in 1 ms');\n});\n\ntest('clock regression by msec', function() {\n  // Verify clock regression bumps clockseq\n  var uidt = uuid.v1({msecs: TIME});\n  var uidtb = uuid.v1({msecs: TIME - 1});\n  assert(\n    parseInt(uidtb.split('-')[3], 16) - parseInt(uidt.split('-')[3], 16) === 1,\n    'Clock regression by msec increments the clockseq'\n  );\n});\n\ntest('clock regression by nsec', function() {\n  // Verify clock regression bumps clockseq\n  var uidtn = uuid.v1({msecs: TIME, nsecs: 10});\n  var uidtnb = uuid.v1({msecs: TIME, nsecs: 9});\n  assert(\n    parseInt(uidtnb.split('-')[3], 16) - parseInt(uidtn.split('-')[3], 16) === 1,\n    'Clock regression by nsec increments the clockseq'\n  );\n});\n\ntest('explicit options product expected id', function() {\n  // Verify explicit options produce expected id\n  var id = uuid.v1({\n    msecs: 1321651533573,\n    nsecs: 5432,\n    clockseq: 0x385c,\n    node: [ 0x61, 0xcd, 0x3c, 0xbb, 0x32, 0x10 ]\n  });\n  assert(id == 'd9428888-122b-11e1-b85c-61cd3cbb3210', 'Explicit options produce expected id');\n});\n\ntest('ids spanning 1ms boundary are 100ns apart', function() {\n  // Verify adjacent ids across a msec boundary are 1 time unit apart\n  var u0 = uuid.v1({msecs: TIME, nsecs: 9999});\n  var u1 = uuid.v1({msecs: TIME + 1, nsecs: 0});\n\n  var before = u0.split('-')[0], after = u1.split('-')[0];\n  var dt = parseInt(after, 16) - parseInt(before, 16);\n  assert(dt === 1, 'Ids spanning 1ms boundary are 100ns apart');\n});\n\ntest('parse/unparse', function() {\n  var id = '00112233445566778899aabbccddeeff';\n  assert(uuid.unparse(uuid.parse(id.substr(0,10))) ==\n    '00112233-4400-0000-0000-000000000000', 'Short parse');\n  assert(uuid.unparse(uuid.parse('(this is the uuid -> ' + id + id)) ==\n    '00112233-4455-6677-8899-aabbccddeeff', 'Dirty parse');\n});\n\n"]}