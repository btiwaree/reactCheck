{"version":3,"sources":["tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.default = tokenize;\nvar SINGLE_QUOTE = 39;\nvar DOUBLE_QUOTE = 34;\nvar BACKSLASH = 92;\nvar SLASH = 47;\nvar NEWLINE = 10;\nvar SPACE = 32;\nvar FEED = 12;\nvar TAB = 9;\nvar CR = 13;\nvar OPEN_PARENTHESES = 40;\nvar CLOSE_PARENTHESES = 41;\nvar OPEN_CURLY = 123;\nvar CLOSE_CURLY = 125;\nvar SEMICOLON = 59;\nvar ASTERICK = 42;\nvar COLON = 58;\nvar AT = 64;\n\nvar RE_AT_END = /[ \\n\\t\\r\\f\\{\\(\\)'\"\\\\;/]/g;\nvar RE_WORD_END = /[ \\n\\t\\r\\f\\(\\)\\{\\}:;@!'\"\\\\]|\\/(?=\\*)/g;\nvar RE_BAD_BRACKET = /.[\\\\\\/\\(\"'\\n]/;\n\nfunction tokenize(input) {\n    var tokens = [];\n    var css = input.css.valueOf();\n\n    var code = undefined,\n        next = undefined,\n        quote = undefined,\n        lines = undefined,\n        last = undefined,\n        content = undefined,\n        escape = undefined,\n        nextLine = undefined,\n        nextOffset = undefined,\n        escaped = undefined,\n        escapePos = undefined,\n        prev = undefined,\n        n = undefined;\n\n    var length = css.length;\n    var offset = -1;\n    var line = 1;\n    var pos = 0;\n\n    function unclosed(what) {\n        throw input.error('Unclosed ' + what, line, pos - offset);\n    }\n\n    while (pos < length) {\n        code = css.charCodeAt(pos);\n\n        if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {\n            offset = pos;\n            line += 1;\n        }\n\n        switch (code) {\n            case NEWLINE:\n            case SPACE:\n            case TAB:\n            case CR:\n            case FEED:\n                next = pos;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                    if (code === NEWLINE) {\n                        offset = next;\n                        line += 1;\n                    }\n                } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n\n                tokens.push(['space', css.slice(pos, next)]);\n                pos = next - 1;\n                break;\n\n            case OPEN_CURLY:\n                tokens.push(['{', '{', line, pos - offset]);\n                break;\n\n            case CLOSE_CURLY:\n                tokens.push(['}', '}', line, pos - offset]);\n                break;\n\n            case COLON:\n                tokens.push([':', ':', line, pos - offset]);\n                break;\n\n            case SEMICOLON:\n                tokens.push([';', ';', line, pos - offset]);\n                break;\n\n            case OPEN_PARENTHESES:\n                prev = tokens.length ? tokens[tokens.length - 1][1] : '';\n                n = css.charCodeAt(pos + 1);\n                if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n                    next = pos;\n                    do {\n                        escaped = false;\n                        next = css.indexOf(')', next + 1);\n                        if (next === -1) unclosed('bracket');\n                        escapePos = next;\n                        while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n                            escapePos -= 1;\n                            escaped = !escaped;\n                        }\n                    } while (escaped);\n\n                    tokens.push(['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n                    pos = next;\n                } else {\n                    next = css.indexOf(')', pos + 1);\n                    content = css.slice(pos, next + 1);\n\n                    if (next === -1 || RE_BAD_BRACKET.test(content)) {\n                        tokens.push(['(', '(', line, pos - offset]);\n                    } else {\n                        tokens.push(['brackets', content, line, pos - offset, line, next - offset]);\n                        pos = next;\n                    }\n                }\n\n                break;\n\n            case CLOSE_PARENTHESES:\n                tokens.push([')', ')', line, pos - offset]);\n                break;\n\n            case SINGLE_QUOTE:\n            case DOUBLE_QUOTE:\n                quote = code === SINGLE_QUOTE ? '\\'' : '\"';\n                next = pos;\n                do {\n                    escaped = false;\n                    next = css.indexOf(quote, next + 1);\n                    if (next === -1) unclosed('quote');\n                    escapePos = next;\n                    while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n                        escapePos -= 1;\n                        escaped = !escaped;\n                    }\n                } while (escaped);\n\n                content = css.slice(pos, next + 1);\n                lines = content.split('\\n');\n                last = lines.length - 1;\n\n                if (last > 0) {\n                    nextLine = line + last;\n                    nextOffset = next - lines[last].length;\n                } else {\n                    nextLine = line;\n                    nextOffset = offset;\n                }\n\n                tokens.push(['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset]);\n\n                offset = nextOffset;\n                line = nextLine;\n                pos = next;\n                break;\n\n            case AT:\n                RE_AT_END.lastIndex = pos + 1;\n                RE_AT_END.test(css);\n                if (RE_AT_END.lastIndex === 0) {\n                    next = css.length - 1;\n                } else {\n                    next = RE_AT_END.lastIndex - 2;\n                }\n                tokens.push(['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n                pos = next;\n                break;\n\n            case BACKSLASH:\n                next = pos;\n                escape = true;\n                while (css.charCodeAt(next + 1) === BACKSLASH) {\n                    next += 1;\n                    escape = !escape;\n                }\n                code = css.charCodeAt(next + 1);\n                if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n                    next += 1;\n                }\n                tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n                pos = next;\n                break;\n\n            default:\n                if (code === SLASH && css.charCodeAt(pos + 1) === ASTERICK) {\n                    next = css.indexOf('*/', pos + 2) + 1;\n                    if (next === 0) unclosed('comment');\n\n                    content = css.slice(pos, next + 1);\n                    lines = content.split('\\n');\n                    last = lines.length - 1;\n\n                    if (last > 0) {\n                        nextLine = line + last;\n                        nextOffset = next - lines[last].length;\n                    } else {\n                        nextLine = line;\n                        nextOffset = offset;\n                    }\n\n                    tokens.push(['comment', content, line, pos - offset, nextLine, next - nextOffset]);\n\n                    offset = nextOffset;\n                    line = nextLine;\n                    pos = next;\n                } else {\n                    RE_WORD_END.lastIndex = pos + 1;\n                    RE_WORD_END.test(css);\n                    if (RE_WORD_END.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = RE_WORD_END.lastIndex - 2;\n                    }\n\n                    tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n                    pos = next;\n                }\n\n                break;\n        }\n\n        pos++;\n    }\n\n    return tokens;\n}\nmodule.exports = exports['default'];"]}