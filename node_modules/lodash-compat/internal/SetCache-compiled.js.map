{"version":3,"sources":["SetCache.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAZ;IACA,YAAY,QAAQ,aAAR,CAAZ;;;AAGJ,IAAI,MAAM,UAAU,MAAV,EAAkB,KAAlB,CAAN;;;AAGJ,IAAI,eAAe,UAAU,MAAV,EAAkB,QAAlB,CAAf;;;;;;;;;AASJ,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,MAAI,SAAS,SAAS,OAAO,MAAP,GAAgB,CAAzB,CADW;;AAGxB,OAAK,IAAL,GAAY,EAAE,QAAQ,aAAa,IAAb,CAAR,EAA4B,OAAO,IAAI,GAAJ,EAAP,EAA1C,CAHwB;AAIxB,SAAO,QAAP,EAAiB;AACf,SAAK,IAAL,CAAU,OAAO,MAAP,CAAV,EADe;GAAjB;CAJF;;;AAUA,SAAS,SAAT,CAAmB,IAAnB,GAA0B,SAA1B;;AAEA,OAAO,OAAP,GAAiB,QAAjB","file":"SetCache-compiled.js","sourcesContent":["var cachePush = require('./cachePush'),\n    getNative = require('./getNative');\n\n/** Native method references. */\nvar Set = getNative(global, 'Set');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeCreate = getNative(Object, 'create');\n\n/**\n *\n * Creates a cache object to store unique values.\n *\n * @private\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var length = values ? values.length : 0;\n\n  this.data = { 'hash': nativeCreate(null), 'set': new Set };\n  while (length--) {\n    this.push(values[length]);\n  }\n}\n\n// Add functions to the `Set` cache.\nSetCache.prototype.push = cachePush;\n\nmodule.exports = SetCache;\n"]}