{"version":3,"sources":["baseIsEqualDeep.js"],"names":[],"mappings":"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","file":"baseIsEqualDeep-compiled.js","sourcesContent":["var equalArrays = require('./equalArrays'),\n    equalByTag = require('./equalByTag'),\n    equalObjects = require('./equalObjects'),\n    isArray = require('../lang/isArray'),\n    isHostObject = require('./isHostObject'),\n    isTypedArray = require('../lang/isTypedArray');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing objects.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA=[]] Tracks traversed `value` objects.\n * @param {Array} [stackB=[]] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = objToString.call(object);\n    if (objTag == argsTag) {\n      objTag = objectTag;\n    } else if (objTag != objectTag) {\n      objIsArr = isTypedArray(object);\n    }\n  }\n  if (!othIsArr) {\n    othTag = objToString.call(other);\n    if (othTag == argsTag) {\n      othTag = objectTag;\n    } else if (othTag != objectTag) {\n      othIsArr = isTypedArray(other);\n    }\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !(objIsArr || objIsObj)) {\n    return equalByTag(object, other, objTag);\n  }\n  if (!isLoose) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  // For more information on detecting circular references see https://es5.github.io/#JO.\n  stackA || (stackA = []);\n  stackB || (stackB = []);\n\n  var length = stackA.length;\n  while (length--) {\n    if (stackA[length] == object) {\n      return stackB[length] == other;\n    }\n  }\n  // Add `object` and `other` to the stack of traversed objects.\n  stackA.push(object);\n  stackB.push(other);\n\n  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n\n  stackA.pop();\n  stackB.pop();\n\n  return result;\n}\n\nmodule.exports = baseIsEqualDeep;\n"]}