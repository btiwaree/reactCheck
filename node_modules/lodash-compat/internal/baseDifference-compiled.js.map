{"version":3,"sources":["baseDifference.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAd;IACA,eAAe,QAAQ,gBAAR,CAAf;IACA,cAAc,QAAQ,eAAR,CAAd;;;AAGJ,IAAI,mBAAmB,GAAnB;;;;;;;;;;;AAWJ,SAAS,cAAT,CAAwB,KAAxB,EAA+B,MAA/B,EAAuC;AACrC,MAAI,SAAS,QAAQ,MAAM,MAAN,GAAe,CAAvB;MACT,SAAS,EAAT,CAFiC;;AAIrC,MAAI,CAAC,MAAD,EAAS;AACX,WAAO,MAAP,CADW;GAAb;AAGA,MAAI,QAAQ,CAAC,CAAD;MACR,UAAU,WAAV;MACA,WAAW,IAAX;MACA,QAAQ,QAAC,IAAY,OAAO,MAAP,IAAiB,gBAAjB,GAAqC,YAAY,MAAZ,CAAlD,GAAwE,IAAxE;MACR,eAAe,OAAO,MAAP,CAXkB;;AAarC,MAAI,KAAJ,EAAW;AACT,cAAU,YAAV,CADS;AAET,eAAW,KAAX,CAFS;AAGT,aAAS,KAAT,CAHS;GAAX;AAKA,SACA,OAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,QAAI,QAAQ,MAAM,KAAN,CAAR,CADmB;;AAGvB,QAAI,YAAY,UAAU,KAAV,EAAiB;AAC/B,UAAI,cAAc,YAAd,CAD2B;AAE/B,aAAO,aAAP,EAAsB;AACpB,YAAI,OAAO,WAAP,MAAwB,KAAxB,EAA+B;AACjC,mBAAS,KAAT,CADiC;SAAnC;OADF;AAKA,aAAO,IAAP,CAAY,KAAZ,EAP+B;KAAjC,MASK,IAAI,QAAQ,MAAR,EAAgB,KAAhB,EAAuB,CAAvB,IAA4B,CAA5B,EAA+B;AACtC,aAAO,IAAP,CAAY,KAAZ,EADsC;KAAnC;GAZP;AAgBA,SAAO,MAAP,CAnCqC;CAAvC;;AAsCA,OAAO,OAAP,GAAiB,cAAjB","file":"baseDifference-compiled.js","sourcesContent":["var baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.difference` which accepts a single array\n * of values to exclude.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values) {\n  var length = array ? array.length : 0,\n      result = [];\n\n  if (!length) {\n    return result;\n  }\n  var index = -1,\n      indexOf = baseIndexOf,\n      isCommon = true,\n      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\n      valuesLength = values.length;\n\n  if (cache) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n    values = cache;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index];\n\n    if (isCommon && value === value) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === value) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (indexOf(values, value, 0) < 0) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]}