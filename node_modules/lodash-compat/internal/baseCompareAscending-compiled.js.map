{"version":3,"sources":["baseCompareAscending.js"],"names":[],"mappings":";;;;;;;;;AASA,SAAS,oBAAT,CAA8B,KAA9B,EAAqC,KAArC,EAA4C;AAC1C,MAAI,UAAU,KAAV,EAAiB;AACnB,QAAI,YAAY,UAAU,IAAV;QACZ,aAAa,UAAU,SAAV;QACb,iBAAiB,UAAU,KAAV,CAHF;;AAKnB,QAAI,YAAY,UAAU,IAAV;QACZ,aAAa,UAAU,SAAV;QACb,iBAAiB,UAAU,KAAV,CAPF;;AASnB,QAAI,KAAC,GAAQ,KAAR,IAAiB,CAAC,SAAD,IAAe,CAAC,cAAD,IAChC,aAAa,CAAC,UAAD,IAAe,cAA5B,IACA,cAAc,cAAd,EAA+B;AAClC,aAAO,CAAP,CADkC;KAFpC;AAKA,QAAI,KAAC,GAAQ,KAAR,IAAiB,CAAC,SAAD,IAAe,CAAC,cAAD,IAChC,aAAa,CAAC,UAAD,IAAe,cAA5B,IACA,cAAc,cAAd,EAA+B;AAClC,aAAO,CAAC,CAAD,CAD2B;KAFpC;GAdF;AAoBA,SAAO,CAAP,CArB0C;CAA5C;;AAwBA,OAAO,OAAP,GAAiB,oBAAjB","file":"baseCompareAscending-compiled.js","sourcesContent":["/**\n * The base implementation of `compareAscending` which compares values and\n * sorts them in ascending order without guaranteeing a stable sort.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction baseCompareAscending(value, other) {\n  if (value !== other) {\n    var valIsNull = value === null,\n        valIsUndef = value === undefined,\n        valIsReflexive = value === value;\n\n    var othIsNull = other === null,\n        othIsUndef = other === undefined,\n        othIsReflexive = other === other;\n\n    if ((value > other && !othIsNull) || !valIsReflexive ||\n        (valIsNull && !othIsUndef && othIsReflexive) ||\n        (valIsUndef && othIsReflexive)) {\n      return 1;\n    }\n    if ((value < other && !valIsNull) || !othIsReflexive ||\n        (othIsNull && !valIsUndef && valIsReflexive) ||\n        (othIsUndef && valIsReflexive)) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = baseCompareAscending;\n"]}