{"version":3,"sources":["isIterateeCall.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAd;IACA,UAAU,QAAQ,WAAR,CAAV;IACA,WAAW,QAAQ,kBAAR,CAAX;;;;;;;;;;;AAWJ,SAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,EAAsC,MAAtC,EAA8C;AAC5C,MAAI,CAAC,SAAS,MAAT,CAAD,EAAmB;AACrB,WAAO,KAAP,CADqB;GAAvB;AAGA,MAAI,OAAO,OAAO,KAAP,CAJiC;AAK5C,MAAI,QAAQ,QAAR,GACG,YAAY,MAAZ,KAAuB,QAAQ,KAAR,EAAe,OAAO,MAAP,CAAtC,GACA,QAAQ,QAAR,IAAoB,SAAS,MAAT,EAAkB;AAC3C,QAAI,QAAQ,OAAO,KAAP,CAAR,CADuC;AAE3C,WAAO,UAAU,KAAV,GAAmB,UAAU,KAAV,GAAoB,UAAU,KAAV,CAFH;GAF7C;AAMA,SAAO,KAAP,CAX4C;CAA9C;;AAcA,OAAO,OAAP,GAAiB,cAAjB","file":"isIterateeCall-compiled.js","sourcesContent":["var isArrayLike = require('./isArrayLike'),\n    isIndex = require('./isIndex'),\n    isObject = require('../lang/isObject');\n\n/**\n * Checks if the provided arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n      ? (isArrayLike(object) && isIndex(index, object.length))\n      : (type == 'string' && index in object)) {\n    var other = object[index];\n    return value === value ? (value === other) : (other !== other);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n"]}