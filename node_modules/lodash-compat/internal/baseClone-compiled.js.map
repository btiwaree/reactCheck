{"version":3,"sources":["baseClone.js"],"names":[],"mappings":"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","file":"baseClone-compiled.js","sourcesContent":["var arrayCopy = require('./arrayCopy'),\n    arrayEach = require('./arrayEach'),\n    baseAssign = require('./baseAssign'),\n    baseForOwn = require('./baseForOwn'),\n    initCloneArray = require('./initCloneArray'),\n    initCloneByTag = require('./initCloneByTag'),\n    initCloneObject = require('./initCloneObject'),\n    isArray = require('../lang/isArray'),\n    isHostObject = require('./isHostObject'),\n    isObject = require('../lang/isObject');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\ncloneableTags[dateTag] = cloneableTags[float32Tag] =\ncloneableTags[float64Tag] = cloneableTags[int8Tag] =\ncloneableTags[int16Tag] = cloneableTags[int32Tag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[stringTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[mapTag] = cloneableTags[setTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * The base implementation of `_.clone` without support for argument juggling\n * and `this` binding `customizer` functions.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {Function} [customizer] The function to customize cloning values.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The object `value` belongs to.\n * @param {Array} [stackA=[]] Tracks traversed source objects.\n * @param {Array} [stackB=[]] Associates clones with source counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, customizer, key, object, stackA, stackB) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return arrayCopy(value, result);\n    }\n  } else {\n    var tag = objToString.call(value),\n        isFunc = tag == funcTag;\n\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return baseAssign(result, value);\n      }\n    } else {\n      return cloneableTags[tag]\n        ? initCloneByTag(value, tag, isDeep)\n        : (object ? value : {});\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stackA || (stackA = []);\n  stackB || (stackB = []);\n\n  var length = stackA.length;\n  while (length--) {\n    if (stackA[length] == value) {\n      return stackB[length];\n    }\n  }\n  // Add the source value to the stack of traversed objects and associate it with its clone.\n  stackA.push(value);\n  stackB.push(result);\n\n  // Recursively populate clone (susceptible to call stack limits).\n  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"]}