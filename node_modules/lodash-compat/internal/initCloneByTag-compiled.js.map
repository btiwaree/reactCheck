{"version":3,"sources":["initCloneByTag.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAd;;;AAGJ,IAAI,UAAU,kBAAV;IACA,UAAU,eAAV;IACA,YAAY,iBAAZ;IACA,YAAY,iBAAZ;IACA,YAAY,iBAAZ;;AAEJ,IAAI,iBAAiB,sBAAjB;IACA,aAAa,uBAAb;IACA,aAAa,uBAAb;IACA,UAAU,oBAAV;IACA,WAAW,qBAAX;IACA,WAAW,qBAAX;IACA,WAAW,qBAAX;IACA,kBAAkB,4BAAlB;IACA,YAAY,sBAAZ;IACA,YAAY,sBAAZ;;;AAGJ,IAAI,UAAU,MAAV;;;AAGJ,IAAI,aAAa,OAAO,UAAP;;;AAGjB,IAAI,YAAY,EAAZ;AACJ,UAAU,UAAV,IAAwB,OAAO,YAAP;AACxB,UAAU,UAAV,IAAwB,OAAO,YAAP;AACxB,UAAU,OAAV,IAAqB,OAAO,SAAP;AACrB,UAAU,QAAV,IAAsB,OAAO,UAAP;AACtB,UAAU,QAAV,IAAsB,OAAO,UAAP;AACtB,UAAU,QAAV,IAAsB,UAAtB;AACA,UAAU,eAAV,IAA6B,OAAO,iBAAP;AAC7B,UAAU,SAAV,IAAuB,OAAO,WAAP;AACvB,UAAU,SAAV,IAAuB,OAAO,WAAP;;;;;;;;;;;;;;AAcvB,SAAS,cAAT,CAAwB,MAAxB,EAAgC,GAAhC,EAAqC,MAArC,EAA6C;AAC3C,MAAI,OAAO,OAAO,WAAP,CADgC;AAE3C,UAAQ,GAAR;AACE,SAAK,cAAL;AACE,aAAO,YAAY,MAAZ,CAAP,CADF;;AADF,SAIO,OAAL,CAJF;AAKE,SAAK,OAAL;AACE,aAAO,IAAI,IAAJ,CAAS,CAAC,MAAD,CAAhB,CADF;;AALF,SAQO,UAAL,CARF,KAQwB,UAAL,CARnB;AASE,SAAK,OAAL,CATF,KASqB,QAAL,CAThB,KASoC,QAAL,CAT/B;AAUE,SAAK,QAAL,CAVF,KAUsB,eAAL,CAVjB,KAU4C,SAAL,CAVvC,KAU4D,SAAL;;AAEnD,UAAI,gBAAgB,IAAhB,EAAsB;AACxB,eAAO,UAAU,GAAV,CAAP,CADwB;OAA1B;AAGA,UAAI,SAAS,OAAO,MAAP,CALsC;AAMnD,aAAO,IAAI,IAAJ,CAAS,SAAS,YAAY,MAAZ,CAAT,GAA+B,MAA/B,EAAuC,OAAO,UAAP,EAAmB,OAAO,MAAP,CAA1E,CANmD;;AAVvD,SAkBO,SAAL,CAlBF;AAmBE,SAAK,SAAL;AACE,aAAO,IAAI,IAAJ,CAAS,MAAT,CAAP,CADF;;AAnBF,SAsBO,SAAL;AACE,UAAI,SAAS,IAAI,IAAJ,CAAS,OAAO,MAAP,EAAe,QAAQ,IAAR,CAAa,MAAb,CAAxB,CAAT,CADN;AAEE,aAAO,SAAP,GAAmB,OAAO,SAAP,CAFrB;AAtBF,GAF2C;AA4B3C,SAAO,MAAP,CA5B2C;CAA7C;;AA+BA,OAAO,OAAP,GAAiB,cAAjB","file":"initCloneByTag-compiled.js","sourcesContent":["var bufferClone = require('./bufferClone');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    stringTag = '[object String]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Native method references. */\nvar Uint8Array = global.Uint8Array;\n\n/** Used to lookup a type array constructors by `toStringTag`. */\nvar ctorByTag = {};\nctorByTag[float32Tag] = global.Float32Array;\nctorByTag[float64Tag] = global.Float64Array;\nctorByTag[int8Tag] = global.Int8Array;\nctorByTag[int16Tag] = global.Int16Array;\nctorByTag[int32Tag] = global.Int32Array;\nctorByTag[uint8Tag] = Uint8Array;\nctorByTag[uint8ClampedTag] = global.Uint8ClampedArray;\nctorByTag[uint16Tag] = global.Uint16Array;\nctorByTag[uint32Tag] = global.Uint32Array;\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return bufferClone(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      // Safari 5 mobile incorrectly has `Object` as the constructor of typed arrays.\n      if (Ctor instanceof Ctor) {\n        Ctor = ctorByTag[tag];\n      }\n      var buffer = object.buffer;\n      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      var result = new Ctor(object.source, reFlags.exec(object));\n      result.lastIndex = object.lastIndex;\n  }\n  return result;\n}\n\nmodule.exports = initCloneByTag;\n"]}