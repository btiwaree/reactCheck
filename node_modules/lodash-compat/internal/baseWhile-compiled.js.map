{"version":3,"sources":["baseWhile.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAZ;;;;;;;;;;;;;AAaJ,SAAS,SAAT,CAAmB,KAAnB,EAA0B,SAA1B,EAAqC,MAArC,EAA6C,SAA7C,EAAwD;AACtD,QAAI,SAAS,MAAM,MAAN;QACT,QAAQ,YAAY,MAAZ,GAAqB,CAAC,CAAD,CAFqB;;AAItD,WAAO,CAAC,YAAY,OAAZ,GAAsB,EAAE,KAAF,GAAU,MAAV,CAAvB,IAA4C,UAAU,MAAM,KAAN,CAAV,EAAwB,KAAxB,EAA+B,KAA/B,CAA5C,EAAmF,EAA1F;AACA,WAAO,SACH,UAAU,KAAV,EAAkB,YAAY,CAAZ,GAAgB,KAAhB,EAAyB,YAAY,QAAQ,CAAR,GAAY,MAAxB,CADxC,GAEH,UAAU,KAAV,EAAkB,YAAY,QAAQ,CAAR,GAAY,CAAxB,EAA6B,YAAY,MAAZ,GAAqB,KAArB,CAF5C,CAL+C;CAAxD;;AAUA,OAAO,OAAP,GAAiB,SAAjB","file":"baseWhile-compiled.js","sourcesContent":["var baseSlice = require('./baseSlice');\n\n/**\n * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,\n * and `_.takeWhile` without support for callback shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseWhile(array, predicate, isDrop, fromRight) {\n  var length = array.length,\n      index = fromRight ? length : -1;\n\n  while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}\n  return isDrop\n    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n}\n\nmodule.exports = baseWhile;\n"]}