{"version":3,"sources":["createCompounder.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,kBAAR,CAAT;IACA,QAAQ,QAAQ,iBAAR,CAAR;;;;;;;;;;AAUJ,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AAClC,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,QAAQ,CAAC,CAAD;QACR,QAAQ,MAAM,OAAO,MAAP,CAAN,CAAR;QACA,SAAS,MAAM,MAAN;QACT,SAAS,EAAT,CAJkB;;AAMtB,WAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,eAAS,SAAS,MAAT,EAAiB,MAAM,KAAN,CAAjB,EAA+B,KAA/B,CAAT,CADuB;KAAzB;AAGA,WAAO,MAAP,CATsB;GAAjB,CAD2B;CAApC;;AAcA,OAAO,OAAP,GAAiB,gBAAjB","file":"createCompounder-compiled.js","sourcesContent":["var deburr = require('../string/deburr'),\n    words = require('../string/words');\n\n/**\n * Creates a function that produces compound words out of the words in a\n * given string.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    var index = -1,\n        array = words(deburr(string)),\n        length = array.length,\n        result = '';\n\n    while (++index < length) {\n      result = callback(result, array[index], index);\n    }\n    return result;\n  };\n}\n\nmodule.exports = createCompounder;\n"]}