{"version":3,"sources":["baseFind.js"],"names":[],"mappings":";;;;;;;;;;;;;AAaA,SAAS,QAAT,CAAkB,UAAlB,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD,MAAnD,EAA2D;AACzD,MAAI,MAAJ,CADyD;AAEzD,WAAS,UAAT,EAAqB,UAAS,KAAT,EAAgB,GAAhB,EAAqB,UAArB,EAAiC;AACpD,QAAI,UAAU,KAAV,EAAiB,GAAjB,EAAsB,UAAtB,CAAJ,EAAuC;AACrC,eAAS,SAAS,GAAT,GAAe,KAAf,CAD4B;AAErC,aAAO,KAAP,CAFqC;KAAvC;GADmB,CAArB,CAFyD;AAQzD,SAAO,MAAP,CARyD;CAA3D;;AAWA,OAAO,OAAP,GAAiB,QAAjB","file":"baseFind-compiled.js","sourcesContent":["/**\n * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,\n * without support for callback shorthands and `this` binding, which iterates\n * over `collection` using the provided `eachFunc`.\n *\n * @private\n * @param {Array|Object|string} collection The collection to search.\n * @param {Function} predicate The function invoked per iteration.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @param {boolean} [retKey] Specify returning the key of the found element\n *  instead of the element itself.\n * @returns {*} Returns the found element or its key, else `undefined`.\n */\nfunction baseFind(collection, predicate, eachFunc, retKey) {\n  var result;\n  eachFunc(collection, function(value, key, collection) {\n    if (predicate(value, key, collection)) {\n      result = retKey ? key : value;\n      return false;\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFind;\n"]}