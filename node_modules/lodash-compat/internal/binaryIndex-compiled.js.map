{"version":3,"sources":["binaryIndex.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,iBAAR,CAAhB;IACA,WAAW,QAAQ,qBAAR,CAAX;;;AAGJ,IAAI,mBAAmB,UAAnB;IACA,wBAAwB,qBAAqB,CAArB;;;;;;;;;;;;;AAa5B,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,UAAnC,EAA+C;AAC7C,MAAI,MAAM,CAAN;MACA,OAAO,QAAQ,MAAM,MAAN,GAAe,GAAvB,CAFkC;;AAI7C,MAAI,OAAO,KAAP,IAAgB,QAAhB,IAA4B,UAAU,KAAV,IAAmB,QAAQ,qBAAR,EAA+B;AAChF,WAAO,MAAM,IAAN,EAAY;AACjB,UAAI,MAAM,GAAC,GAAM,IAAN,KAAgB,CAAjB;UACN,WAAW,MAAM,GAAN,CAAX,CAFa;;AAIjB,UAAI,CAAC,aAAc,YAAY,KAAZ,GAAsB,WAAW,KAAX,CAArC,IAA2D,aAAa,IAAb,EAAmB;AAChF,cAAM,MAAM,CAAN,CAD0E;OAAlF,MAEO;AACL,eAAO,GAAP,CADK;OAFP;KAJF;AAUA,WAAO,IAAP,CAXgF;GAAlF;AAaA,SAAO,cAAc,KAAd,EAAqB,KAArB,EAA4B,QAA5B,EAAsC,UAAtC,CAAP,CAjB6C;CAA/C;;AAoBA,OAAO,OAAP,GAAiB,WAAjB","file":"binaryIndex-compiled.js","sourcesContent":["var binaryIndexBy = require('./binaryIndexBy'),\n    identity = require('../utility/identity');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * Performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction binaryIndex(array, value, retHighest) {\n  var low = 0,\n      high = array ? array.length : low;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return binaryIndexBy(array, value, identity, retHighest);\n}\n\nmodule.exports = binaryIndex;\n"]}