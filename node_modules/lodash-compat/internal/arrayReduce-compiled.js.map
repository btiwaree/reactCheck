{"version":3,"sources":["arrayReduce.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,SAAS,WAAT,CAAqB,KAArB,EAA4B,QAA5B,EAAsC,WAAtC,EAAmD,aAAnD,EAAkE;AAChE,MAAI,QAAQ,CAAC,CAAD;MACR,SAAS,MAAM,MAAN,CAFmD;;AAIhE,MAAI,iBAAiB,MAAjB,EAAyB;AAC3B,kBAAc,MAAM,EAAE,KAAF,CAApB,CAD2B;GAA7B;AAGA,SAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,kBAAc,SAAS,WAAT,EAAsB,MAAM,KAAN,CAAtB,EAAoC,KAApC,EAA2C,KAA3C,CAAd,CADuB;GAAzB;AAGA,SAAO,WAAP,CAVgE;CAAlE;;AAaA,OAAO,OAAP,GAAiB,WAAjB","file":"arrayReduce-compiled.js","sourcesContent":["/**\n * A specialized version of `_.reduce` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initFromArray] Specify using the first element of `array`\n *  as the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initFromArray) {\n  var index = -1,\n      length = array.length;\n\n  if (initFromArray && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n"]}