{"version":3,"sources":["baseGet.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAX;;;;;;;;;;;;AAYJ,SAAS,OAAT,CAAiB,MAAjB,EAAyB,IAAzB,EAA+B,OAA/B,EAAwC;AACtC,MAAI,UAAU,IAAV,EAAgB;AAClB,WADkB;GAApB;AAGA,WAAS,SAAS,MAAT,CAAT,CAJsC;AAKtC,MAAI,YAAY,SAAZ,IAAyB,WAAW,MAAX,EAAmB;AAC9C,WAAO,CAAC,OAAD,CAAP,CAD8C;GAAhD;AAGA,MAAI,QAAQ,CAAR;MACA,SAAS,KAAK,MAAL,CATyB;;AAWtC,SAAO,UAAU,IAAV,IAAkB,QAAQ,MAAR,EAAgB;AACvC,aAAS,SAAS,MAAT,EAAiB,KAAK,OAAL,CAAjB,CAAT,CADuC;GAAzC;AAGA,SAAO,KAAC,IAAS,SAAS,MAAT,GAAmB,MAA7B,GAAsC,SAAtC,CAd+B;CAAxC;;AAiBA,OAAO,OAAP,GAAiB,OAAjB","file":"baseGet-compiled.js","sourcesContent":["var toObject = require('./toObject');\n\n/**\n * The base implementation of `get` without support for string paths\n * and default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path of the property to get.\n * @param {string} [pathKey] The key representation of path.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path, pathKey) {\n  if (object == null) {\n    return;\n  }\n  object = toObject(object);\n  if (pathKey !== undefined && pathKey in object) {\n    path = [pathKey];\n  }\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = toObject(object)[path[index++]];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n"]}