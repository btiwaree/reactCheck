{"version":3,"sources":["compareMultiple.js"],"names":[],"mappings":"AAAA,IAAI,uBAAuB,QAAQ,wBAAR,CAAvB;;;;;;;;;;;;;;;;AAgBJ,SAAS,eAAT,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC,MAAxC,EAAgD;AAC9C,MAAI,QAAQ,CAAC,CAAD;MACR,cAAc,OAAO,QAAP;MACd,cAAc,MAAM,QAAN;MACd,SAAS,YAAY,MAAZ;MACT,eAAe,OAAO,MAAP,CAL2B;;AAO9C,SAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,QAAI,SAAS,qBAAqB,YAAY,KAAZ,CAArB,EAAyC,YAAY,KAAZ,CAAzC,CAAT,CADmB;AAEvB,QAAI,MAAJ,EAAY;AACV,UAAI,SAAS,YAAT,EAAuB;AACzB,eAAO,MAAP,CADyB;OAA3B;AAGA,UAAI,QAAQ,OAAO,KAAP,CAAR,CAJM;AAKV,aAAO,UAAU,KAAC,KAAU,KAAV,IAAmB,UAAU,IAAV,GAAkB,CAAtC,GAA0C,CAAC,CAAD,CAApD,CALG;KAAZ;GAFF;;;;;;;;AAP8C,SAwBvC,OAAO,KAAP,GAAe,MAAM,KAAN,CAxBwB;CAAhD;;AA2BA,OAAO,OAAP,GAAiB,eAAjB","file":"compareMultiple-compiled.js","sourcesContent":["var baseCompareAscending = require('./baseCompareAscending');\n\n/**\n * Used by `_.sortByOrder` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,\n * a value is sorted in ascending order if its corresponding order is \"asc\", and\n * descending if \"desc\".\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = baseCompareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * ((order === 'asc' || order === true) ? 1 : -1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n"]}