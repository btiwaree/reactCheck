{"version":3,"sources":["setData.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAd;IACA,MAAM,QAAQ,aAAR,CAAN;;;AAGJ,IAAI,YAAY,GAAZ;IACA,WAAW,EAAX;;;;;;;;;;;;;;;AAeJ,IAAI,UAAW,YAAW;AACxB,MAAI,QAAQ,CAAR;MACA,aAAa,CAAb,CAFoB;;AAIxB,SAAO,UAAS,GAAT,EAAc,KAAd,EAAqB;AAC1B,QAAI,QAAQ,KAAR;QACA,YAAY,YAAY,QAAQ,UAAR,CAAZ,CAFU;;AAI1B,iBAAa,KAAb,CAJ0B;AAK1B,QAAI,YAAY,CAAZ,EAAe;AACjB,UAAI,EAAE,KAAF,IAAW,SAAX,EAAsB;AACxB,eAAO,GAAP,CADwB;OAA1B;KADF,MAIO;AACL,cAAQ,CAAR,CADK;KAJP;AAOA,WAAO,YAAY,GAAZ,EAAiB,KAAjB,CAAP,CAZ0B;GAArB,CAJiB;CAAX,EAAX;;AAoBJ,OAAO,OAAP,GAAiB,OAAjB","file":"setData-compiled.js","sourcesContent":["var baseSetData = require('./baseSetData'),\n    now = require('../date/now');\n\n/** Used to detect when a function becomes hot. */\nvar HOT_COUNT = 150,\n    HOT_SPAN = 16;\n\n/**\n * Sets metadata for `func`.\n *\n * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n * period of time, it will trip its breaker and transition to an identity function\n * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n * for more details.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar setData = (function() {\n  var count = 0,\n      lastCalled = 0;\n\n  return function(key, value) {\n    var stamp = now(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return key;\n      }\n    } else {\n      count = 0;\n    }\n    return baseSetData(key, value);\n  };\n}());\n\nmodule.exports = setData;\n"]}