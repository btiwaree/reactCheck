{"version":3,"sources":["mergeData.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAZ;IACA,cAAc,QAAQ,eAAR,CAAd;IACA,mBAAmB,QAAQ,oBAAR,CAAnB;IACA,iBAAiB,QAAQ,kBAAR,CAAjB;;;AAGJ,IAAI,YAAY,CAAZ;IACA,mBAAmB,CAAnB;IACA,aAAa,CAAb;IACA,WAAW,GAAX;IACA,aAAa,GAAb;;;AAGJ,IAAI,cAAc,wBAAd;;;AAGJ,IAAI,YAAY,KAAK,GAAL;;;;;;;;;;;;;;;;;AAiBhB,SAAS,SAAT,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAC/B,MAAI,UAAU,KAAK,CAAL,CAAV;MACA,aAAa,OAAO,CAAP,CAAb;MACA,aAAa,UAAU,UAAV;MACb,WAAW,aAAa,QAAb,CAJgB;;AAM/B,MAAI,UACF,UAAC,IAAc,QAAd,IAA0B,WAAW,UAAX,IAC1B,cAAc,QAAd,IAA0B,WAAW,UAAX,IAAyB,KAAK,CAAL,EAAQ,MAAR,IAAkB,OAAO,CAAP,CAAlB,IACnD,eAAe,WAAW,UAAX,CAAf,IAAyC,WAAW,UAAX;;;AATb,MAY3B,EAAE,YAAY,OAAZ,CAAF,EAAwB;AAC1B,WAAO,IAAP,CAD0B;GAA5B;;AAZ+B,MAgB3B,aAAa,SAAb,EAAwB;AAC1B,SAAK,CAAL,IAAU,OAAO,CAAP,CAAV;;AAD0B,cAG1B,IAAc,OAAC,GAAU,SAAV,GAAuB,CAAxB,GAA4B,gBAA5B,CAHY;GAA5B;;AAhB+B,MAsB3B,QAAQ,OAAO,CAAP,CAAR,CAtB2B;AAuB/B,MAAI,KAAJ,EAAW;AACT,QAAI,WAAW,KAAK,CAAL,CAAX,CADK;AAET,SAAK,CAAL,IAAU,WAAW,YAAY,QAAZ,EAAsB,KAAtB,EAA6B,OAAO,CAAP,CAA7B,CAAX,GAAqD,UAAU,KAAV,CAArD,CAFD;AAGT,SAAK,CAAL,IAAU,WAAW,eAAe,KAAK,CAAL,CAAf,EAAwB,WAAxB,CAAX,GAAkD,UAAU,OAAO,CAAP,CAAV,CAAlD,CAHD;GAAX;;AAvB+B,OA6B/B,GAAQ,OAAO,CAAP,CAAR,CA7B+B;AA8B/B,MAAI,KAAJ,EAAW;AACT,eAAW,KAAK,CAAL,CAAX,CADS;AAET,SAAK,CAAL,IAAU,WAAW,iBAAiB,QAAjB,EAA2B,KAA3B,EAAkC,OAAO,CAAP,CAAlC,CAAX,GAA0D,UAAU,KAAV,CAA1D,CAFD;AAGT,SAAK,CAAL,IAAU,WAAW,eAAe,KAAK,CAAL,CAAf,EAAwB,WAAxB,CAAX,GAAkD,UAAU,OAAO,CAAP,CAAV,CAAlD,CAHD;GAAX;;AA9B+B,OAoC/B,GAAQ,OAAO,CAAP,CAAR,CApC+B;AAqC/B,MAAI,KAAJ,EAAW;AACT,SAAK,CAAL,IAAU,UAAU,KAAV,CAAV,CADS;GAAX;;AArC+B,MAyC3B,aAAa,QAAb,EAAuB;AACzB,SAAK,CAAL,IAAU,KAAK,CAAL,KAAW,IAAX,GAAkB,OAAO,CAAP,CAAlB,GAA8B,UAAU,KAAK,CAAL,CAAV,EAAmB,OAAO,CAAP,CAAnB,CAA9B,CADe;GAA3B;;AAzC+B,MA6C3B,KAAK,CAAL,KAAW,IAAX,EAAiB;AACnB,SAAK,CAAL,IAAU,OAAO,CAAP,CAAV,CADmB;GAArB;;AA7C+B,MAiD/B,CAAK,CAAL,IAAU,OAAO,CAAP,CAAV,CAjD+B;AAkD/B,OAAK,CAAL,IAAU,UAAV,CAlD+B;;AAoD/B,SAAO,IAAP,CApD+B;CAAjC;;AAuDA,OAAO,OAAP,GAAiB,SAAjB","file":"mergeData-compiled.js","sourcesContent":["var arrayCopy = require('./arrayCopy'),\n    composeArgs = require('./composeArgs'),\n    composeArgsRight = require('./composeArgsRight'),\n    replaceHolders = require('./replaceHolders');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    CURRY_BOUND_FLAG = 4,\n    CURRY_FLAG = 8,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers required to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n * augment function arguments, making the order in which they are executed important,\n * preventing the merging of metadata. However, we make an exception for a safe\n * common case where curried functions have `_.ary` and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < ARY_FLAG;\n\n  var isCombo =\n    (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||\n    (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||\n    (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = arrayCopy(value);\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"]}