{"version":3,"sources":["basePullAt.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,WAAR,CAAV;;;AAGJ,IAAI,aAAa,MAAM,SAAN;;;AAGjB,IAAI,SAAS,WAAW,MAAX;;;;;;;;;;;AAWb,SAAS,UAAT,CAAoB,KAApB,EAA2B,OAA3B,EAAoC;AAClC,MAAI,SAAS,QAAQ,QAAQ,MAAR,GAAiB,CAAzB,CADqB;AAElC,SAAO,QAAP,EAAiB;AACf,QAAI,QAAQ,QAAQ,MAAR,CAAR,CADW;AAEf,QAAI,SAAS,QAAT,IAAqB,QAAQ,KAAR,CAArB,EAAqC;AACvC,UAAI,WAAW,KAAX,CADmC;AAEvC,aAAO,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,CAA1B,EAFuC;KAAzC;GAFF;AAOA,SAAO,KAAP,CATkC;CAApC;;AAYA,OAAO,OAAP,GAAiB,UAAjB","file":"basePullAt-compiled.js","sourcesContent":["var isIndex = require('./isIndex');\n\n/** Used for native method references. */\nvar arrayProto = Array.prototype;\n\n/** Native method references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAt` without support for individual\n * index arguments and capturing the removed elements.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {number[]} indexes The indexes of elements to remove.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAt(array, indexes) {\n  var length = array ? indexes.length : 0;\n  while (length--) {\n    var index = indexes[length];\n    if (index != previous && isIndex(index)) {\n      var previous = index;\n      splice.call(array, index, 1);\n    }\n  }\n  return array;\n}\n\nmodule.exports = basePullAt;\n"]}