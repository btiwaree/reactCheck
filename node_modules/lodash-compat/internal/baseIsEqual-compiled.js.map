{"version":3,"sources":["baseIsEqual.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB,QAAQ,mBAAR,CAAlB;IACA,WAAW,QAAQ,kBAAR,CAAX;IACA,eAAe,QAAQ,gBAAR,CAAf;;;;;;;;;;;;;;;AAeJ,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,UAAnC,EAA+C,OAA/C,EAAwD,MAAxD,EAAgE,MAAhE,EAAwE;AACtE,MAAI,UAAU,KAAV,EAAiB;AACnB,WAAO,IAAP,CADmB;GAArB;AAGA,MAAI,SAAS,IAAT,IAAiB,SAAS,IAAT,IAAkB,CAAC,SAAS,KAAT,CAAD,IAAoB,CAAC,aAAa,KAAb,CAAD,EAAuB;AAChF,WAAO,UAAU,KAAV,IAAmB,UAAU,KAAV,CADsD;GAAlF;AAGA,SAAO,gBAAgB,KAAhB,EAAuB,KAAvB,EAA8B,WAA9B,EAA2C,UAA3C,EAAuD,OAAvD,EAAgE,MAAhE,EAAwE,MAAxE,CAAP,CAPsE;CAAxE;;AAUA,OAAO,OAAP,GAAiB,WAAjB","file":"baseIsEqual-compiled.js","sourcesContent":["var baseIsEqualDeep = require('./baseIsEqualDeep'),\n    isObject = require('../lang/isObject'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` without support for `this` binding\n * `customizer` functions.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparing values.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);\n}\n\nmodule.exports = baseIsEqual;\n"]}