{"version":3,"sources":["createPadding.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,kBAAR,CAAT;;;AAGJ,IAAI,aAAa,KAAK,IAAL;IACb,iBAAiB,OAAO,QAAP;;;;;;;;;;;;AAYrB,SAAS,aAAT,CAAuB,MAAvB,EAA+B,MAA/B,EAAuC,KAAvC,EAA8C;AAC5C,MAAI,YAAY,OAAO,MAAP,CAD4B;AAE5C,WAAS,CAAC,MAAD,CAFmC;;AAI5C,MAAI,aAAa,MAAb,IAAuB,CAAC,eAAe,MAAf,CAAD,EAAyB;AAClD,WAAO,EAAP,CADkD;GAApD;AAGA,MAAI,YAAY,SAAS,SAAT,CAP4B;AAQ5C,UAAQ,SAAS,IAAT,GAAgB,GAAhB,GAAuB,QAAQ,EAAR,CARa;AAS5C,SAAO,OAAO,KAAP,EAAc,WAAW,YAAY,MAAM,MAAN,CAArC,EAAoD,KAApD,CAA0D,CAA1D,EAA6D,SAA7D,CAAP,CAT4C;CAA9C;;AAYA,OAAO,OAAP,GAAiB,aAAjB","file":"createPadding-compiled.js","sourcesContent":["var repeat = require('../string/repeat');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeIsFinite = global.isFinite;\n\n/**\n * Creates the padding required for `string` based on the given `length`.\n * The `chars` string is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {string} string The string to create padding for.\n * @param {number} [length=0] The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the pad for `string`.\n */\nfunction createPadding(string, length, chars) {\n  var strLength = string.length;\n  length = +length;\n\n  if (strLength >= length || !nativeIsFinite(length)) {\n    return '';\n  }\n  var padLength = length - strLength;\n  chars = chars == null ? ' ' : (chars + '');\n  return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);\n}\n\nmodule.exports = createPadding;\n"]}