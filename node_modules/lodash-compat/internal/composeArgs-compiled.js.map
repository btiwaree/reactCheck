{"version":3,"sources":["composeArgs.js"],"names":[],"mappings":";AACA,IAAI,YAAY,KAAK,GAAL;;;;;;;;;;;;AAYhB,SAAS,WAAT,CAAqB,IAArB,EAA2B,QAA3B,EAAqC,OAArC,EAA8C;AAC5C,MAAI,gBAAgB,QAAQ,MAAR;MAChB,YAAY,CAAC,CAAD;MACZ,aAAa,UAAU,KAAK,MAAL,GAAc,aAAd,EAA6B,CAAvC,CAAb;MACA,YAAY,CAAC,CAAD;MACZ,aAAa,SAAS,MAAT;MACb,SAAS,MAAM,aAAa,UAAb,CAAf,CANwC;;AAQ5C,SAAO,EAAE,SAAF,GAAc,UAAd,EAA0B;AAC/B,WAAO,SAAP,IAAoB,SAAS,SAAT,CAApB,CAD+B;GAAjC;AAGA,SAAO,EAAE,SAAF,GAAc,aAAd,EAA6B;AAClC,WAAO,QAAQ,SAAR,CAAP,IAA6B,KAAK,SAAL,CAA7B,CADkC;GAApC;AAGA,SAAO,YAAP,EAAqB;AACnB,WAAO,WAAP,IAAsB,KAAK,WAAL,CAAtB,CADmB;GAArB;AAGA,SAAO,MAAP,CAjB4C;CAA9C;;AAoBA,OAAO,OAAP,GAAiB,WAAjB","file":"composeArgs-compiled.js","sourcesContent":["/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array|Object} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders) {\n  var holdersLength = holders.length,\n      argsIndex = -1,\n      argsLength = nativeMax(args.length - holdersLength, 0),\n      leftIndex = -1,\n      leftLength = partials.length,\n      result = Array(leftLength + argsLength);\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    result[holders[argsIndex]] = args[argsIndex];\n  }\n  while (argsLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"]}