{"version":3,"sources":["baseMatchesProperty.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,WAAR,CAAV;IACA,cAAc,QAAQ,eAAR,CAAd;IACA,YAAY,QAAQ,aAAR,CAAZ;IACA,UAAU,QAAQ,iBAAR,CAAV;IACA,QAAQ,QAAQ,SAAR,CAAR;IACA,qBAAqB,QAAQ,sBAAR,CAArB;IACA,OAAO,QAAQ,eAAR,CAAP;IACA,WAAW,QAAQ,YAAR,CAAX;IACA,SAAS,QAAQ,UAAR,CAAT;;;;;;;;;;AAUJ,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,QAAnC,EAA6C;AAC3C,MAAI,QAAQ,QAAQ,IAAR,CAAR;MACA,WAAW,MAAM,IAAN,KAAe,mBAAmB,QAAnB,CAAf;MACX,UAAW,OAAO,EAAP,CAH4B;;AAK3C,SAAO,OAAO,IAAP,CAAP,CAL2C;AAM3C,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,UAAU,IAAV,EAAgB;AAClB,aAAO,KAAP,CADkB;KAApB;AAGA,QAAI,MAAM,OAAN,CAJkB;AAKtB,aAAS,SAAS,MAAT,CAAT,CALsB;AAMtB,QAAI,CAAC,SAAS,CAAC,QAAD,CAAV,IAAwB,EAAE,OAAO,MAAP,CAAF,EAAkB;AAC5C,eAAS,KAAK,MAAL,IAAe,CAAf,GAAmB,MAAnB,GAA4B,QAAQ,MAAR,EAAgB,UAAU,IAAV,EAAgB,CAAhB,EAAmB,CAAC,CAAD,CAAnC,CAA5B,CADmC;AAE5C,UAAI,UAAU,IAAV,EAAgB;AAClB,eAAO,KAAP,CADkB;OAApB;AAGA,YAAM,KAAK,IAAL,CAAN,CAL4C;AAM5C,eAAS,SAAS,MAAT,CAAT,CAN4C;KAA9C;AAQA,WAAO,OAAO,GAAP,MAAgB,QAAhB,GACF,aAAa,SAAb,IAA2B,OAAO,MAAP,GAC5B,YAAY,QAAZ,EAAsB,OAAO,GAAP,CAAtB,EAAmC,SAAnC,EAA8C,IAA9C,CAFG,CAde;GAAjB,CANoC;CAA7C;;AA0BA,OAAO,OAAP,GAAiB,mBAAjB","file":"baseMatchesProperty-compiled.js","sourcesContent":["var baseGet = require('./baseGet'),\n    baseIsEqual = require('./baseIsEqual'),\n    baseSlice = require('./baseSlice'),\n    isArray = require('../lang/isArray'),\n    isKey = require('./isKey'),\n    isStrictComparable = require('./isStrictComparable'),\n    last = require('../array/last'),\n    toObject = require('./toObject'),\n    toPath = require('./toPath');\n\n/**\n * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to compare.\n * @returns {Function} Returns the new function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  var isArr = isArray(path),\n      isCommon = isKey(path) && isStrictComparable(srcValue),\n      pathKey = (path + '');\n\n  path = toPath(path);\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    var key = pathKey;\n    object = toObject(object);\n    if ((isArr || !isCommon) && !(key in object)) {\n      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n      if (object == null) {\n        return false;\n      }\n      key = last(path);\n      object = toObject(object);\n    }\n    return object[key] === srcValue\n      ? (srcValue !== undefined || (key in object))\n      : baseIsEqual(srcValue, object[key], undefined, true);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"]}