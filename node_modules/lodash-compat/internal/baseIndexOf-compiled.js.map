{"version":3,"sources":["baseIndexOf.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,cAAR,CAAb;;;;;;;;;;;AAWJ,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C;AAC5C,MAAI,UAAU,KAAV,EAAiB;AACnB,WAAO,WAAW,KAAX,EAAkB,SAAlB,CAAP,CADmB;GAArB;AAGA,MAAI,QAAQ,YAAY,CAAZ;MACR,SAAS,MAAM,MAAN,CAL+B;;AAO5C,SAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,QAAI,MAAM,KAAN,MAAiB,KAAjB,EAAwB;AAC1B,aAAO,KAAP,CAD0B;KAA5B;GADF;AAKA,SAAO,CAAC,CAAD,CAZqC;CAA9C;;AAeA,OAAO,OAAP,GAAiB,WAAjB","file":"baseIndexOf-compiled.js","sourcesContent":["var indexOfNaN = require('./indexOfNaN');\n\n/**\n * The base implementation of `_.indexOf` without support for binary searches.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return indexOfNaN(array, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseIndexOf;\n"]}