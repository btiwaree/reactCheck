{"version":3,"sources":["escapeRegExpChar.js"],"names":[],"mappings":";AACA,IAAI,gBAAgB;AAClB,OAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL;AAChD,OAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL;AAChD,OAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL;AAC5D,OAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL;AAC5D,OAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL,EAAY,KAAK,KAAL;CAL1D;;;AASJ,IAAI,gBAAgB;AAClB,QAAM,IAAN;AACA,OAAK,GAAL;AACA,QAAM,GAAN;AACA,QAAM,GAAN;AACA,YAAU,OAAV;AACA,YAAU,OAAV;CANE;;;;;;;;;;;AAkBJ,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,WAA/B,EAA4C,cAA5C,EAA4D;AAC1D,MAAI,WAAJ,EAAiB;AACf,UAAM,cAAc,GAAd,CAAN,CADe;GAAjB,MAEO,IAAI,cAAJ,EAAoB;AACzB,UAAM,cAAc,GAAd,CAAN,CADyB;GAApB;AAGP,SAAO,OAAO,GAAP,CANmD;CAA5D;;AASA,OAAO,OAAP,GAAiB,gBAAjB","file":"escapeRegExpChar-compiled.js","sourcesContent":["/** Used to escape characters for inclusion in compiled regexes. */\nvar regexpEscapes = {\n  '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',\n  '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',\n  'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',\n  'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',\n  'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'\n};\n\n/** Used to escape characters for inclusion in compiled string literals. */\nvar stringEscapes = {\n  '\\\\': '\\\\',\n  \"'\": \"'\",\n  '\\n': 'n',\n  '\\r': 'r',\n  '\\u2028': 'u2028',\n  '\\u2029': 'u2029'\n};\n\n/**\n * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @param {string} leadingChar The capture group for a leading character.\n * @param {string} whitespaceChar The capture group for a whitespace character.\n * @returns {string} Returns the escaped character.\n */\nfunction escapeRegExpChar(chr, leadingChar, whitespaceChar) {\n  if (leadingChar) {\n    chr = regexpEscapes[chr];\n  } else if (whitespaceChar) {\n    chr = stringEscapes[chr];\n  }\n  return '\\\\' + chr;\n}\n\nmodule.exports = escapeRegExpChar;\n"]}