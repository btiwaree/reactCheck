{"version":3,"sources":["toPath.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,gBAAR,CAAf;IACA,UAAU,QAAQ,iBAAR,CAAV;;;AAGJ,IAAI,aAAa,uEAAb;;;AAGJ,IAAI,eAAe,UAAf;;;;;;;;;AASJ,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AACrB,MAAI,QAAQ,KAAR,CAAJ,EAAoB;AAClB,WAAO,KAAP,CADkB;GAApB;AAGA,MAAI,SAAS,EAAT,CAJiB;AAKrB,eAAa,KAAb,EAAoB,OAApB,CAA4B,UAA5B,EAAwC,UAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,MAA/B,EAAuC;AAC7E,WAAO,IAAP,CAAY,QAAQ,OAAO,OAAP,CAAe,YAAf,EAA6B,IAA7B,CAAR,GAA8C,UAAU,KAAV,CAA1D,CAD6E;GAAvC,CAAxC,CALqB;AAQrB,SAAO,MAAP,CARqB;CAAvB;;AAWA,OAAO,OAAP,GAAiB,MAAjB","file":"toPath-compiled.js","sourcesContent":["var baseToString = require('./baseToString'),\n    isArray = require('../lang/isArray');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `value` to property path array if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Array} Returns the property path array.\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  var result = [];\n  baseToString(value).replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n}\n\nmodule.exports = toPath;\n"]}