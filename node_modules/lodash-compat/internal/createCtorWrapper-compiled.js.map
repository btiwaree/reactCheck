{"version":3,"sources":["createCtorWrapper.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,cAAR,CAAb;IACA,WAAW,QAAQ,kBAAR,CAAX;;;;;;;;;;AAUJ,SAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC/B,SAAO,YAAW;;;;AAIhB,QAAI,OAAO,SAAP,CAJY;AAKhB,YAAQ,KAAK,MAAL;AACN,WAAK,CAAL;AAAQ,eAAO,IAAI,IAAJ,EAAP,CAAR;AADF,WAEO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,CAAP,CAAR;AAFF,WAGO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,CAAP,CAAR;AAHF,WAIO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,CAAP,CAAR;AAJF,WAKO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,CAAP,CAAR;AALF,WAMO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,EAA6C,KAAK,CAAL,CAA7C,CAAP,CAAR;AANF,WAOO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,EAA6C,KAAK,CAAL,CAA7C,EAAsD,KAAK,CAAL,CAAtD,CAAP,CAAR;AAPF,WAQO,CAAL;AAAQ,eAAO,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT,EAAkB,KAAK,CAAL,CAAlB,EAA2B,KAAK,CAAL,CAA3B,EAAoC,KAAK,CAAL,CAApC,EAA6C,KAAK,CAAL,CAA7C,EAAsD,KAAK,CAAL,CAAtD,EAA+D,KAAK,CAAL,CAA/D,CAAP,CAAR;AARF,KALgB;AAehB,QAAI,cAAc,WAAW,KAAK,SAAL,CAAzB;QACA,SAAS,KAAK,KAAL,CAAW,WAAX,EAAwB,IAAxB,CAAT;;;;AAhBY,WAoBT,SAAS,MAAT,IAAmB,MAAnB,GAA4B,WAA5B,CApBS;GAAX,CADwB;CAAjC;;AAyBA,OAAO,OAAP,GAAiB,iBAAjB","file":"createCtorWrapper-compiled.js","sourcesContent":["var baseCreate = require('./baseCreate'),\n    isObject = require('../lang/isObject');\n\n/**\n * Creates a function that produces an instance of `Ctor` regardless of\n * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n *\n * @private\n * @param {Function} Ctor The constructor to wrap.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCtorWrapper(Ctor) {\n  return function() {\n    // Use a `switch` statement to work with class constructors.\n    // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n    // for more details.\n    var args = arguments;\n    switch (args.length) {\n      case 0: return new Ctor;\n      case 1: return new Ctor(args[0]);\n      case 2: return new Ctor(args[0], args[1]);\n      case 3: return new Ctor(args[0], args[1], args[2]);\n      case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n    }\n    var thisBinding = baseCreate(Ctor.prototype),\n        result = Ctor.apply(thisBinding, args);\n\n    // Mimic the constructor's `return` behavior.\n    // See https://es5.github.io/#x13.2.2 for more details.\n    return isObject(result) ? result : thisBinding;\n  };\n}\n\nmodule.exports = createCtorWrapper;\n"]}