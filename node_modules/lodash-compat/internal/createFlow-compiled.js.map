{"version":3,"sources":["createFlow.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,iBAAR,CAAhB;IACA,UAAU,QAAQ,WAAR,CAAV;IACA,cAAc,QAAQ,eAAR,CAAd;IACA,UAAU,QAAQ,iBAAR,CAAV;IACA,aAAa,QAAQ,cAAR,CAAb;;;AAGJ,IAAI,aAAa,CAAb;IACA,eAAe,EAAf;IACA,WAAW,GAAX;IACA,aAAa,GAAb;;;AAGJ,IAAI,mBAAmB,GAAnB;;;AAGJ,IAAI,kBAAkB,qBAAlB;;;;;;;;;AASJ,SAAS,UAAT,CAAoB,SAApB,EAA+B;AAC7B,SAAO,YAAW;AAChB,QAAI,OAAJ;QACI,SAAS,UAAU,MAAV;QACT,QAAQ,YAAY,MAAZ,GAAqB,CAAC,CAAD;QAC7B,YAAY,CAAZ;QACA,QAAQ,MAAM,MAAN,CAAR,CALY;;AAOhB,WAAQ,YAAY,OAAZ,GAAsB,EAAE,KAAF,GAAU,MAAV,EAAmB;AAC/C,UAAI,OAAO,MAAM,WAAN,IAAqB,UAAU,KAAV,CAArB,CADoC;AAE/C,UAAI,OAAO,IAAP,IAAe,UAAf,EAA2B;AAC7B,cAAM,IAAI,SAAJ,CAAc,eAAd,CAAN,CAD6B;OAA/B;AAGA,UAAI,CAAC,OAAD,IAAY,cAAc,SAAd,CAAwB,IAAxB,IAAgC,YAAY,IAAZ,KAAqB,SAArB,EAAgC;AAC9E,kBAAU,IAAI,aAAJ,CAAkB,EAAlB,EAAsB,IAAtB,CAAV,CAD8E;OAAhF;KALF;AASA,YAAQ,UAAU,CAAC,CAAD,GAAK,MAAf,CAhBQ;AAiBhB,WAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,aAAO,MAAM,KAAN,CAAP,CADuB;;AAGvB,UAAI,WAAW,YAAY,IAAZ,CAAX;UACA,OAAO,YAAY,SAAZ,GAAwB,QAAQ,IAAR,CAAxB,GAAwC,SAAxC,CAJY;;AAMvB,UAAI,QAAQ,WAAW,KAAK,CAAL,CAAX,CAAR,IAA+B,KAAK,CAAL,MAAY,WAAW,UAAX,GAAwB,YAAxB,GAAuC,UAAvC,CAAZ,IAAkE,CAAC,KAAK,CAAL,EAAQ,MAAR,IAAkB,KAAK,CAAL,KAAW,CAAX,EAAc;AACpI,kBAAU,QAAQ,YAAY,KAAK,CAAL,CAAZ,CAAR,EAA8B,KAA9B,CAAoC,OAApC,EAA6C,KAAK,CAAL,CAA7C,CAAV,CADoI;OAAtI,MAEO;AACL,kBAAU,IAAC,CAAK,MAAL,IAAe,CAAf,IAAoB,WAAW,IAAX,CAApB,GAAwC,QAAQ,QAAR,GAAzC,GAA+D,QAAQ,IAAR,CAAa,IAAb,CAA/D,CADL;OAFP;KANF;AAYA,WAAO,YAAW;AAChB,UAAI,OAAO,SAAP;UACA,QAAQ,KAAK,CAAL,CAAR,CAFY;;AAIhB,UAAI,WAAW,KAAK,MAAL,IAAe,CAAf,IAAoB,QAAQ,KAAR,CAA/B,IAAiD,MAAM,MAAN,IAAgB,gBAAhB,EAAkC;AACrF,eAAO,QAAQ,KAAR,CAAc,KAAd,EAAqB,KAArB,EAAP,CADqF;OAAvF;AAGA,UAAI,QAAQ,CAAR;UACA,SAAS,SAAS,MAAM,KAAN,EAAa,KAAb,CAAmB,IAAnB,EAAyB,IAAzB,CAAT,GAA0C,KAA1C,CARG;;AAUhB,aAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,iBAAS,MAAM,KAAN,EAAa,IAAb,CAAkB,IAAlB,EAAwB,MAAxB,CAAT,CADuB;OAAzB;AAGA,aAAO,MAAP,CAbgB;KAAX,CA7BS;GAAX,CADsB;CAA/B;;AAgDA,OAAO,OAAP,GAAiB,UAAjB","file":"createFlow-compiled.js","sourcesContent":["var LodashWrapper = require('./LodashWrapper'),\n    getData = require('./getData'),\n    getFuncName = require('./getFuncName'),\n    isArray = require('../lang/isArray'),\n    isLaziable = require('./isLaziable');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar CURRY_FLAG = 8,\n    PARTIAL_FLAG = 32,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a `_.flow` or `_.flowRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new flow function.\n */\nfunction createFlow(fromRight) {\n  return function() {\n    var wrapper,\n        length = arguments.length,\n        index = fromRight ? length : -1,\n        leftIndex = 0,\n        funcs = Array(length);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var func = funcs[leftIndex++] = arguments[index];\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {\n        wrapper = new LodashWrapper([], true);\n      }\n    }\n    index = wrapper ? -1 : length;\n    while (++index < length) {\n      func = funcs[index];\n\n      var funcName = getFuncName(func),\n          data = funcName == 'wrapper' ? getData(func) : undefined;\n\n      if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n      } else {\n        wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n      }\n    }\n    return function() {\n      var args = arguments,\n          value = args[0];\n\n      if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n        return wrapper.plant(value).value();\n      }\n      var index = 0,\n          result = length ? funcs[index].apply(this, args) : value;\n\n      while (++index < length) {\n        result = funcs[index].call(this, result);\n      }\n      return result;\n    };\n  };\n}\n\nmodule.exports = createFlow;\n"]}