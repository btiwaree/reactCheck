{"version":3,"sources":["createPartialWrapper.js"],"names":[],"mappings":"AAAA,IAAI,oBAAoB,QAAQ,qBAAR,CAApB;;;AAGJ,IAAI,YAAY,CAAZ;;;;;;;;;;;;;;AAcJ,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,OAApC,EAA6C,OAA7C,EAAsD,QAAtD,EAAgE;AAC9D,MAAI,SAAS,UAAU,SAAV;MACT,OAAO,kBAAkB,IAAlB,CAAP,CAF0D;;AAI9D,WAAS,OAAT,GAAmB;;;AAGjB,QAAI,YAAY,CAAC,CAAD;QACZ,aAAa,UAAU,MAAV;QACb,YAAY,CAAC,CAAD;QACZ,aAAa,SAAS,MAAT;QACb,OAAO,MAAM,aAAa,UAAb,CAAb,CAPa;;AASjB,WAAO,EAAE,SAAF,GAAc,UAAd,EAA0B;AAC/B,WAAK,SAAL,IAAkB,SAAS,SAAT,CAAlB,CAD+B;KAAjC;AAGA,WAAO,YAAP,EAAqB;AACnB,WAAK,WAAL,IAAoB,UAAU,EAAE,SAAF,CAA9B,CADmB;KAArB;AAGA,QAAI,KAAK,IAAC,IAAQ,SAAS,MAAT,IAAmB,gBAAgB,OAAhB,GAA2B,IAAvD,GAA8D,IAA9D,CAfQ;AAgBjB,WAAO,GAAG,KAAH,CAAS,SAAS,OAAT,GAAmB,IAAnB,EAAyB,IAAlC,CAAP,CAhBiB;GAAnB;AAkBA,SAAO,OAAP,CAtB8D;CAAhE;;AAyBA,OAAO,OAAP,GAAiB,oBAAjB","file":"createPartialWrapper-compiled.js","sourcesContent":["var createCtorWrapper = require('./createCtorWrapper');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` and invokes it with the optional `this`\n * binding of `thisArg` and the `partials` prepended to those provided to\n * the wrapper.\n *\n * @private\n * @param {Function} func The function to partially apply arguments to.\n * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to the new function.\n * @returns {Function} Returns the new bound function.\n */\nfunction createPartialWrapper(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & BIND_FLAG,\n      Ctor = createCtorWrapper(func);\n\n  function wrapper() {\n    // Avoid `arguments` object use disqualifying optimizations by\n    // converting it to an array before providing it `func`.\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength);\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    var fn = (this && this !== global && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartialWrapper;\n"]}