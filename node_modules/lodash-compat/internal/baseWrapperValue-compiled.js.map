{"version":3,"sources":["baseWrapperValue.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAd;IACA,YAAY,QAAQ,aAAR,CAAZ;;;;;;;;;;;;AAYJ,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,OAAjC,EAA0C;AACxC,MAAI,SAAS,KAAT,CADoC;AAExC,MAAI,kBAAkB,WAAlB,EAA+B;AACjC,aAAS,OAAO,KAAP,EAAT,CADiC;GAAnC;AAGA,MAAI,QAAQ,CAAC,CAAD;MACR,SAAS,QAAQ,MAAR,CAN2B;;AAQxC,SAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,QAAI,SAAS,QAAQ,KAAR,CAAT,CADmB;AAEvB,aAAS,OAAO,IAAP,CAAY,KAAZ,CAAkB,OAAO,OAAP,EAAgB,UAAU,CAAC,MAAD,CAAV,EAAoB,OAAO,IAAP,CAAtD,CAAT,CAFuB;GAAzB;AAIA,SAAO,MAAP,CAZwC;CAA1C;;AAeA,OAAO,OAAP,GAAiB,gBAAjB","file":"baseWrapperValue-compiled.js","sourcesContent":["var LazyWrapper = require('./LazyWrapper'),\n    arrayPush = require('./arrayPush');\n\n/**\n * The base implementation of `wrapperValue` which returns the result of\n * performing a sequence of actions on the unwrapped `value`, where each\n * successive action is supplied the return value of the previous.\n *\n * @private\n * @param {*} value The unwrapped value.\n * @param {Array} actions Actions to peform to resolve the unwrapped value.\n * @returns {*} Returns the resolved value.\n */\nfunction baseWrapperValue(value, actions) {\n  var result = value;\n  if (result instanceof LazyWrapper) {\n    result = result.value();\n  }\n  var index = -1,\n      length = actions.length;\n\n  while (++index < length) {\n    var action = actions[index];\n    result = action.func.apply(action.thisArg, arrayPush([result], action.args));\n  }\n  return result;\n}\n\nmodule.exports = baseWrapperValue;\n"]}