{"version":3,"sources":["reorder.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAZ;IACA,UAAU,QAAQ,WAAR,CAAV;;;AAGJ,IAAI,YAAY,KAAK,GAAL;;;;;;;;;;;;AAYhB,SAAS,OAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC/B,MAAI,YAAY,MAAM,MAAN;MACZ,SAAS,UAAU,QAAQ,MAAR,EAAgB,SAA1B,CAAT;MACA,WAAW,UAAU,KAAV,CAAX,CAH2B;;AAK/B,SAAO,QAAP,EAAiB;AACf,QAAI,QAAQ,QAAQ,MAAR,CAAR,CADW;AAEf,UAAM,MAAN,IAAgB,QAAQ,KAAR,EAAe,SAAf,IAA4B,SAAS,KAAT,CAA5B,GAA8C,SAA9C,CAFD;GAAjB;AAIA,SAAO,KAAP,CAT+B;CAAjC;;AAYA,OAAO,OAAP,GAAiB,OAAjB","file":"reorder-compiled.js","sourcesContent":["var arrayCopy = require('./arrayCopy'),\n    isIndex = require('./isIndex');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = arrayCopy(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n"]}