{"version":3,"sources":["isString.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAf;;;AAGJ,IAAI,YAAY,iBAAZ;;;AAGJ,IAAI,cAAc,OAAO,SAAP;;;;;;AAMlB,IAAI,cAAc,YAAY,QAAZ;;;;;;;;;;;;;;;;;;AAkBlB,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,SAAO,OAAO,KAAP,IAAgB,QAAhB,IAA6B,aAAa,KAAb,KAAuB,YAAY,IAAZ,CAAiB,KAAjB,KAA2B,SAA3B,CADpC;CAAzB;;AAIA,OAAO,OAAP,GAAiB,QAAjB","file":"isString-compiled.js","sourcesContent":["var isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n"]}