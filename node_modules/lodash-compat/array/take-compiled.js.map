{"version":3,"sources":["take.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAZ;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BJ,SAAS,IAAT,CAAc,KAAd,EAAqB,CAArB,EAAwB,KAAxB,EAA+B;AAC7B,MAAI,SAAS,QAAQ,MAAM,MAAN,GAAe,CAAvB,CADgB;AAE7B,MAAI,CAAC,MAAD,EAAS;AACX,WAAO,EAAP,CADW;GAAb;AAGA,MAAI,QAAQ,eAAe,KAAf,EAAsB,CAAtB,EAAyB,KAAzB,CAAR,GAA0C,KAAK,IAAL,EAAW;AACvD,QAAI,CAAJ,CADuD;GAAzD;AAGA,SAAO,UAAU,KAAV,EAAiB,CAAjB,EAAoB,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAZ,CAA3B,CAR6B;CAA/B;;AAWA,OAAO,OAAP,GAAiB,IAAjB","file":"take-compiled.js","sourcesContent":["var baseSlice = require('../internal/baseSlice'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */\nfunction take(array, n, guard) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (guard ? isIterateeCall(array, n, guard) : n == null) {\n    n = 1;\n  }\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nmodule.exports = take;\n"]}