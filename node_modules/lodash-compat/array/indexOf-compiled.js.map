{"version":3,"sources":["indexOf.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,yBAAR,CAAd;IACA,cAAc,QAAQ,yBAAR,CAAd;;;AAGJ,IAAI,YAAY,KAAK,GAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BhB,SAAS,OAAT,CAAiB,KAAjB,EAAwB,KAAxB,EAA+B,SAA/B,EAA0C;AACxC,MAAI,SAAS,QAAQ,MAAM,MAAN,GAAe,CAAvB,CAD2B;AAExC,MAAI,CAAC,MAAD,EAAS;AACX,WAAO,CAAC,CAAD,CADI;GAAb;AAGA,MAAI,OAAO,SAAP,IAAoB,QAApB,EAA8B;AAChC,gBAAY,YAAY,CAAZ,GAAgB,UAAU,SAAS,SAAT,EAAoB,CAA9B,CAAhB,GAAmD,SAAnD,CADoB;GAAlC,MAEO,IAAI,SAAJ,EAAe;AACpB,QAAI,QAAQ,YAAY,KAAZ,EAAmB,KAAnB,CAAR,CADgB;AAEpB,QAAI,QAAQ,MAAR,KACC,UAAU,KAAV,GAAmB,UAAU,MAAM,KAAN,CAAV,GAA2B,MAAM,KAAN,MAAiB,MAAM,KAAN,CAAjB,CAD/C,EACgF;AAClF,aAAO,KAAP,CADkF;KADpF;AAIA,WAAO,CAAC,CAAD,CANa;GAAf;AAQP,SAAO,YAAY,KAAZ,EAAmB,KAAnB,EAA0B,aAAa,CAAb,CAAjC,CAfwC;CAA1C;;AAkBA,OAAO,OAAP,GAAiB,OAAjB","file":"indexOf-compiled.js","sourcesContent":["var baseIndexOf = require('../internal/baseIndexOf'),\n    binaryIndex = require('../internal/binaryIndex');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the offset\n * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`\n * performs a faster binary search.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n *  to perform a binary search on a sorted array.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // using `fromIndex`\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n *\n * // performing a binary search\n * _.indexOf([1, 1, 2, 2], 2, true);\n * // => 2\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  if (typeof fromIndex == 'number') {\n    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;\n  } else if (fromIndex) {\n    var index = binaryIndex(array, value);\n    if (index < length &&\n        (value === value ? (value === array[index]) : (array[index] !== array[index]))) {\n      return index;\n    }\n    return -1;\n  }\n  return baseIndexOf(array, value, fromIndex || 0);\n}\n\nmodule.exports = indexOf;\n"]}