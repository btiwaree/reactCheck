{"version":3,"sources":["flatten.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,yBAAR,CAAd;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;;;;;;;;;;;;;;;;;;;;;;AAsBJ,SAAS,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,KAAhC,EAAuC;AACrC,MAAI,SAAS,QAAQ,MAAM,MAAN,GAAe,CAAvB,CADwB;AAErC,MAAI,SAAS,eAAe,KAAf,EAAsB,MAAtB,EAA8B,KAA9B,CAAT,EAA+C;AACjD,aAAS,KAAT,CADiD;GAAnD;AAGA,SAAO,SAAS,YAAY,KAAZ,EAAmB,MAAnB,CAAT,GAAsC,EAAtC,CAL8B;CAAvC;;AAQA,OAAO,OAAP,GAAiB,OAAjB","file":"flatten-compiled.js","sourcesContent":["var baseFlatten = require('../internal/baseFlatten'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Flattens a nested array. If `isDeep` is `true` the array is recursively\n * flattened, otherwise it's only flattened a single level.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {boolean} [isDeep] Specify a deep flatten.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, 3, [4]]]);\n * // => [1, 2, 3, [4]]\n *\n * // using `isDeep`\n * _.flatten([1, [2, 3, [4]]], true);\n * // => [1, 2, 3, 4]\n */\nfunction flatten(array, isDeep, guard) {\n  var length = array ? array.length : 0;\n  if (guard && isIterateeCall(array, isDeep, guard)) {\n    isDeep = false;\n  }\n  return length ? baseFlatten(array, isDeep) : [];\n}\n\nmodule.exports = flatten;\n"]}