{"version":3,"sources":["wrapperConcat.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,yBAAR,CAAd;IACA,cAAc,QAAQ,yBAAR,CAAd;IACA,UAAU,QAAQ,iBAAR,CAAV;IACA,YAAY,QAAQ,uBAAR,CAAZ;IACA,WAAW,QAAQ,sBAAR,CAAX;;;;;;;;;;;;;;;;;;;;;;AAsBJ,IAAI,gBAAgB,UAAU,UAAS,MAAT,EAAiB;AAC7C,WAAS,YAAY,MAAZ,CAAT,CAD6C;AAE7C,SAAO,KAAK,IAAL,CAAU,UAAS,KAAT,EAAgB;AAC/B,WAAO,YAAY,QAAQ,KAAR,IAAiB,KAAjB,GAAyB,CAAC,SAAS,KAAT,CAAD,CAAzB,EAA4C,MAAxD,CAAP,CAD+B;GAAhB,CAAjB,CAF6C;CAAjB,CAA1B;;AAOJ,OAAO,OAAP,GAAiB,aAAjB","file":"wrapperConcat-compiled.js","sourcesContent":["var arrayConcat = require('../internal/arrayConcat'),\n    baseFlatten = require('../internal/baseFlatten'),\n    isArray = require('../lang/isArray'),\n    restParam = require('../function/restParam'),\n    toObject = require('../internal/toObject');\n\n/**\n * Creates a new array joining a wrapped array with any additional arrays\n * and/or values.\n *\n * @name concat\n * @memberOf _\n * @category Chain\n * @param {...*} [values] The values to concatenate.\n * @returns {Array} Returns the new concatenated array.\n * @example\n *\n * var array = [1];\n * var wrapped = _(array).concat(2, [3], [[4]]);\n *\n * console.log(wrapped.value());\n * // => [1, 2, 3, [4]]\n *\n * console.log(array);\n * // => [1]\n */\nvar wrapperConcat = restParam(function(values) {\n  values = baseFlatten(values);\n  return this.thru(function(array) {\n    return arrayConcat(isArray(array) ? array : [toObject(array)], values);\n  });\n});\n\nmodule.exports = wrapperConcat;\n"]}