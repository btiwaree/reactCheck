{"version":3,"sources":["at.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,oBAAR,CAAT;IACA,cAAc,QAAQ,yBAAR,CAAd;IACA,cAAc,QAAQ,yBAAR,CAAd;IACA,YAAY,QAAQ,uBAAR,CAAZ;IACA,aAAa,QAAQ,wBAAR,CAAb;;;;;;;;;;;;;;;;;;;;;;AAsBJ,IAAI,KAAK,UAAU,UAAS,UAAT,EAAqB,KAArB,EAA4B;AAC7C,MAAI,YAAY,UAAZ,CAAJ,EAA6B;AAC3B,iBAAa,WAAW,UAAX,CAAb,CAD2B;GAA7B;AAGA,SAAO,OAAO,UAAP,EAAmB,YAAY,KAAZ,CAAnB,CAAP,CAJ6C;CAA5B,CAAf;;AAOJ,OAAO,OAAP,GAAiB,EAAjB","file":"at-compiled.js","sourcesContent":["var baseAt = require('../internal/baseAt'),\n    baseFlatten = require('../internal/baseFlatten'),\n    isArrayLike = require('../internal/isArrayLike'),\n    restParam = require('../function/restParam'),\n    toIterable = require('../internal/toIterable');\n\n/**\n * Creates an array of elements corresponding to the given keys, or indexes,\n * of `collection`. Keys may be specified as individual arguments or as arrays\n * of keys.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {...(number|number[]|string|string[])} [props] The property names\n *  or indexes of elements to pick, specified individually or in arrays.\n * @returns {Array} Returns the new array of picked elements.\n * @example\n *\n * _.at(['a', 'b', 'c'], [0, 2]);\n * // => ['a', 'c']\n *\n * _.at(['barney', 'fred', 'pebbles'], 0, 2);\n * // => ['barney', 'pebbles']\n */\nvar at = restParam(function(collection, props) {\n  if (isArrayLike(collection)) {\n    collection = toIterable(collection);\n  }\n  return baseAt(collection, baseFlatten(props));\n});\n\nmodule.exports = at;\n"]}