{"version":3,"sources":["reduceRight.js"],"names":[],"mappings":"AAAA,IAAI,mBAAmB,QAAQ,8BAAR,CAAnB;IACA,gBAAgB,QAAQ,2BAAR,CAAhB;IACA,eAAe,QAAQ,0BAAR,CAAf;;;;;;;;;;;;;;;;;;;;;;;;AAwBJ,IAAI,cAAc,aAAa,gBAAb,EAA+B,aAA/B,CAAd;;AAEJ,OAAO,OAAP,GAAiB,WAAjB","file":"reduceRight-compiled.js","sourcesContent":["var arrayReduceRight = require('../internal/arrayReduceRight'),\n    baseEachRight = require('../internal/baseEachRight'),\n    createReduce = require('../internal/createReduce');\n\n/**\n * This method is like `_.reduce` except that it iterates over elements of\n * `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @alias foldr\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * var array = [[0, 1], [2, 3], [4, 5]];\n *\n * _.reduceRight(array, function(flattened, other) {\n *   return flattened.concat(other);\n * }, []);\n * // => [4, 5, 2, 3, 0, 1]\n */\nvar reduceRight = createReduce(arrayReduceRight, baseEachRight);\n\nmodule.exports = reduceRight;\n"]}