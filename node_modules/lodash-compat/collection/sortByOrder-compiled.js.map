{"version":3,"sources":["sortByOrder.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB,QAAQ,6BAAR,CAAlB;IACA,UAAU,QAAQ,iBAAR,CAAV;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCJ,SAAS,WAAT,CAAqB,UAArB,EAAiC,SAAjC,EAA4C,MAA5C,EAAoD,KAApD,EAA2D;AACzD,MAAI,cAAc,IAAd,EAAoB;AACtB,WAAO,EAAP,CADsB;GAAxB;AAGA,MAAI,SAAS,eAAe,SAAf,EAA0B,MAA1B,EAAkC,KAAlC,CAAT,EAAmD;AACrD,aAAS,SAAT,CADqD;GAAvD;AAGA,MAAI,CAAC,QAAQ,SAAR,CAAD,EAAqB;AACvB,gBAAY,aAAa,IAAb,GAAoB,EAApB,GAAyB,CAAC,SAAD,CAAzB,CADW;GAAzB;AAGA,MAAI,CAAC,QAAQ,MAAR,CAAD,EAAkB;AACpB,aAAS,UAAU,IAAV,GAAiB,EAAjB,GAAsB,CAAC,MAAD,CAAtB,CADW;GAAtB;AAGA,SAAO,gBAAgB,UAAhB,EAA4B,SAA5B,EAAuC,MAAvC,CAAP,CAbyD;CAA3D;;AAgBA,OAAO,OAAP,GAAiB,WAAjB","file":"sortByOrder-compiled.js","sourcesContent":["var baseSortByOrder = require('../internal/baseSortByOrder'),\n    isArray = require('../lang/isArray'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * This method is like `_.sortByAll` except that it allows specifying the\n * sort orders of the iteratees to sort by. If `orders` is unspecified, all\n * values are sorted in ascending order. Otherwise, a value is sorted in\n * ascending order if its corresponding order is \"asc\", and descending if \"desc\".\n *\n * If a property name is provided for an iteratee the created `_.property`\n * style callback returns the property value of the given element.\n *\n * If an object is provided for an iteratee the created `_.matches` style\n * callback returns `true` for elements that have the properties of the given\n * object, else `false`.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {boolean[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 42 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // sort by `user` in ascending order and by `age` in descending order\n * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);\n * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n */\nfunction sortByOrder(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (guard && isIterateeCall(iteratees, orders, guard)) {\n    orders = undefined;\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseSortByOrder(collection, iteratees, orders);\n}\n\nmodule.exports = sortByOrder;\n"]}