{"version":3,"sources":["sample.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,wBAAR,CAAb;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,UAAU,QAAQ,iBAAR,CAAV;IACA,aAAa,QAAQ,wBAAR,CAAb;;;AAGJ,IAAI,YAAY,KAAK,GAAL;;;;;;;;;;;;;;;;;;;;AAoBhB,SAAS,MAAT,CAAgB,UAAhB,EAA4B,CAA5B,EAA+B,KAA/B,EAAsC;AACpC,QAAI,QAAQ,eAAe,UAAf,EAA2B,CAA3B,EAA8B,KAA9B,CAAR,GAA+C,KAAK,IAAL,EAAW;AAC5D,qBAAa,WAAW,UAAX,CAAb,CAD4D;AAE5D,YAAI,SAAS,WAAW,MAAX,CAF+C;AAG5D,eAAO,SAAS,CAAT,GAAa,WAAW,WAAW,CAAX,EAAc,SAAS,CAAT,CAAzB,CAAb,GAAqD,SAArD,CAHqD;KAA9D;AAKA,QAAI,QAAQ,CAAC,CAAD;QACR,SAAS,QAAQ,UAAR,CAAT;QACA,SAAS,OAAO,MAAP;QACT,YAAY,SAAS,CAAT,CAToB;;AAWpC,QAAI,UAAU,IAAI,CAAJ,GAAQ,CAAR,GAAa,CAAC,CAAD,IAAM,CAAN,EAAU,MAAjC,CAAJ,CAXoC;AAYpC,WAAO,EAAE,KAAF,GAAU,CAAV,EAAa;AAClB,YAAI,OAAO,WAAW,KAAX,EAAkB,SAAlB,CAAP;YACA,QAAQ,OAAO,IAAP,CAAR,CAFc;;AAIlB,eAAO,IAAP,IAAe,OAAO,KAAP,CAAf,CAJkB;AAKlB,eAAO,KAAP,IAAgB,KAAhB,CALkB;KAApB;AAOA,WAAO,MAAP,GAAgB,CAAhB,CAnBoC;AAoBpC,WAAO,MAAP,CApBoC;CAAtC;;AAuBA,OAAO,OAAP,GAAiB,MAAjB","file":"sample-compiled.js","sourcesContent":["var baseRandom = require('../internal/baseRandom'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    toArray = require('../lang/toArray'),\n    toIterable = require('../internal/toIterable');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Gets a random element or `n` random elements from a collection.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to sample.\n * @param {number} [n] The number of elements to sample.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {*} Returns the random sample(s).\n * @example\n *\n * _.sample([1, 2, 3, 4]);\n * // => 2\n *\n * _.sample([1, 2, 3, 4], 2);\n * // => [3, 1]\n */\nfunction sample(collection, n, guard) {\n  if (guard ? isIterateeCall(collection, n, guard) : n == null) {\n    collection = toIterable(collection);\n    var length = collection.length;\n    return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;\n  }\n  var index = -1,\n      result = toArray(collection),\n      length = result.length,\n      lastIndex = length - 1;\n\n  n = nativeMin(n < 0 ? 0 : (+n || 0), length);\n  while (++index < n) {\n    var rand = baseRandom(index, lastIndex),\n        value = result[rand];\n\n    result[rand] = result[index];\n    result[index] = value;\n  }\n  result.length = n;\n  return result;\n}\n\nmodule.exports = sample;\n"]}