{"version":3,"sources":["bindAll.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,yBAAR,CAAd;IACA,gBAAgB,QAAQ,2BAAR,CAAhB;IACA,YAAY,QAAQ,qBAAR,CAAZ;IACA,YAAY,QAAQ,aAAR,CAAZ;;;AAGJ,IAAI,YAAY,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BJ,IAAI,UAAU,UAAU,UAAS,MAAT,EAAiB,WAAjB,EAA8B;AACpD,gBAAc,YAAY,MAAZ,GAAqB,YAAY,WAAZ,CAArB,GAAgD,UAAU,MAAV,CAAhD,CADsC;;AAGpD,MAAI,QAAQ,CAAC,CAAD;MACR,SAAS,YAAY,MAAZ,CAJuC;;AAMpD,SAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,QAAI,MAAM,YAAY,KAAZ,CAAN,CADmB;AAEvB,WAAO,GAAP,IAAc,cAAc,OAAO,GAAP,CAAd,EAA2B,SAA3B,EAAsC,MAAtC,CAAd,CAFuB;GAAzB;AAIA,SAAO,MAAP,CAVoD;CAA9B,CAApB;;AAaJ,OAAO,OAAP,GAAiB,OAAjB","file":"bindAll-compiled.js","sourcesContent":["var baseFlatten = require('../internal/baseFlatten'),\n    createWrapper = require('../internal/createWrapper'),\n    functions = require('../object/functions'),\n    restParam = require('./restParam');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1;\n\n/**\n * Binds methods of an object to the object itself, overwriting the existing\n * method. Method names may be specified as individual arguments or as arrays\n * of method names. If no method names are provided all enumerable function\n * properties, own and inherited, of `object` are bound.\n *\n * **Note:** This method does not set the \"length\" property of bound functions.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Object} object The object to bind and assign the bound methods to.\n * @param {...(string|string[])} [methodNames] The object method names to bind,\n *  specified as individual method names or arrays of method names.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var view = {\n *   'label': 'docs',\n *   'onClick': function() {\n *     console.log('clicked ' + this.label);\n *   }\n * };\n *\n * _.bindAll(view);\n * jQuery('#docs').on('click', view.onClick);\n * // => logs 'clicked docs' when the element is clicked\n */\nvar bindAll = restParam(function(object, methodNames) {\n  methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);\n\n  var index = -1,\n      length = methodNames.length;\n\n  while (++index < length) {\n    var key = methodNames[index];\n    object[key] = createWrapper(object[key], BIND_FLAG, object);\n  }\n  return object;\n});\n\nmodule.exports = bindAll;\n"]}