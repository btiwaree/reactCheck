{"version":3,"sources":["bind.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,2BAAR,CAAhB;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,YAAY,QAAQ,aAAR,CAAZ;;;AAGJ,IAAI,YAAY,CAAZ;IACA,eAAe,EAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCJ,IAAI,OAAO,UAAU,UAAS,IAAT,EAAe,OAAf,EAAwB,QAAxB,EAAkC;AACrD,MAAI,UAAU,SAAV,CADiD;AAErD,MAAI,SAAS,MAAT,EAAiB;AACnB,QAAI,UAAU,eAAe,QAAf,EAAyB,KAAK,WAAL,CAAnC,CADe;AAEnB,eAAW,YAAX,CAFmB;GAArB;AAIA,SAAO,cAAc,IAAd,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,QAAtC,EAAgD,OAAhD,CAAP,CANqD;CAAlC,CAAjB;;;AAUJ,KAAK,WAAL,GAAmB,EAAnB;;AAEA,OAAO,OAAP,GAAiB,IAAjB","file":"bind-compiled.js","sourcesContent":["var createWrapper = require('../internal/createWrapper'),\n    replaceHolders = require('../internal/replaceHolders'),\n    restParam = require('./restParam');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of `thisArg`\n * and prepends any additional `_.bind` arguments to those provided to the\n * bound function.\n *\n * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n * may be used as a placeholder for partially applied arguments.\n *\n * **Note:** Unlike native `Function#bind` this method does not set the \"length\"\n * property of bound functions.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * var greet = function(greeting, punctuation) {\n *   return greeting + ' ' + this.user + punctuation;\n * };\n *\n * var object = { 'user': 'fred' };\n *\n * var bound = _.bind(greet, object, 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * // using placeholders\n * var bound = _.bind(greet, object, _, '!');\n * bound('hi');\n * // => 'hi fred!'\n */\nvar bind = restParam(function(func, thisArg, partials) {\n  var bitmask = BIND_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, bind.placeholder);\n    bitmask |= PARTIAL_FLAG;\n  }\n  return createWrapper(func, bitmask, thisArg, partials, holders);\n});\n\n// Assign default placeholders.\nbind.placeholder = {};\n\nmodule.exports = bind;\n"]}