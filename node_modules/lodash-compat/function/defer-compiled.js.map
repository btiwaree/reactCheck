{"version":3,"sources":["defer.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAZ;IACA,YAAY,QAAQ,aAAR,CAAZ;;;;;;;;;;;;;;;;;;;AAmBJ,IAAI,QAAQ,UAAU,UAAS,IAAT,EAAe,IAAf,EAAqB;AACzC,SAAO,UAAU,IAAV,EAAgB,CAAhB,EAAmB,IAAnB,CAAP,CADyC;CAArB,CAAlB;;AAIJ,OAAO,OAAP,GAAiB,KAAjB","file":"defer-compiled.js","sourcesContent":["var baseDelay = require('../internal/baseDelay'),\n    restParam = require('./restParam');\n\n/**\n * Defers invoking the `func` until the current call stack has cleared. Any\n * additional arguments are provided to `func` when it's invoked.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to defer.\n * @param {...*} [args] The arguments to invoke the function with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * _.defer(function(text) {\n *   console.log(text);\n * }, 'deferred');\n * // logs 'deferred' after one or more milliseconds\n */\nvar defer = restParam(function(func, args) {\n  return baseDelay(func, 1, args);\n});\n\nmodule.exports = defer;\n"]}