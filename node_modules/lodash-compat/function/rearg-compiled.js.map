{"version":3,"sources":["rearg.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,yBAAR,CAAd;IACA,gBAAgB,QAAQ,2BAAR,CAAhB;IACA,YAAY,QAAQ,aAAR,CAAZ;;;AAGJ,IAAI,aAAa,GAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BJ,IAAI,QAAQ,UAAU,UAAS,IAAT,EAAe,OAAf,EAAwB;AAC5C,SAAO,cAAc,IAAd,EAAoB,UAApB,EAAgC,SAAhC,EAA2C,SAA3C,EAAsD,SAAtD,EAAiE,YAAY,OAAZ,CAAjE,CAAP,CAD4C;CAAxB,CAAlB;;AAIJ,OAAO,OAAP,GAAiB,KAAjB","file":"rearg-compiled.js","sourcesContent":["var baseFlatten = require('../internal/baseFlatten'),\n    createWrapper = require('../internal/createWrapper'),\n    restParam = require('./restParam');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar REARG_FLAG = 256;\n\n/**\n * Creates a function that invokes `func` with arguments arranged according\n * to the specified indexes where the argument value at the first index is\n * provided as the first argument, the argument value at the second index is\n * provided as the second argument, and so on.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to rearrange arguments for.\n * @param {...(number|number[])} indexes The arranged argument indexes,\n *  specified as individual indexes or arrays of indexes.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var rearged = _.rearg(function(a, b, c) {\n *   return [a, b, c];\n * }, 2, 0, 1);\n *\n * rearged('b', 'c', 'a')\n * // => ['a', 'b', 'c']\n *\n * var map = _.rearg(_.map, [1, 0]);\n * map(function(n) {\n *   return n * 3;\n * }, [1, 2, 3]);\n * // => [3, 6, 9]\n */\nvar rearg = restParam(function(func, indexes) {\n  return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));\n});\n\nmodule.exports = rearg;\n"]}