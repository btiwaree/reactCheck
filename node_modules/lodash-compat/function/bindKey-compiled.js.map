{"version":3,"sources":["bindKey.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,2BAAR,CAAhB;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,YAAY,QAAQ,aAAR,CAAZ;;;AAGJ,IAAI,YAAY,CAAZ;IACA,gBAAgB,CAAhB;IACA,eAAe,EAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CJ,IAAI,UAAU,UAAU,UAAS,MAAT,EAAiB,GAAjB,EAAsB,QAAtB,EAAgC;AACtD,MAAI,UAAU,YAAY,aAAZ,CADwC;AAEtD,MAAI,SAAS,MAAT,EAAiB;AACnB,QAAI,UAAU,eAAe,QAAf,EAAyB,QAAQ,WAAR,CAAnC,CADe;AAEnB,eAAW,YAAX,CAFmB;GAArB;AAIA,SAAO,cAAc,GAAd,EAAmB,OAAnB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,OAA9C,CAAP,CANsD;CAAhC,CAApB;;;AAUJ,QAAQ,WAAR,GAAsB,EAAtB;;AAEA,OAAO,OAAP,GAAiB,OAAjB","file":"bindKey-compiled.js","sourcesContent":["var createWrapper = require('../internal/createWrapper'),\n    replaceHolders = require('../internal/replaceHolders'),\n    restParam = require('./restParam');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes the method at `object[key]` and prepends\n * any additional `_.bindKey` arguments to those provided to the bound function.\n *\n * This method differs from `_.bind` by allowing bound functions to reference\n * methods that may be redefined or don't yet exist.\n * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n * for more details.\n *\n * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Object} object The object the method belongs to.\n * @param {string} key The key of the method.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * var object = {\n *   'user': 'fred',\n *   'greet': function(greeting, punctuation) {\n *     return greeting + ' ' + this.user + punctuation;\n *   }\n * };\n *\n * var bound = _.bindKey(object, 'greet', 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * object.greet = function(greeting, punctuation) {\n *   return greeting + 'ya ' + this.user + punctuation;\n * };\n *\n * bound('!');\n * // => 'hiya fred!'\n *\n * // using placeholders\n * var bound = _.bindKey(object, 'greet', _, '!');\n * bound('hi');\n * // => 'hiya fred!'\n */\nvar bindKey = restParam(function(object, key, partials) {\n  var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, bindKey.placeholder);\n    bitmask |= PARTIAL_FLAG;\n  }\n  return createWrapper(key, bitmask, object, partials, holders);\n});\n\n// Assign default placeholders.\nbindKey.placeholder = {};\n\nmodule.exports = bindKey;\n"]}