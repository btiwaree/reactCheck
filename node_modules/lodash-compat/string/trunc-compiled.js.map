{"version":3,"sources":["trunc.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAf;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,WAAW,QAAQ,kBAAR,CAAX;IACA,WAAW,QAAQ,kBAAR,CAAX;;;AAGJ,IAAI,uBAAuB,EAAvB;IACA,yBAAyB,KAAzB;;;AAGJ,IAAI,UAAU,MAAV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CJ,SAAS,KAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC,KAAhC,EAAuC;AACrC,MAAI,SAAS,eAAe,MAAf,EAAuB,OAAvB,EAAgC,KAAhC,CAAT,EAAiD;AACnD,cAAU,SAAV,CADmD;GAArD;AAGA,MAAI,SAAS,oBAAT;MACA,WAAW,sBAAX,CALiC;;AAOrC,MAAI,WAAW,IAAX,EAAiB;AACnB,QAAI,SAAS,OAAT,CAAJ,EAAuB;AACrB,UAAI,YAAY,eAAe,OAAf,GAAyB,QAAQ,SAAR,GAAoB,SAA7C,CADK;AAErB,eAAS,YAAY,OAAZ,GAAuB,CAAC,QAAQ,MAAR,IAAkB,CAAnB,GAAwB,MAA/C,CAFY;AAGrB,iBAAW,cAAc,OAAd,GAAwB,aAAa,QAAQ,QAAR,CAArC,GAAyD,QAAzD,CAHU;KAAvB,MAIO;AACL,eAAS,CAAC,OAAD,IAAY,CAAZ,CADJ;KAJP;GADF;AASA,WAAS,aAAa,MAAb,CAAT,CAhBqC;AAiBrC,MAAI,UAAU,OAAO,MAAP,EAAe;AAC3B,WAAO,MAAP,CAD2B;GAA7B;AAGA,MAAI,MAAM,SAAS,SAAS,MAAT,CApBkB;AAqBrC,MAAI,MAAM,CAAN,EAAS;AACX,WAAO,QAAP,CADW;GAAb;AAGA,MAAI,SAAS,OAAO,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAT,CAxBiC;AAyBrC,MAAI,aAAa,IAAb,EAAmB;AACrB,WAAO,SAAS,QAAT,CADc;GAAvB;AAGA,MAAI,SAAS,SAAT,CAAJ,EAAyB;AACvB,QAAI,OAAO,KAAP,CAAa,GAAb,EAAkB,MAAlB,CAAyB,SAAzB,CAAJ,EAAyC;AACvC,UAAI,KAAJ;UACI,MADJ;UAEI,YAAY,OAAO,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAZ,CAHmC;;AAKvC,UAAI,CAAC,UAAU,MAAV,EAAkB;AACrB,oBAAY,OAAO,UAAU,MAAV,EAAkB,CAAC,QAAQ,IAAR,CAAa,SAAb,KAA2B,EAA3B,CAAD,GAAkC,GAAlC,CAArC,CADqB;OAAvB;AAGA,gBAAU,SAAV,GAAsB,CAAtB,CARuC;AASvC,aAAQ,QAAQ,UAAU,IAAV,CAAe,SAAf,CAAR,EAAoC;AAC1C,iBAAS,MAAM,KAAN,CADiC;OAA5C;AAGA,eAAS,OAAO,KAAP,CAAa,CAAb,EAAgB,UAAU,IAAV,GAAiB,GAAjB,GAAuB,MAAvB,CAAzB,CAZuC;KAAzC;GADF,MAeO,IAAI,OAAO,OAAP,CAAe,SAAf,EAA0B,GAA1B,KAAkC,GAAlC,EAAuC;AAChD,QAAI,QAAQ,OAAO,WAAP,CAAmB,SAAnB,CAAR,CAD4C;AAEhD,QAAI,QAAQ,CAAC,CAAD,EAAI;AACd,eAAS,OAAO,KAAP,CAAa,CAAb,EAAgB,KAAhB,CAAT,CADc;KAAhB;GAFK;AAMP,SAAO,SAAS,QAAT,CAjD8B;CAAvC;;AAoDA,OAAO,OAAP,GAAiB,KAAjB","file":"trunc-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    isObject = require('../lang/isObject'),\n    isRegExp = require('../lang/isRegExp');\n\n/** Used as default options for `_.trunc`. */\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object|number} [options] The options object or maximum string length.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.trunc('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.trunc('hi-diddly-ho there, neighborino', 24);\n * // => 'hi-diddly-ho there, n...'\n *\n * _.trunc('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.trunc('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.trunc('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\nfunction trunc(string, options, guard) {\n  if (guard && isIterateeCall(string, options, guard)) {\n    options = undefined;\n  }\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (options != null) {\n    if (isObject(options)) {\n      var separator = 'separator' in options ? options.separator : separator;\n      length = 'length' in options ? (+options.length || 0) : length;\n      omission = 'omission' in options ? baseToString(options.omission) : omission;\n    } else {\n      length = +options || 0;\n    }\n  }\n  string = baseToString(string);\n  if (length >= string.length) {\n    return string;\n  }\n  var end = length - omission.length;\n  if (end < 1) {\n    return omission;\n  }\n  var result = string.slice(0, end);\n  if (separator == null) {\n    return result + omission;\n  }\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          newEnd,\n          substring = string.slice(0, end);\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');\n      }\n      separator.lastIndex = 0;\n      while ((match = separator.exec(substring))) {\n        newEnd = match.index;\n      }\n      result = result.slice(0, newEnd == null ? end : newEnd);\n    }\n  } else if (string.indexOf(separator, end) != end) {\n    var index = result.lastIndexOf(separator);\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n  return result + omission;\n}\n\nmodule.exports = trunc;\n"]}