{"version":3,"sources":["trim.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAf;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,kBAAkB,QAAQ,6BAAR,CAAlB;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,mBAAmB,QAAQ,8BAAR,CAAnB;IACA,oBAAoB,QAAQ,+BAAR,CAApB;;;;;;;;;;;;;;;;;;;;;;;AAuBJ,SAAS,IAAT,CAAc,MAAd,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC;AAClC,MAAI,QAAQ,MAAR,CAD8B;AAElC,WAAS,aAAa,MAAb,CAAT,CAFkC;AAGlC,MAAI,CAAC,MAAD,EAAS;AACX,WAAO,MAAP,CADW;GAAb;AAGA,MAAI,QAAQ,eAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,CAAR,GAA8C,SAAS,IAAT,EAAe;AAC/D,WAAO,OAAO,KAAP,CAAa,iBAAiB,MAAjB,CAAb,EAAuC,kBAAkB,MAAlB,IAA4B,CAA5B,CAA9C,CAD+D;GAAjE;AAGA,UAAS,QAAQ,EAAR,CATyB;AAUlC,SAAO,OAAO,KAAP,CAAa,eAAe,MAAf,EAAuB,KAAvB,CAAb,EAA4C,gBAAgB,MAAhB,EAAwB,KAAxB,IAAiC,CAAjC,CAAnD,CAVkC;CAApC;;AAaA,OAAO,OAAP,GAAiB,IAAjB","file":"trim-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    charsLeftIndex = require('../internal/charsLeftIndex'),\n    charsRightIndex = require('../internal/charsRightIndex'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    trimmedLeftIndex = require('../internal/trimmedLeftIndex'),\n    trimmedRightIndex = require('../internal/trimmedRightIndex');\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  var value = string;\n  string = baseToString(string);\n  if (!string) {\n    return string;\n  }\n  if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n    return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);\n  }\n  chars = (chars + '');\n  return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);\n}\n\nmodule.exports = trim;\n"]}