{"version":3,"sources":["repeat.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAf;;;AAGJ,IAAI,cAAc,KAAK,KAAL;IACd,iBAAiB,OAAO,QAAP;;;;;;;;;;;;;;;;;;;;;;AAsBrB,SAAS,MAAT,CAAgB,MAAhB,EAAwB,CAAxB,EAA2B;AACzB,MAAI,SAAS,EAAT,CADqB;AAEzB,WAAS,aAAa,MAAb,CAAT,CAFyB;AAGzB,MAAI,CAAC,CAAD,CAHqB;AAIzB,MAAI,IAAI,CAAJ,IAAS,CAAC,MAAD,IAAW,CAAC,eAAe,CAAf,CAAD,EAAoB;AAC1C,WAAO,MAAP,CAD0C;GAA5C;;;AAJyB,KAStB;AACD,QAAI,IAAI,CAAJ,EAAO;AACT,gBAAU,MAAV,CADS;KAAX;AAGA,QAAI,YAAY,IAAI,CAAJ,CAAhB,CAJC;AAKD,cAAU,MAAV,CALC;GAAH,QAMS,CANT,EATyB;;AAiBzB,SAAO,MAAP,CAjByB;CAA3B;;AAoBA,OAAO,OAAP,GAAiB,MAAjB","file":"repeat-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeIsFinite = global.isFinite;\n\n/**\n * Repeats the given string `n` times.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to repeat.\n * @param {number} [n=0] The number of times to repeat the string.\n * @returns {string} Returns the repeated string.\n * @example\n *\n * _.repeat('*', 3);\n * // => '***'\n *\n * _.repeat('abc', 2);\n * // => 'abcabc'\n *\n * _.repeat('abc', 0);\n * // => ''\n */\nfunction repeat(string, n) {\n  var result = '';\n  string = baseToString(string);\n  n = +n;\n  if (n < 1 || !string || !nativeIsFinite(n)) {\n    return result;\n  }\n  // Leverage the exponentiation by squaring algorithm for a faster repeat.\n  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = nativeFloor(n / 2);\n    string += string;\n  } while (n);\n\n  return result;\n}\n\nmodule.exports = repeat;\n"]}