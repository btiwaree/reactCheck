{"version":3,"sources":["trimLeft.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAf;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,iBAAiB,QAAQ,4BAAR,CAAjB;IACA,mBAAmB,QAAQ,8BAAR,CAAnB;;;;;;;;;;;;;;;;;;;;AAoBJ,SAAS,QAAT,CAAkB,MAAlB,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC;AACtC,MAAI,QAAQ,MAAR,CADkC;AAEtC,WAAS,aAAa,MAAb,CAAT,CAFsC;AAGtC,MAAI,CAAC,MAAD,EAAS;AACX,WAAO,MAAP,CADW;GAAb;AAGA,MAAI,QAAQ,eAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,CAAR,GAA8C,SAAS,IAAT,EAAe;AAC/D,WAAO,OAAO,KAAP,CAAa,iBAAiB,MAAjB,CAAb,CAAP,CAD+D;GAAjE;AAGA,SAAO,OAAO,KAAP,CAAa,eAAe,MAAf,EAAwB,QAAQ,EAAR,CAArC,CAAP,CATsC;CAAxC;;AAYA,OAAO,OAAP,GAAiB,QAAjB","file":"trimLeft-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    charsLeftIndex = require('../internal/charsLeftIndex'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    trimmedLeftIndex = require('../internal/trimmedLeftIndex');\n\n/**\n * Removes leading whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimLeft('  abc  ');\n * // => 'abc  '\n *\n * _.trimLeft('-_-abc-_-', '_-');\n * // => 'abc-_-'\n */\nfunction trimLeft(string, chars, guard) {\n  var value = string;\n  string = baseToString(string);\n  if (!string) {\n    return string;\n  }\n  if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n    return string.slice(trimmedLeftIndex(string));\n  }\n  return string.slice(charsLeftIndex(string, (chars + '')));\n}\n\nmodule.exports = trimLeft;\n"]}