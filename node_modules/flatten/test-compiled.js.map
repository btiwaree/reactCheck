{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,SAAR,CAAV;IACA,OAAO,QAAQ,MAAR,CAAP;IACA,SAAS,QAAQ,QAAR,CAAT;;AAEJ,CACE,CAAE,CAAC,CAAD,EAAI,CAAE,CAAF,EAAK,CAAL,CAAJ,CAAF,EAAgB,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAJ,CAAJ,CAAhB,EAA6B,CAA7B,CADF,EAEE,CAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAF,EAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd,CAFF,EAGE,CAAE,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,CAAN,CAAN,CAAF,EAAuB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAvB,CAHF,EAIE,CAAE,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAJ,CAAJ,EAAY,CAAZ,EAAe,CAAC,CAAC,EAAD,CAAD,CAAf,CAAF,EAA0B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,CAA1B,CAJF,EAKE,CAAE,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAC,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAF,EAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAD,EAAI,CAAC,CAAD,CAAJ,CAAV,CAA3B,EAAgD,CAAhD;AALF,EAME,OANF,CAMU,UAAU,CAAV,EAAa;AACrB,SAAO,SAAP,CAAiB,QAAQ,EAAE,CAAF,CAAR,EAAc,EAAE,CAAF,CAAd,CAAjB,EAAsC,EAAE,CAAF,CAAtC,EACE,KAAK,MAAL,CAAY,wBAAZ,EAAsC,WAAW,CAAX,CAAtC,CADF,EADqB;AAIrB,UAAQ,GAAR,CAAY,MAAZ,EAAoB,WAAW,CAAX,CAApB,EAJqB;CAAb,CANV;;AAaA,SAAS,UAAT,CAAoB,CAApB,EAAuB;AACrB,MAAI,OAAO,EAAE,CAAF,CAAP,KAAgB,WAAhB,EAA6B;AAC/B,WAAO,KAAK,MAAL,CAAY,qBAAZ,EAAmC,EAAE,CAAF,CAAnC,EAAyC,EAAE,CAAF,CAAzC,CAAP,CAD+B;GAAjC,MAGK;AACH,WAAO,KAAK,MAAL,CAAY,yBAAZ,EAAuC,EAAE,CAAF,CAAvC,EAA6C,EAAE,CAAF,CAA7C,EAAmD,EAAE,CAAF,CAAnD,CAAP,CADG;GAHL;CADF","file":"test-compiled.js","sourcesContent":["var flatten = require('./index'),\n    util = require('util'),\n    assert = require('assert');\n\n[\n  [ [1, [ 2, 3]], [1, [2, 3]], 0],\n  [ [1, 2, 3 ], [1, 2, 3] ],\n  [ ['a', ['b', ['c']]], ['a', 'b', 'c'] ],\n  [ [2, [4, 6], 8, [[10]]], [2, 4, 6, 8, 10] ],\n  [ [1, [2, [3, [4, [5]]]]], [1, 2, 3, [4, [5]]], 2 ] // depth of 2\n].forEach(function (t) {\n  assert.deepEqual(flatten(t[0], t[2]), t[1], \n    util.format('☠☠☠☠☠☠☠☠☠ %s ☠☠☠☠☠☠☠☠☠', formatCall(t))\n  );\n  console.log('✓ %s', formatCall(t));\n});\n\nfunction formatCall(t) {\n  if (typeof t[2] === 'undefined') {\n    return util.format('`flatten(%j) == %j`', t[0], t[1]);\n  }\n  else {\n    return util.format('`flatten(%j, %j) == %j`', t[0], t[2], t[1]);\n  }\n}\n"]}