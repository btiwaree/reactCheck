{"version":3,"sources":["keycode.js"],"names":[],"mappings":"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","file":"keycode-compiled.js","sourcesContent":["\"use strict\"\n\n// check if is component\nif (require.modules) {\n  var keycode = require('keycode')\n  var assert = require('timoxley-assert')\n} else {\n  var keycode = require('../')\n  var assert = require('assert')\n}\n\nit('can return a charcode from a letter', function() {\n  assert.strictEqual(keycode('0'), 48);\n  assert.strictEqual(keycode('B'), 66);\n  assert.strictEqual(keycode('f1'), 112);\n  assert.strictEqual(keycode('9'), 57);\n  assert.strictEqual(keycode('numpad 0'), 96);\n})\n\n\nit('can use aliases from a letter', function() {\n  assert.strictEqual(keycode('ctl'), keycode('ctrl'));\n})\n\nit('does not use alias name when mapping back from a number', function() {\n  for (var key in keycode.aliases) {\n    assert.notStrictEqual(keycode(keycode(key)), key);\n  }\n})\n\nit('is case insensitive', function() {\n  assert.strictEqual(keycode('a'), 65);\n  assert.strictEqual(keycode('A'), 65);\n  assert.strictEqual(keycode('enter'), 13);\n  assert.strictEqual(keycode('ENTER'), 13);\n  assert.strictEqual(keycode('enTeR'), 13);\n})\n\nit('returns char code for strange chars', function() {\n  // TODO: not sure if this is sensible behaviour\n  assert.strictEqual(keycode('∆'), 8710);\n  assert.strictEqual(keycode('漢'), 28450);\n})\n\nit('returns undefined for unknown strings', function() {\n  assert.strictEqual(keycode('ants'), undefined);\n  assert.strictEqual(keycode('Bagels'), undefined);\n  assert.strictEqual(keycode(''), undefined);\n  assert.strictEqual(keycode('JKHG KJG LSDF'), undefined);\n})\n\nit('returns undefined for unknown numbers', function() {\n  assert.strictEqual(keycode(-1), undefined);\n  assert.strictEqual(keycode(Infinity), undefined);\n  assert.strictEqual(keycode(0.3), undefined);\n  assert.strictEqual(keycode(9999999), undefined);\n})\n\nit('returns code for objects implementing toString function', function() {\n  var obj = {}\n  obj.toString = function() {\n    return 'a'\n  }\n  assert.strictEqual(keycode(obj), 65);\n})\n\nit('returns char for objects with a keyCode property', function() {\n  var obj = { keyCode: 65 }\n  assert.strictEqual(keycode(obj), 'a');\n})\n\nit('returns undefined for any other passed in type', function() {\n  assert.strictEqual(keycode({}), undefined);\n  assert.strictEqual(keycode([]), undefined);\n  assert.strictEqual(keycode([1,2]), undefined);\n  assert.strictEqual(keycode(null), undefined);\n  assert.strictEqual(keycode(undefined), undefined);\n  assert.strictEqual(keycode(/.*/), undefined);\n  assert.strictEqual(keycode(), undefined);\n})\n\nit('is commutative', function() {\n  for (var key in keycode.code) {\n    assert.strictEqual(keycode(key), keycode(keycode(keycode(key))))\n  }\n})\n\nit('exposes keycode/name maps', function() {\n  for (var code in keycode.codes) {\n    assert.strictEqual(keycode(code), keycode(keycode.names[keycode.codes[code]]))\n  }\n})\n\nit('should return shift, ctrl, and alt for 16, 17, and 18', function() {\n  assert.strictEqual(keycode(16), 'shift')\n  assert.strictEqual(keycode(17), 'ctrl')\n  assert.strictEqual(keycode(18), 'alt')\n})\n"]}