{"version":3,"sources":["convertColors.js"],"names":[],"mappings":"AAAA;;AAEA,QAAQ,IAAR,GAAe,SAAf;;AAEA,QAAQ,MAAR,GAAiB,IAAjB;;AAEA,QAAQ,WAAR,GAAsB,uDAAtB;;AAEA,QAAQ,MAAR,GAAiB;AACb,kBAAc,KAAd;AACA,eAAW,IAAX;AACA,aAAS,IAAT;AACA,cAAU,IAAV;AACA,eAAW,IAAX;CALJ;;AAQA,IAAI,cAAc,QAAQ,gBAAR,CAAd;IACA,UAAU,mCAAV;IACA,SAAS,WAAT;IACA,SAAS,IAAI,MAAJ,CAAW,gBAAgB,OAAhB,GAA0B,MAA1B,GAAmC,OAAnC,GAA6C,MAA7C,GAAsD,OAAtD,GAAgE,UAAhE,CAApB;IACA,SAAS,0BAAT;IACA,OAAO,WAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BJ,QAAQ,EAAR,GAAa,UAAS,IAAT,EAAe,MAAf,EAAuB;;AAEhC,QAAI,KAAK,IAAL,EAAW;;AAEX,aAAK,QAAL,CAAc,UAAS,IAAT,EAAe;;AAEzB,gBAAI,YAAY,WAAZ,CAAwB,OAAxB,CAAgC,KAAK,IAAL,CAAhC,GAA6C,CAAC,CAAD,EAAI;;AAEjD,oBAAI,MAAM,KAAK,KAAL;oBACN,KADJ;;;AAFiD,oBAM7C,OAAO,YAAP,KAAwB,QAAQ,CAAC,IAAI,KAAJ,CAAU,IAAV,CAAD,CAAhC,EAAmD;AACnD,0BAAM,cAAN,CADmD;iBAAvD;;;AANiD,oBAW7C,OAAO,SAAP,IAAoB,IAAI,WAAJ,MAAqB,YAAY,WAAZ,EAAyB;AAClE,0BAAM,YAAY,WAAZ,CAAwB,IAAI,WAAJ,EAAxB,CAAN,CADkE;iBAAtE;;;AAXiD,oBAgB7C,OAAO,OAAP,KAAmB,QAAQ,IAAI,KAAJ,CAAU,MAAV,CAAR,CAAnB,EAA+C;AAC/C,4BAAQ,MAAM,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkB,GAAlB,CAAsB,UAAS,CAAT,EAAY;AACtC,4BAAI,EAAE,OAAF,CAAU,GAAV,IAAiB,CAAC,CAAD,EACjB,IAAI,KAAK,KAAL,CAAW,WAAW,CAAX,IAAgB,IAAhB,CAAf,CADJ;;AAGA,+BAAO,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,CAAS,CAAT,EAAY,GAAZ,CAAZ,CAAP,CAJsC;qBAAZ,CAA9B,CAD+C;;AAQ/C,0BAAM,QAAQ,KAAR,CAAN,CAR+C;iBAAnD;;;AAhBiD,oBA4B7C,OAAO,QAAP,KAAoB,QAAQ,IAAI,KAAJ,CAAU,MAAV,CAAR,CAApB,EAAgD;AAChD,0BAAM,MAAM,MAAM,CAAN,EAAS,CAAT,CAAN,GAAoB,MAAM,CAAN,EAAS,CAAT,CAApB,GAAkC,MAAM,CAAN,EAAS,CAAT,CAAlC,CAD0C;iBAApD;;;AA5BiD,oBAiC7C,OAAO,SAAP,IAAoB,OAAO,YAAY,gBAAZ,EAA8B;AACzD,0BAAM,YAAY,gBAAZ,CAA6B,GAA7B,CAAN,CADyD;iBAA7D;;AAIA,qBAAK,KAAL,GAAa,GAAb,CArCiD;aAArD;SAFU,CAAd,CAFW;KAAf;CAFS;;;;;;;;;;;;;;;AAkEb,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAClB,WAAO,MAAM,CAAC,UAAU,CAAC,IAAI,CAAJ,KAAU,EAAV,GAAe,IAAI,CAAJ,KAAU,CAAV,GAAc,IAAI,CAAJ,CAA7B,CAAD,CAAsC,QAAtC,CAA+C,EAA/C,CAAV,CAAD,CAA+D,KAA/D,CAAqE,CAAC,CAAD,CAArE,CAAyE,WAAzE,EAAN,CADW;CAAtB","file":"convertColors-compiled.js","sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\n\nexports.params = {\n    currentColor: false,\n    names2hex: true,\n    rgb2hex: true,\n    shorthex: true,\n    shortname: true\n};\n\nvar collections = require('./_collections'),\n    rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)',\n    rComma = '\\\\s*,\\\\s*',\n    regRGB = new RegExp('^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'),\n    regHEX = /^\\#(([a-fA-F0-9])\\2){3}$/,\n    none = /\\bnone\\b/i;\n\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see http://www.w3.org/TR/SVG/types.html#DataTypeColor\n * @see http://www.w3.org/TR/SVG/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (item.elem) {\n\n        item.eachAttr(function(attr) {\n\n            if (collections.colorsProps.indexOf(attr.name) > -1) {\n\n                var val = attr.value,\n                    match;\n\n                // Convert colors to currentColor\n                if (params.currentColor && (match = !val.match(none))) {\n                    val = 'currentColor';\n                }\n\n                // Convert color name keyword to long hex\n                if (params.names2hex && val.toLowerCase() in collections.colorsNames) {\n                    val = collections.colorsNames[val.toLowerCase()];\n                }\n\n                // Convert rgb() to long hex\n                if (params.rgb2hex && (match = val.match(regRGB))) {\n                    match = match.slice(1, 4).map(function(m) {\n                        if (m.indexOf('%') > -1)\n                            m = Math.round(parseFloat(m) * 2.55);\n\n                        return Math.max(0, Math.min(m, 255));\n                    });\n\n                    val = rgb2hex(match);\n                }\n\n                // Convert long hex to short hex\n                if (params.shorthex && (match = val.match(regHEX))) {\n                    val = '#' + match[0][1] + match[0][3] + match[0][5];\n                }\n\n                // Convert hex to short name\n                if (params.shortname && val in collections.colorsShortNames) {\n                    val = collections.colorsShortNames[val];\n                }\n\n                attr.value = val;\n\n            }\n\n        });\n\n    }\n\n};\n\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @param {Array} rgb [r, g, b]\n * @return {String} #rrggbb\n *\n * @author Jed Schmidt\n */\nfunction rgb2hex(rgb) {\n    return '#' + ('00000' + (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16)).slice(-6).toUpperCase();\n}\n"]}