{"version":3,"sources":["removeUnusedNS.js"],"names":[],"mappings":"AAAA;;AAEA,QAAQ,IAAR,GAAe,MAAf;;AAEA,QAAQ,MAAR,GAAiB,IAAjB;;AAEA,QAAQ,WAAR,GAAsB,uCAAtB;;;;;;;;;;AAUA,QAAQ,EAAR,GAAa,UAAS,IAAT,EAAe;;AAExB,QAAI,OAAJ;QACI,kBAAkB,EAAlB;;;;;;;AAHoB,aAUf,sBAAT,CAAgC,EAAhC,EAAoC;;AAEhC,YAAI,MAAM,gBAAgB,OAAhB,CAAwB,EAAxB,CAAN;;;AAF4B,YAK5B,MAAM,CAAC,CAAD,EAAI;AACV,4BAAgB,MAAhB,CAAuB,GAAvB,EAA4B,CAA5B,EADU;SAAd;KALJ;;;;;;;;;AAVwB,aA4Bf,OAAT,CAAiB,KAAjB,EAAwB;;AAEpB,YAAI,IAAI,CAAJ;YACA,SAAS,MAAM,OAAN,CAAc,MAAd,CAHO;;AAKpB,eAAM,IAAI,MAAJ,EAAY;;AAEd,gBAAI,OAAO,MAAM,OAAN,CAAc,CAAd,CAAP,CAFU;;AAId,gBAAI,KAAK,MAAL,CAAY,KAAZ,CAAJ,EAAwB;;AAEpB,qBAAK,QAAL,CAAc,UAAS,IAAT,EAAe;;AAEzB,wBAAI,KAAK,MAAL,KAAgB,OAAhB,IAA2B,KAAK,KAAL,EAAY;AACvC,wCAAgB,IAAhB,CAAqB,KAAK,KAAL,CAArB,CADuC;qBAA3C;iBAFU,CAAd;;;AAFoB,oBAUhB,gBAAgB,MAAhB,EAAwB;;AAExB,8BAAU,IAAV,CAFwB;iBAA5B;aAVJ,MAeO,IAAI,gBAAgB,MAAhB,EAAwB;;;AAG/B,oBAAI,KAAK,MAAL,EAAa;AACb,2CAAuB,KAAK,MAAL,CAAvB,CADa;iBAAjB;;;AAH+B,oBAQ/B,CAAK,QAAL,CAAc,UAAS,IAAT,EAAe;AACzB,2CAAuB,KAAK,MAAL,CAAvB,CADyB;iBAAf,CAAd,CAR+B;aAA5B;;;AAnBO,gBAkCV,gBAAgB,MAAhB,IAA0B,KAAK,OAAL,EAAc;AACxC,wBAAQ,IAAR,EADwC;aAA5C;;AAIA,gBAtCc;SAAlB;;AA0CA,eAAO,KAAP,CA/CoB;KAAxB;;AAmDA,WAAO,QAAQ,IAAR,CAAP;;;AA/EwB,QAkFpB,gBAAgB,MAAhB,EAAwB;AACxB,wBAAgB,OAAhB,CAAwB,UAAS,IAAT,EAAe;AACnC,oBAAQ,UAAR,CAAmB,WAAW,IAAX,CAAnB,CADmC;SAAf,CAAxB,CADwB;KAA5B;;AAMA,WAAO,IAAP,CAxFwB;CAAf","file":"removeUnusedNS-compiled.js","sourcesContent":["'use strict';\n\nexports.type = 'full';\n\nexports.active = true;\n\nexports.description = 'removes unused namespaces declaration';\n\n/**\n * Remove unused namespaces declaration.\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(data) {\n\n    var svgElem,\n        xmlnsCollection = [];\n\n    /**\n     * Remove namespace from collection.\n     *\n     * @param {String} ns namescape name\n     */\n    function removeNSfromCollection(ns) {\n\n        var pos = xmlnsCollection.indexOf(ns);\n\n        // if found - remove ns from the namespaces collection\n        if (pos > -1) {\n            xmlnsCollection.splice(pos, 1);\n        }\n\n    }\n\n    /**\n     * Bananas!\n     *\n     * @param {Array} items input items\n     *\n     * @return {Array} output items\n     */\n    function monkeys(items) {\n\n        var i = 0,\n            length = items.content.length;\n\n        while(i < length) {\n\n            var item = items.content[i];\n\n            if (item.isElem('svg')) {\n\n                item.eachAttr(function(attr) {\n                    // collect namespaces\n                    if (attr.prefix === 'xmlns' && attr.local) {\n                        xmlnsCollection.push(attr.local);\n                    }\n                });\n\n                // if svg element has ns-attr\n                if (xmlnsCollection.length) {\n                    // save svg element\n                    svgElem = item;\n                }\n\n            } else if (xmlnsCollection.length) {\n\n                // check item for the ns-attrs\n                if (item.prefix) {\n                    removeNSfromCollection(item.prefix);\n                }\n\n                // check each attr for the ns-attrs\n                item.eachAttr(function(attr) {\n                    removeNSfromCollection(attr.prefix);\n                });\n\n            }\n\n            // if nothing is found - go deeper\n            if (xmlnsCollection.length && item.content) {\n                monkeys(item);\n            }\n\n            i++;\n\n        }\n\n        return items;\n\n    }\n\n    data = monkeys(data);\n\n    // remove svg element ns-attributes if they are not used even once\n    if (xmlnsCollection.length) {\n        xmlnsCollection.forEach(function(name) {\n            svgElem.removeAttr('xmlns:' + name);\n        });\n    }\n\n    return data;\n\n};\n"]}