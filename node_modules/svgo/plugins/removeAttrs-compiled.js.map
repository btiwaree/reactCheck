{"version":3,"sources":["removeAttrs.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,GAAX;;AAEJ,QAAQ,IAAR,GAAe,SAAf;;AAEA,QAAQ,MAAR,GAAiB,KAAjB;;AAEA,QAAQ,WAAR,GAAsB,8BAAtB;;AAEA,QAAQ,MAAR,GAAiB;AACb,WAAO,EAAP;CADJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,QAAQ,EAAR,GAAa,UAAS,IAAT,EAAe,MAAf,EAAuB;;;AAGhC,QAAI,CAAC,MAAM,OAAN,CAAc,OAAO,KAAP,CAAf,EAA8B;AAC9B,eAAO,KAAP,GAAe,CAAC,OAAO,KAAP,CAAhB,CAD8B;KAAlC;;AAIA,QAAI,KAAK,MAAL,EAAJ,EAAmB;;;AAGf,YAAI,WAAW,OAAO,KAAP,CAAa,GAAb,CAAiB,UAAS,OAAT,EAAkB;;;AAG9C,gBAAI,QAAQ,OAAR,CAAgB,QAAhB,MAA8B,CAAC,CAAD,EAAI;AAClC,0BAAU,CAAC,IAAD,EAAO,QAAP,EAAiB,OAAjB,EAA0B,IAA1B,CAA+B,EAA/B,CAAV,CADkC;aAAtC;;;AAH8C,mBAQvC,QAAQ,KAAR,CAAc,QAAd,EACF,GADE,CACE,UAAS,KAAT,EAAgB;;;AAGjB,oBAAI,UAAU,GAAV,EAAe;AAAE,4BAAQ,IAAR,CAAF;iBAAnB;;AAEA,uBAAO,IAAI,MAAJ,CAAW,CAAC,GAAD,EAAM,KAAN,EAAa,GAAb,EAAkB,IAAlB,CAAuB,EAAvB,CAAX,EAAuC,GAAvC,CAAP,CALiB;aAAhB,CADT,CAR8C;SAAlB,CAA5B;;;AAHW,gBAuBf,CAAS,OAAT,CAAiB,UAAS,OAAT,EAAkB;;;AAG/B,gBAAI,QAAQ,CAAR,EAAW,IAAX,CAAgB,KAAK,IAAL,CAApB,EAAgC;;;AAG5B,qBAAK,QAAL,CAAc,UAAS,IAAT,EAAe;AACzB,wBAAI,OAAO,KAAK,IAAL;;;AADc,wBAIrB,QAAQ,CAAR,EAAW,IAAX,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,6BAAK,UAAL,CAAgB,IAAhB,EADuB;qBAA3B;iBAJU,CAAd,CAH4B;aAAhC;SAHa,CAAjB,CAvBe;KAAnB;CAPS","file":"removeAttrs-compiled.js","sourcesContent":["'use strict';\n\nvar ELEM_SEP = ':';\n\nexports.type = 'perItem';\n\nexports.active = false;\n\nexports.description = 'removes specified attributes';\n\nexports.params = {\n    attrs: []\n};\n\n/**\n * Remove attributes\n *\n * @param attrs:\n *\n *   format: [ element* : attribute* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements\n *   attribute : regexp (wrapped into ^...$)\n *\n *   examples:\n *\n *     > basic: remove fill attribute\n *     ---\n *     removeAttrs:\n *       attrs: 'fill'\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Benny Schudel\n */\nexports.fn = function(item, params) {\n\n        // wrap into an array if params is not\n    if (!Array.isArray(params.attrs)) {\n        params.attrs = [params.attrs];\n    }\n\n    if (item.isElem()) {\n\n            // prepare patterns\n        var patterns = params.attrs.map(function(pattern) {\n\n                // apply to all elements if specifc element is omitted\n            if (pattern.indexOf(ELEM_SEP) === -1) {\n                pattern = ['.*', ELEM_SEP, pattern].join('');\n            }\n\n                // create regexps for element and attribute name\n            return pattern.split(ELEM_SEP)\n                .map(function(value) {\n\n                        // adjust single * to match anything\n                    if (value === '*') { value = '.*'; }\n\n                    return new RegExp(['^', value, '$'].join(''), 'i');\n                });\n\n        });\n\n            // loop patterns\n        patterns.forEach(function(pattern) {\n\n                // matches element\n            if (pattern[0].test(item.elem)) {\n\n                    // loop attributes\n                item.eachAttr(function(attr) {\n                    var name = attr.name;\n\n                        // matches attribute name\n                    if (pattern[1].test(name)) {\n                        item.removeAttr(name);\n                    }\n\n                });\n\n            }\n\n        });\n\n    }\n\n};\n"]}