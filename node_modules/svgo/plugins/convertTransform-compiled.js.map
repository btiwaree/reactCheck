{"version":3,"sources":["convertTransform.js"],"names":[],"mappings":"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","file":"convertTransform-compiled.js","sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'collapses multiple transformations and optimizes it';\n\nexports.params = {\n    convertToShorts: true,\n    // degPrecision: 3, // transformPrecision (or matrix precision) - 2 by default\n    floatPrecision: 3,\n    transformPrecision: 5,\n    matrixToTransform: true,\n    shortTranslate: true,\n    shortScale: true,\n    shortRotate: true,\n    removeUseless: true,\n    collapseIntoOne: true,\n    leadingZero: true,\n    negativeExtraSpace: false\n};\n\nvar cleanupOutData = require('../lib/svgo/tools').cleanupOutData,\n    EXTEND = require('whet.extend'),\n    transform2js = require('./_transforms.js').transform2js,\n    transformsMultiply = require('./_transforms.js').transformsMultiply,\n    matrixToTransform = require('./_transforms.js').matrixToTransform,\n    degRound,\n    floatRound,\n    transformRound;\n\n/**\n * Convert matrices to the short aliases,\n * convert long translate, scale or rotate transform notations to the shorts ones,\n * convert transforms to the matrices and multiply them all into one,\n * remove useless transforms.\n *\n * @see http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (item.elem) {\n\n        // transform\n        if (item.hasAttr('transform')) {\n            convertTransform(item, 'transform', params);\n        }\n\n        // gradientTransform\n        if (item.hasAttr('gradientTransform')) {\n            convertTransform(item, 'gradientTransform', params);\n        }\n\n        // patternTransform\n        if (item.hasAttr('patternTransform')) {\n            convertTransform(item, 'patternTransform', params);\n        }\n\n    }\n\n};\n\n/**\n * Main function.\n *\n * @param {Object} item input item\n * @param {String} attrName attribute name\n * @param {Object} params plugin params\n */\nfunction convertTransform(item, attrName, params) {\n    var data = transform2js(item.attr(attrName).value);\n    params = definePrecision(data, params);\n\n    if (params.collapseIntoOne && data.length > 1) {\n        data = [transformsMultiply(data)];\n    }\n\n    if (params.convertToShorts) {\n        data = convertToShorts(data, params);\n    } else {\n        data.forEach(roundTransform);\n    }\n\n    if (params.removeUseless) {\n        data = removeUseless(data);\n    }\n\n    if (data.length) {\n        item.attr(attrName).value = js2transform(data, params);\n    } else {\n        item.removeAttr(attrName);\n    }\n}\n\n/**\n * Defines precision to work with certain parts.\n * transformPrecision - for scale and four first matrix parameters (needs a better precision due to multiplying),\n * floatPrecision - for translate including two last matrix and rotate parameters,\n * degPrecision - for rotate and skew. By default it's equal to (rougly)\n * transformPrecision - 2 or floatPrecision whichever is lower. Can be set in params.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction definePrecision(data, params) {\n    /* jshint validthis: true */\n    var matrixData = data.reduce(getMatrixData, []),\n        significantDigits = params.transformPrecision;\n\n    // Clone params so it don't affect other elements transformations.\n    params = EXTEND({}, params);\n\n    // Limit transform precision with matrix one. Calculating with larger precision doesn't add any value.\n    if (matrixData.length) {\n        params.transformPrecision = Math.min(params.transformPrecision,\n            Math.max.apply(Math, matrixData.map(floatDigits)) || params.transformPrecision);\n\n        significantDigits = Math.max.apply(Math, matrixData.map(function(n) {\n            return String(n).replace(/\\D+/g, '').length; // Number of digits in a number. 123.45 → 5\n        }));\n    }\n    // No sense in angle precision more then number of significant digits in matrix.\n    if (!('degPrecision' in params)) {\n        params.degPrecision = Math.max(0, Math.min(params.floatPrecision, significantDigits - 2));\n    }\n\n    floatRound = params.floatPrecision >= 1 && params.floatPrecision < 20 ?\n        smartRound.bind(this, params.floatPrecision) :\n        round;\n    degRound = params.degPrecision >= 1 && params.floatPrecision < 20 ?\n        smartRound.bind(this, params.degPrecision) :\n        round;\n    transformRound = params.transformPrecision >= 1 && params.floatPrecision < 20 ?\n        smartRound.bind(this, params.transformPrecision) :\n        round;\n\n    return params;\n}\n\n/**\n * Gathers four first matrix parameters.\n *\n * @param {Array} a array of data\n * @param {Object} transform\n * @return {Array} output array\n */\nfunction getMatrixData(a, b) {\n    return b.name == 'matrix' ? a.concat(b.data.slice(0, 4)) : a;\n}\n\n/**\n * Returns number of digits after the point. 0.125 → 3\n */\nfunction floatDigits(n) {\n    return (n = String(n)).slice(n.indexOf('.')).length - 1;\n}\n\n/**\n * Convert transforms to the shorthand alternatives.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction convertToShorts(transforms, params) {\n\n    for(var i = 0; i < transforms.length; i++) {\n\n        var transform = transforms[i];\n\n        // convert matrix to the short aliases\n        if (\n            params.matrixToTransform &&\n            transform.name === 'matrix'\n        ) {\n            var decomposed = matrixToTransform(transform, params);\n            if (decomposed != transform &&\n                js2transform(decomposed, params).length <= js2transform([transform], params).length) {\n\n                transforms.splice.apply(transforms, [i, 1].concat(decomposed));\n            }\n            transform = transforms[i];\n        }\n\n        // fixed-point numbers\n        // 12.754997 → 12.755\n        roundTransform(transform);\n\n        // convert long translate transform notation to the shorts one\n        // translate(10 0) → translate(10)\n        if (\n            params.shortTranslate &&\n            transform.name === 'translate' &&\n            transform.data.length === 2 &&\n            !transform.data[1]\n        ) {\n            transform.data.pop();\n        }\n\n        // convert long scale transform notation to the shorts one\n        // scale(2 2) → scale(2)\n        if (\n            params.shortScale &&\n            transform.name === 'scale' &&\n            transform.data.length === 2 &&\n            transform.data[0] === transform.data[1]\n        ) {\n            transform.data.pop();\n        }\n\n        // convert long rotate transform notation to the short one\n        // translate(cx cy) rotate(a) translate(-cx -cy) → rotate(a cx cy)\n        if (\n            params.shortRotate &&\n            transforms[i - 2] &&\n            transforms[i - 2].name === 'translate' &&\n            transforms[i - 1].name === 'rotate' &&\n            transforms[i].name === 'translate' &&\n            transforms[i - 2].data[0] === -transforms[i].data[0] &&\n            transforms[i - 2].data[1] === -transforms[i].data[1]\n        ) {\n            transforms.splice(i - 2, 3, {\n                name: 'rotate',\n                data: [\n                    transforms[i - 1].data[0],\n                    transforms[i - 2].data[0],\n                    transforms[i - 2].data[1]\n                ]\n            });\n\n            // splice compensation\n            i -= 2;\n\n            transform = transforms[i];\n        }\n\n    }\n\n    return transforms;\n\n}\n\n/**\n * Remove useless transforms.\n *\n * @param {Array} transforms input array\n * @return {Array} output array\n */\nfunction removeUseless(transforms) {\n\n    return transforms.filter(function(transform) {\n\n        // translate(0), rotate(0[, cx, cy]), skewX(0), skewY(0)\n        if (\n            ['translate', 'rotate', 'skewX', 'skewY'].indexOf(transform.name) > -1 &&\n            (transform.data.length == 1 || transform.name == 'rotate') &&\n            !transform.data[0] ||\n\n            // translate(0, 0)\n            transform.name == 'translate' &&\n            !transform.data[0] &&\n            !transform.data[1] ||\n\n            // scale(1)\n            transform.name == 'scale' &&\n            transform.data[0] == 1 &&\n            (transform.data.length < 2 || transform.data[1] == 1) ||\n\n            // matrix(1 0 0 1 0 0)\n            transform.name == 'matrix' &&\n            transform.data[0] == 1 &&\n            transform.data[3] == 1 &&\n            !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])\n        ) {\n            return false;\n        }\n\n        return true;\n\n    });\n\n}\n\n/**\n * Convert transforms JS representation to string.\n *\n * @param {Array} transformJS JS representation array\n * @param {Object} params plugin params\n * @return {String} output string\n */\nfunction js2transform(transformJS, params) {\n\n    var transformString = '';\n\n    // collect output value string\n    transformJS.forEach(function(transform) {\n        roundTransform(transform);\n        transformString += (transformString && ' ') + transform.name + '(' + cleanupOutData(transform.data, params) + ')';\n    });\n\n    return transformString;\n\n}\n\nfunction roundTransform(transform) {\n    switch (transform.name) {\n        case 'translate':\n            transform.data = floatRound(transform.data);\n            break;\n        case 'rotate':\n            transform.data = degRound(transform.data.slice(0, 1)).concat(floatRound(transform.data.slice(1)));\n            break;\n        case 'skewX':\n        case 'skewY':\n            transform.data = degRound(transform.data);\n            break;\n        case 'scale':\n            transform.data = transformRound(transform.data);\n            break;\n        case 'matrix':\n            transform.data = transformRound(transform.data.slice(0, 4)).concat(floatRound(transform.data.slice(4)));\n            break;\n    }\n    return transform;\n}\n\n/**\n * Rounds numbers in array.\n *\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction round(data) {\n    return data.map(Math.round);\n}\n\n/**\n * Decrease accuracy of floating-point numbers\n * in transforms keeping a specified number of decimals.\n * Smart rounds values like 2.349 to 2.35.\n *\n * @param {Number} fixed number of decimals\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction smartRound(precision, data) {\n    for (var i = data.length, tolerance = +Math.pow(.1, precision).toFixed(precision); i--;) {\n        if (data[i].toFixed(precision) != data[i]) {\n            var rounded = +data[i].toFixed(precision - 1);\n            data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= tolerance ?\n                +data[i].toFixed(precision) :\n                rounded;\n        }\n    }\n    return data;\n}\n"]}