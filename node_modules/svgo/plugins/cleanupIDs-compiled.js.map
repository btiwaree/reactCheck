{"version":3,"sources":["cleanupIDs.js"],"names":[],"mappings":"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","file":"cleanupIDs-compiled.js","sourcesContent":["'use strict';\n\nexports.type = 'full';\n\nexports.active = true;\n\nexports.description = 'removes unused IDs and minifies used';\n\nexports.params = {\n    remove: true,\n    minify: true,\n    prefix: ''\n};\n\nvar referencesProps = require('./_collections').referencesProps,\n    regReferencesUrl = /\\burl\\((\"|')?#(.+?)\\1\\)/,\n    regReferencesHref = /^#(.+?)$/,\n    regReferencesBegin = /^(\\w+?)\\./,\n    styleOrScript = ['style', 'script'],\n    generateIDchars = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ],\n    maxIDindex = generateIDchars.length - 1;\n\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\nexports.fn = function(data, params) {\n\n    var currentID,\n        currentIDstring,\n        IDs = Object.create(null),\n        referencesIDs = Object.create(null),\n        idPrefix = 'id-', // prefix IDs so that values like '__proto__' don't break the work\n        hasStyleOrScript = false;\n\n    /**\n     * Bananas!\n     *\n     * @param {Array} items input items\n     * @return {Array} output items\n     */\n    function monkeys(items) {\n\n        for (var i = 0; i < items.content.length && !hasStyleOrScript; i++) {\n\n            var item = items.content[i],\n                match;\n\n            // check if <style> of <script> presents\n            if (item.isElem(styleOrScript)) {\n                hasStyleOrScript = true;\n                continue;\n            }\n\n            // â€¦and don't remove any ID if yes\n            if (item.isElem()) {\n\n                item.eachAttr(function(attr) {\n                    var key;\n                    // save IDs\n                    if (attr.name === 'id') {\n                        key = idPrefix + attr.value;\n                        if (key in IDs) {\n                            item.removeAttr('id');\n                        } else {\n                            IDs[key] = item;\n                        }\n                    }\n\n                    // save IDs url() references\n                    else if (referencesProps.indexOf(attr.name) > -1) {\n                        match = attr.value.match(regReferencesUrl);\n\n                        if (match) {\n                            key = idPrefix + match[2];\n                            if (referencesIDs[key]) {\n                                referencesIDs[key].push(attr);\n                            } else {\n                                referencesIDs[key] = [attr];\n                            }\n                        }\n                    }\n\n                    // save IDs href references\n                    else if (\n                        attr.local === 'href' && (match = attr.value.match(regReferencesHref)) ||\n                        attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))\n                    ) {\n                        key = idPrefix + match[1];\n                        if (referencesIDs[key]) {\n                            referencesIDs[key].push(attr);\n                        } else {\n                            referencesIDs[key] = [attr];\n                        }\n                    }\n                });\n\n            }\n\n            // go deeper\n            if (item.content) {\n                monkeys(item);\n            }\n        }\n\n        return items;\n\n    }\n\n    data = monkeys(data);\n\n    if (hasStyleOrScript) {\n        return data;\n    }\n\n    for (var k in referencesIDs) {\n        if (IDs[k]) {\n\n            // replace referenced IDs with the minified ones\n            if (params.minify) {\n\n                currentIDstring = getIDstring(currentID = generateID(currentID), params);\n                IDs[k].attr('id').value = currentIDstring;\n\n                referencesIDs[k].forEach(function(attr) {\n                    k = k.replace(idPrefix, '');\n                    attr.value = attr.value\n                        .replace('#' + k, '#' + currentIDstring)\n                        .replace(k + '.', currentIDstring + '.');\n                });\n\n            }\n\n            // don't remove referenced IDs\n            delete IDs[idPrefix + k];\n\n        }\n    }\n\n    // remove non-referenced IDs attributes from elements\n    if (params.remove) {\n\n        for(var ID in IDs) {\n            IDs[ID].removeAttr('id');\n        }\n\n    }\n\n    return data;\n\n};\n\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\nfunction generateID(currentID) {\n\n    if (!currentID) return [0];\n\n    currentID[currentID.length - 1]++;\n\n    for(var i = currentID.length - 1; i > 0; i--) {\n        if (currentID[i] > maxIDindex) {\n            currentID[i] = 0;\n\n            if (currentID[i - 1] !== undefined) {\n                currentID[i - 1]++;\n            }\n        }\n    }\n\n    if (currentID[0] > maxIDindex) {\n        currentID[0] = 0;\n        currentID.unshift(0);\n    }\n\n    return currentID;\n\n}\n\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\nfunction getIDstring(arr, params) {\n\n    var str = params.prefix;\n\n    arr.forEach(function(i) {\n        str += generateIDchars[i];\n    });\n\n    return str;\n\n}\n"]}