{"version":3,"sources":["_transforms.js"],"names":[],"mappings":"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","file":"_transforms-compiled.js","sourcesContent":["'use strict';\n\nvar regTransformTypes = /matrix|translate|scale|rotate|skewX|skewY/,\n    regTransformSplit = /\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/,\n    regNumericValues = /[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?/g;\n\n/**\n * Convert transform string to JS representation.\n *\n * @param {String} transformString input string\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nexports.transform2js = function(transformString) {\n\n        // JS representation of the transform data\n    var transforms = [],\n        // current transform context\n        current;\n\n    // split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate', '-45', '']\n    transformString.split(regTransformSplit).forEach(function(item) {\n        /*jshint -W084 */\n        var num;\n\n        if (item) {\n            // if item is a translate function\n            if (regTransformTypes.test(item)) {\n                // then collect it and change current context\n                transforms.push(current = { name: item });\n            // else if item is data\n            } else {\n                // then split it into [10, 50] and collect as context.data\n                while (num = regNumericValues.exec(item)) {\n                    num = Number(num);\n                    if (current.data)\n                        current.data.push(num);\n                    else\n                        current.data = [num];\n                }\n            }\n        }\n    });\n\n    return transforms;\n\n};\n\n/**\n * Multiply transforms into one.\n *\n * @param {Array} input transforms array\n * @return {Array} output matrix array\n */\nexports.transformsMultiply = function(transforms) {\n\n    // convert transforms objects to the matrices\n    transforms = transforms.map(function(transform) {\n        if (transform.name === 'matrix') {\n            return transform.data;\n        }\n        return transformToMatrix(transform);\n    });\n\n    // multiply all matrices into one\n    transforms = {\n        name: 'matrix',\n        data: transforms.reduce(function(a, b) {\n            return multiplyTransformMatrices(a, b);\n        })\n    };\n\n    return transforms;\n\n};\n\n/**\n * Do math like a schoolgirl.\n *\n * @type {Object}\n */\nvar mth = exports.mth = {\n\n    rad: function(deg) {\n        return deg * Math.PI / 180;\n    },\n\n    deg: function(rad) {\n        return rad * 180 / Math.PI;\n    },\n\n    cos: function(deg) {\n        return Math.cos(this.rad(deg));\n    },\n\n    acos: function(val, floatPrecision) {\n        return +(this.deg(Math.acos(val)).toFixed(floatPrecision));\n    },\n\n    sin: function(deg) {\n        return Math.sin(this.rad(deg));\n    },\n\n    asin: function(val, floatPrecision) {\n        return +(this.deg(Math.asin(val)).toFixed(floatPrecision));\n    },\n\n    tan: function(deg) {\n        return Math.tan(this.rad(deg));\n    },\n\n    atan: function(val, floatPrecision) {\n        return +(this.deg(Math.atan(val)).toFixed(floatPrecision));\n    }\n\n};\n\n/**\n * Decompose matrix into simple transforms. See\n * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices\n *\n * @param {Object} data matrix transform object\n * @return {Object|Array} transforms array or original transform object\n */\nexports.matrixToTransform = function(transform, params) {\n    var floatPrecision = params.floatPrecision,\n        data = transform.data,\n        transforms = [],\n        sx = +Math.sqrt(data[0] * data[0] + data[1] * data[1]).toFixed(params.transformPrecision),\n        sy = +((data[0] * data[3] - data[1] * data[2]) / sx).toFixed(params.transformPrecision),\n        colsSum = data[0] * data[2] + data[1] * data[3],\n        rowsSum = data[0] * data[1] + data[2] * data[3],\n        scaleBefore = rowsSum || +(sx == sy);\n\n    // [..., ..., ..., ..., tx, ty] → translate(tx, ty)\n    if (data[4] || data[5]) {\n        transforms.push({ name: 'translate', data: data.slice(4, data[5] ? 6 : 5) });\n    }\n\n    // [sx, 0, tan(a)·sy, sy, 0, 0] → skewX(a)·scale(sx, sy)\n    if (!data[1] && data[2]) {\n        transforms.push({ name: 'skewX', data: [mth.atan(data[2] / sy, floatPrecision)] });\n\n    // [sx, sx·tan(a), 0, sy, 0, 0] → skewY(a)·scale(sx, sy)\n    } else if (data[1] && !data[2]) {\n        transforms.push({ name: 'skewY', data: [mth.atan(data[1] / data[0], floatPrecision)] });\n        sx = data[0];\n        sy = data[3];\n\n    // [sx·cos(a), sx·sin(a), sy·-sin(a), sy·cos(a), x, y] → rotate(a[, cx, cy])·(scale or skewX) or\n    // [sx·cos(a), sy·sin(a), sx·-sin(a), sy·cos(a), x, y] → scale(sx, sy)·rotate(a[, cx, cy]) (if !scaleBefore)\n    } else if (!colsSum || (sx == 1 && sy == 1) || !scaleBefore) {\n        if (!scaleBefore) {\n            sx = (data[0] < 0 ? -1 : 1) * Math.sqrt(data[0] * data[0] + data[2] * data[2]);\n            sy = (data[3] < 0 ? -1 : 1) * Math.sqrt(data[1] * data[1] + data[3] * data[3]);\n            transforms.push({ name: 'scale', data: [sx, sy] });\n        }\n        var rotate = [mth.acos(data[0] / sx, floatPrecision) * (data[1] * sy < 0 ? -1 : 1)];\n\n        if (rotate[0]) transforms.push({ name: 'rotate', data: rotate });\n\n        if (rowsSum && colsSum) transforms.push({\n            name: 'skewX',\n            data: [mth.atan(colsSum / (sx * sx), floatPrecision)]\n        });\n\n        // rotate(a, cx, cy) can consume translate() within optional arguments cx, cy (rotation point)\n        if (rotate[0] && (data[4] || data[5])) {\n            transforms.shift();\n            var cos = data[0] / sx,\n                sin = data[1] / (scaleBefore ? sx : sy),\n                x = data[4] * (scaleBefore || sy),\n                y = data[5] * (scaleBefore || sx),\n                denom = (Math.pow(1 - cos, 2) + Math.pow(sin, 2)) * (scaleBefore || sx * sy);\n            rotate.push(((1 - cos) * x - sin * y) / denom);\n            rotate.push(((1 - cos) * y + sin * x) / denom);\n        }\n\n    // Too many transformations, return original matrix if it isn't just a scale/translate\n    } else if (data[1] || data[2]) {\n        return transform;\n    }\n\n    if (scaleBefore && (sx != 1 || sy != 1) || !transforms.length) transforms.push({\n        name: 'scale',\n        data: sx == sy ? [sx] : [sx, sy]\n    });\n\n    return transforms;\n};\n\n/**\n * Convert transform to the matrix data.\n *\n * @param {Object} transform transform object\n * @return {Array} matrix data\n */\nfunction transformToMatrix(transform) {\n\n    if (transform.name === 'matrix') return transform.data;\n\n    var matrix;\n\n    switch (transform.name) {\n        case 'translate':\n            // [1, 0, 0, 1, tx, ty]\n            matrix = [1, 0, 0, 1, transform.data[0], transform.data[1] || 0];\n            break;\n        case 'scale':\n            // [sx, 0, 0, sy, 0, 0]\n            matrix = [transform.data[0], 0, 0, transform.data[1] || transform.data[0], 0, 0];\n            break;\n        case 'rotate':\n            // [cos(a), sin(a), -sin(a), cos(a), x, y]\n            var cos = mth.cos(transform.data[0]),\n                sin = mth.sin(transform.data[0]),\n                cx = transform.data[1] || 0,\n                cy = transform.data[2] || 0;\n\n            matrix = [cos, sin, -sin, cos, (1 - cos) * cx + sin * cy, (1 - cos) * cy - sin * cx];\n            break;\n        case 'skewX':\n            // [1, 0, tan(a), 1, 0, 0]\n            matrix = [1, 0, mth.tan(transform.data[0]), 1, 0, 0];\n            break;\n        case 'skewY':\n            // [1, tan(a), 0, 1, 0, 0]\n            matrix = [1, mth.tan(transform.data[0]), 0, 1, 0, 0];\n            break;\n    }\n\n    return matrix;\n\n}\n\n/**\n * Applies transformation to an arc. To do so, we represent ellipse as a matrix, multiply it\n * by the transformation matrix and use a singular value decomposition to represent in a form\n * rotate(θ)·scale(a b)·rotate(φ). This gives us new ellipse params a, b and θ.\n * SVD is being done with the formulae provided by Wolffram|Alpha (svd {{m0, m2}, {m1, m3}})\n *\n * @param {Array} arc [a, b, rotation in deg]\n * @param {Array} transform transformation matrix\n * @return {Array} arc transformed input arc\n */\nexports.transformArc = function(arc, transform) {\n\n    var a = arc[0],\n        b = arc[1],\n        rot = arc[2] * Math.PI / 180,\n        cos = Math.cos(rot),\n        sin = Math.sin(rot),\n        h = Math.pow(arc[5] * cos + arc[6] * sin, 2) / (4 * a * a) +\n            Math.pow(arc[6] * cos - arc[5] * sin, 2) / (4 * b * b);\n    if (h > 1) {\n        h = Math.sqrt(h);\n        a *= h;\n        b *= h;\n    }\n    var ellipse = [a * cos, a * sin, -b * sin, b * cos, 0, 0],\n        m = multiplyTransformMatrices(transform, ellipse),\n        // Decompose the new ellipse matrix\n        lastCol = m[2] * m[2] + m[3] * m[3],\n        squareSum = m[0] * m[0] + m[1] * m[1] + lastCol,\n        root = Math.sqrt(\n            (Math.pow(m[0] - m[3], 2) + Math.pow(m[1] + m[2], 2)) *\n            (Math.pow(m[0] + m[3], 2) + Math.pow(m[1] - m[2], 2))\n        );\n\n    if (!root) { // circle\n        arc[0] = arc[1] = Math.sqrt(squareSum / 2);\n        arc[2] = 0;\n    } else {\n        var majorAxisSqr = (squareSum + root) / 2,\n            minorAxisSqr = (squareSum - root) / 2,\n            major = Math.abs(majorAxisSqr - lastCol) > 1e-6,\n            sub = (major ? majorAxisSqr : minorAxisSqr) - lastCol,\n            rowsSum = m[0] * m[2] + m[1] * m[3],\n            term1 = m[0] * sub + m[2] * rowsSum,\n            term2 = m[1] * sub + m[3] * rowsSum;\n        arc[0] = Math.sqrt(majorAxisSqr);\n        arc[1] = Math.sqrt(minorAxisSqr);\n        arc[2] = ((major ? term2 < 0 : term1 > 0) ? -1 : 1) *\n            Math.acos((major ? term1 : term2) / Math.sqrt(term1 * term1 + term2 * term2)) * 180 / Math.PI;\n    }\n    return arc;\n\n};\n\n/**\n * Multiply transformation matrices.\n *\n * @param {Array} a matrix A data\n * @param {Array} b matrix B data\n * @return {Array} result\n */\nfunction multiplyTransformMatrices(a, b) {\n\n    return [\n        a[0] * b[0] + a[2] * b[1],\n        a[1] * b[0] + a[3] * b[1],\n        a[0] * b[2] + a[2] * b[3],\n        a[1] * b[2] + a[3] * b[3],\n        a[0] * b[4] + a[2] * b[5] + a[4],\n        a[1] * b[4] + a[3] * b[5] + a[5]\n    ];\n\n}\n"]}