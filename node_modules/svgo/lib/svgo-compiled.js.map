{"version":3,"sources":["svgo.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAYA,IAAI,SAAS,QAAQ,kBAAR,CAAT;IACA,SAAS,QAAQ,kBAAR,CAAT;IACA,UAAU,QAAQ,mBAAR,CAAV;IACA,QAAQ,QAAQ,iBAAR,CAAR;IACA,SAAS,QAAQ,kBAAR,CAAT;;AAEJ,IAAI,OAAO,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB;;AAEzC,SAAK,MAAL,GAAc,OAAO,MAAP,CAAd,CAFyC;CAAjB;;AAM5B,KAAK,SAAL,CAAe,QAAf,GAA0B,UAAS,MAAT,EAAiB,QAAjB,EAA2B;AACjD,QAAI,KAAK,MAAL,CAAY,KAAZ,EAAmB,OAAO,SAAS,KAAK,MAAL,CAAhB,CAAvB;;AAEA,QAAI,QAAQ,IAAR;QACA,SAAS,KAAK,MAAL;QACT,eAAe,OAAO,SAAP,GAAmB,EAAnB,GAAwB,CAAxB;QACf,UAAU,CAAV;QACA,iBAAiB,OAAO,iBAAP;QACjB,uBAAuB,UAAS,KAAT,EAAgB;;AAEnC,YAAI,MAAM,KAAN,EAAa;AACb,qBAAS,KAAT,EADa;AAEb,mBAFa;SAAjB;;AAKA,YAAI,EAAE,OAAF,GAAY,YAAZ,IAA4B,MAAM,IAAN,CAAW,MAAX,GAAoB,cAApB,EAAoC;AAChE,6BAAiB,MAAM,IAAN,CAAW,MAAX,CAD+C;AAEhE,kBAAM,aAAN,CAAoB,MAAM,IAAN,EAAY,oBAAhC,EAFgE;SAApE,MAGO;AACH,qBAAS,KAAT,EADG;SAHP;KAPmB,CARsB;;AAwBjD,UAAM,aAAN,CAAoB,MAApB,EAA4B,oBAA5B,EAxBiD;CAA3B;;AA4B1B,KAAK,SAAL,CAAe,aAAf,GAA+B,UAAS,MAAT,EAAiB,QAAjB,EAA2B;AACtD,QAAI,SAAS,KAAK,MAAL,CADyC;;AAGtD,WAAO,MAAP,EAAe,UAAS,KAAT,EAAgB;;AAE3B,YAAI,MAAM,KAAN,EAAa;AACb,qBAAS,KAAT,EADa;AAEb,mBAFa;SAAjB;;AAKA,gBAAQ,QAAQ,KAAR,EAAe,OAAO,OAAP,CAAvB,CAP2B;;AAS3B,iBAAS,OAAO,KAAP,EAAc,OAAO,MAAP,CAAvB,EAT2B;KAAhB,CAAf,CAHsD;CAA3B;;;;;;;;AAuB/B,KAAK,SAAL,CAAe,iBAAf,GAAmC,UAAS,IAAT,EAAe;;AAE9C,WAAO,IAAI,KAAJ,CAAU,IAAV,CAAP,CAF8C;CAAf","file":"svgo-compiled.js","sourcesContent":["'use strict';\n\n/**\n * SVGO is a Nodejs-based tool for optimizing SVG vector graphics files.\n *\n * @see https://github.com/svg/svgo\n *\n * @author Kir Belevich <kir@soulshine.in> (https://github.com/deepsweet)\n * @copyright Â© 2012 Kir Belevich\n * @license MIT https://raw.githubusercontent.com/svg/svgo/master/LICENSE\n */\n\nvar CONFIG = require('./svgo/config.js'),\n    SVG2JS = require('./svgo/svg2js.js'),\n    PLUGINS = require('./svgo/plugins.js'),\n    JSAPI = require('./svgo/jsAPI.js'),\n    JS2SVG = require('./svgo/js2svg.js');\n\nvar SVGO = module.exports = function(config) {\n\n    this.config = CONFIG(config);\n\n};\n\nSVGO.prototype.optimize = function(svgstr, callback) {\n    if (this.config.error) return callback(this.config);\n\n    var _this = this,\n        config = this.config,\n        maxPassCount = config.multipass ? 10 : 1,\n        counter = 0,\n        prevResultSize = Number.POSITIVE_INFINITY,\n        optimizeOnceCallback = function(svgjs) {\n\n            if (svgjs.error) {\n                callback(svgjs);\n                return;\n            }\n\n            if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {\n                prevResultSize = svgjs.data.length;\n                _this._optimizeOnce(svgjs.data, optimizeOnceCallback);\n            } else {\n                callback(svgjs);\n            }\n\n        };\n\n    _this._optimizeOnce(svgstr, optimizeOnceCallback);\n\n};\n\nSVGO.prototype._optimizeOnce = function(svgstr, callback) {\n    var config = this.config;\n\n    SVG2JS(svgstr, function(svgjs) {\n\n        if (svgjs.error) {\n            callback(svgjs);\n            return;\n        }\n\n        svgjs = PLUGINS(svgjs, config.plugins);\n\n        callback(JS2SVG(svgjs, config.js2svg));\n\n    });\n};\n\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\nSVGO.prototype.createContentItem = function(data) {\n\n    return new JSAPI(data);\n\n};\n"]}