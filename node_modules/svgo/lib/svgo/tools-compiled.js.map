{"version":3,"sources":["tools.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA,QAAQ,gBAAR,GAA2B,UAAS,GAAT,EAAc,IAAd,EAAoB;;AAE3C,QAAI,SAAS,oBAAT;;;AAFuC,QAKvC,CAAC,IAAD,IAAS,SAAS,QAAT,EAAmB;;AAE5B,kBAAU,UAAV,CAF4B;;AAI5B,cAAM,SAAS,IAAI,MAAJ,CAAW,GAAX,EAAgB,QAAhB,CAAyB,QAAzB,CAAT;;;AAJsB,KAAhC,MAOO,IAAI,SAAS,KAAT,EAAgB;;AAEvB,kBAAM,SAAS,GAAT,GAAe,mBAAmB,GAAnB,CAAf;;;AAFiB,SAApB,MAKA,IAAI,SAAS,OAAT,EAAkB;;AAEzB,sBAAM,SAAS,GAAT,GAAe,GAAf,CAFmB;aAAtB;;AAMP,WAAO,GAAP,CAvB2C;CAApB;;;;;;;;AAiC3B,QAAQ,gBAAR,GAA2B,UAAS,GAAT,EAAc;AACrC,QAAI,SAAS,uDAAT,CADiC;AAErC,QAAI,QAAQ,OAAO,IAAP,CAAY,GAAZ,CAAR;;;AAFiC,QAKjC,CAAC,KAAD,EAAQ,OAAO,GAAP,CAAZ;;AAEA,QAAI,OAAO,MAAM,CAAN,CAAP;;;AAPiC,QAUjC,MAAM,CAAN,CAAJ,EAAc;;AAEV,cAAM,IAAI,MAAJ,CAAW,IAAX,EAAiB,QAAjB,EAA2B,QAA3B,CAAoC,MAApC,CAAN;;;AAFU,KAAd,MAKO,IAAI,KAAK,MAAL,CAAY,CAAZ,MAAmB,GAAnB,EAAwB;;AAE/B,kBAAM,mBAAmB,IAAnB,CAAN;;;AAF+B,SAA5B,MAKA,IAAI,KAAK,MAAL,CAAY,CAAZ,MAAmB,GAAnB,EAAwB;;AAE/B,sBAAM,IAAN,CAF+B;aAA5B;;AAMP,WAAO,GAAP,CA1BqC;CAAd;;AA6B3B,QAAQ,eAAR,GAA0B,UAAS,CAAT,EAAY,CAAZ,EAAe;AACrC,WAAO,EAAE,MAAF,CAAS,UAAS,CAAT,EAAY;AACxB,eAAO,EAAE,OAAF,CAAU,CAAV,IAAe,CAAC,CAAD,CADE;KAAZ,CAAhB,CADqC;CAAf;;AAM1B,QAAQ,cAAR,GAAyB,UAAS,IAAT,EAAe,MAAf,EAAuB;;AAE5C,QAAI,MAAM,EAAN;QACA,SADJ;QAEI,IAFJ,CAF4C;;AAM5C,SAAK,OAAL,CAAa,UAAS,IAAT,EAAe,CAAf,EAAkB;;;AAG3B,oBAAY,GAAZ;;;AAH2B,YAMvB,MAAM,CAAN,EAAS;AACT,wBAAY,EAAZ,CADS;SAAb;;;;;AAN2B,YAavB,OAAO,WAAP,EAAoB;AACpB,mBAAO,kBAAkB,IAAlB,CAAP,CADoB;SAAxB;;;;AAb2B,YAoBvB,OAAO,kBAAP,KACC,OAAO,CAAP,IACI,MAAM,IAAN,CAAW,IAAX,KAAoB,OAAO,CAAP,KAAa,CAAb,CAFzB,EAIF;AACE,wBAAY,EAAZ,CADF;SALF;;;AAnB2B,YA6B3B,GAAO,IAAP,CA7B2B;;AA+B3B,eAAO,YAAY,IAAZ,CA/BoB;KAAlB,CAAb,CAN4C;;AAyC5C,WAAO,GAAP,CAzC4C;CAAvB;;;;;;;;;;;;;;;AA0DzB,IAAI,oBAAoB,QAAQ,iBAAR,GAA4B,UAAS,GAAT,EAAc;;AAE9D,QAAI,MAAM,CAAN,IAAW,MAAM,CAAN,EAAS;AACpB,cAAM,CAAC,KAAK,GAAL,CAAD,CAAW,KAAX,CAAiB,CAAjB,CAAN,CADoB;KAAxB,MAEO,IAAI,MAAM,CAAN,IAAW,MAAM,CAAC,CAAD,EAAI;AAC5B,cAAM,MAAM,CAAC,KAAK,GAAL,CAAD,CAAW,KAAX,CAAiB,CAAjB,CAAN,CADsB;KAAzB;;AAIP,WAAO,GAAP,CAR8D;CAAd","file":"tools-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Encode plain SVG data string into Data URI string.\n *\n * @param {String} str input string\n * @param {String} type Data URI type\n * @return {String} output string\n */\nexports.encodeSVGDatauri = function(str, type) {\n\n    var prefix = 'data:image/svg+xml';\n\n    // base64\n    if (!type || type === 'base64') {\n\n        prefix += ';base64,';\n\n        str = prefix + new Buffer(str).toString('base64');\n\n    // URI encoded\n    } else if (type === 'enc') {\n\n        str = prefix + ',' + encodeURIComponent(str);\n\n    // unencoded\n    } else if (type === 'unenc') {\n\n        str = prefix + ',' + str;\n\n    }\n\n    return str;\n\n};\n\n/**\n * Decode SVG Data URI string into plain SVG string.\n *\n * @param {string} str input string\n * @return {String} output string\n */\nexports.decodeSVGDatauri = function(str) {\n    var regexp = /data:image\\/svg\\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;\n    var match = regexp.exec(str);\n\n    // plain string\n    if (!match) return str;\n\n    var data = match[3];\n\n    // base64\n    if (match[2]) {\n\n        str = new Buffer(data, 'base64').toString('utf8');\n\n    // URI encoded\n    } else if (data.charAt(0) === '%') {\n\n        str = decodeURIComponent(data);\n\n    // unencoded\n    } else if (data.charAt(0) === '<') {\n\n        str = data;\n\n    }\n\n    return str;\n};\n\nexports.intersectArrays = function(a, b) {\n    return a.filter(function(n) {\n        return b.indexOf(n) > -1;\n    });\n};\n\nexports.cleanupOutData = function(data, params) {\n\n    var str = '',\n        delimiter,\n        prev;\n\n    data.forEach(function(item, i) {\n\n        // space delimiter by default\n        delimiter = ' ';\n\n        // no extra space in front of first number\n        if (i === 0) {\n            delimiter = '';\n        }\n\n        // remove floating-point numbers leading zeros\n        // 0.5 → .5\n        // -0.5 → -.5\n        if (params.leadingZero) {\n            item = removeLeadingZero(item);\n        }\n\n        // no extra space in front of negative number or\n        // in front of a floating number if a previous number is floating too\n        if (\n            params.negativeExtraSpace &&\n            (item < 0 ||\n                (/^\\./.test(item) && prev % 1 !== 0)\n            )\n        ) {\n            delimiter = '';\n        }\n\n        // save prev item value\n        prev = item;\n\n        str += delimiter + item;\n\n    });\n\n    return str;\n\n};\n\n/**\n * Remove floating-point numbers leading zero.\n *\n * @example\n * 0.5 → .5\n *\n * @example\n * -0.5 → -.5\n *\n * @param {Float} num input number\n *\n * @return {String} output number as string\n */\nvar removeLeadingZero = exports.removeLeadingZero = function(num) {\n\n    if (num > 0 && num < 1) {\n        num = ('' + num).slice(1);\n    } else if (num < 0 && num > -1) {\n        num = '-' + ('' + num).slice(2);\n    }\n\n    return num;\n\n};\n"]}