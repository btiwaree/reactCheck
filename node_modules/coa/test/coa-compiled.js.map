{"version":3,"sources":["coa.js"],"names":[],"mappings":"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","file":"coa-compiled.js","sourcesContent":["var assert = require('chai').assert,\n    COA = require('..');\n\n/**\n * Mocha BDD interface.\n */\n/** @name describe @function */\n/** @name it @function */\n/** @name before @function */\n/** @name after @function */\n/** @name beforeEach @function */\n/** @name afterEach @function */\n\ndescribe('Opt', function() {\n\n    describe('Unknown option', function() {\n\n        var cmd = COA.Cmd();\n\n        it('should fail', function() {\n            return cmd.do(['-a'])\n                .then(assert.fail, emptyFn);\n        });\n\n    });\n\n    describe('Short options', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('a')\n                .short('a')\n                .end()\n            .opt()\n                .name('b')\n                .short('b')\n                .end()\n            .act(function(opts) {\n                return opts;\n            });\n\n        it('should return passed values', function() {\n            return cmd.do(['-a', 'a', '-b', 'b'])\n                .then(function(res) {\n                    assert.deepEqual(res, { a: 'a', b: 'b' });\n                });\n        });\n\n    });\n\n    describe('Long options', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('long1')\n                .long('long1')\n                .end()\n            .opt()\n                .name('long2')\n                .long('long2')\n                .end()\n            .act(function(opts) {\n                return opts;\n            });\n\n        it('should return passed values', function() {\n            return cmd.do(['--long1', 'long value', '--long2=another long value'])\n                .then(function(res) {\n                    assert.deepEqual(res, { long1: 'long value', long2: 'another long value' });\n                });\n        });\n\n    });\n\n    describe('Array option', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('a')\n                .short('a')\n                .arr()\n                .end()\n            .act(function(opts) {\n                return opts;\n            });\n\n        it('should return array of passed values', function() {\n            return cmd.do(['-a', '1', '-a', '2'])\n                .then(function(res) {\n                    assert.deepEqual(res, { a: ['1', '2'] });\n                });\n        });\n\n    });\n\n    describe('Required option', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('a')\n                .short('a')\n                .req()\n                .end()\n            .act(function(opts) {\n                return opts;\n            });\n\n        it('should fail if not specified', function() {\n            return cmd.do()\n                .then(assert.fail, emptyFn);\n        });\n\n        it('should return passed value if specified', function() {\n            return cmd.do(['-a', 'test'])\n                .then(function(opts) {\n                    assert.equal(opts.a, 'test');\n                });\n        });\n\n    });\n\n    describe('Option with default value', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('a')\n                .short('a')\n                .def('aaa')\n                .end()\n            .act(function(opts) {\n                return opts;\n            });\n\n        it('should return default value if not specified', function() {\n            return cmd.do()\n                .then(function(opts) {\n                    assert.equal(opts.a, 'aaa');\n                });\n        });\n\n        it('should return passed value if specified', function() {\n            return cmd.do(['-a', 'test'])\n                .then(function(opts) {\n                    assert.equal(opts.a, 'test');\n                });\n        });\n\n    });\n\n    describe('Validated / transformed option', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('a')\n                .short('a')\n                .val(function(v) {\n                    if (v === 'invalid') return this.reject('fail');\n                    return { value: v };\n                })\n                .end()\n            .act(function(opts) {\n                return opts;\n            });\n\n        it('should fail if custom checks suppose to do so', function() {\n            return cmd.do(['-a', 'invalid'])\n                .then(assert.fail, emptyFn);\n        });\n\n        it('should return transformed value', function() {\n            return cmd.do(['-a', 'test'])\n                .then(function(opts) {\n                    assert.deepEqual(opts.a, { value: 'test' });\n                });\n        });\n\n    });\n\n    describe('Only option (--version case)', function() {\n\n        var ver = require('../package.json').version,\n            cmd = COA.Cmd()\n                .opt()\n                    .name('version')\n                    .long('version')\n                    .flag()\n                    .only()\n                    .act(function() {\n                        return ver;\n                    })\n                    .end()\n                .opt()\n                    .name('req')\n                    .short('r')\n                    .req()\n                    .end();\n\n        it('should process the only() option', function() {\n            return cmd.do(['--version'])\n                .then(assert.fail, function(res) {\n                    assert.equal(res, ver);\n                });\n        });\n\n    });\n\n    it('input()');\n    it('output()');\n\n});\n\ndescribe('Arg', function() {\n\n    describe('Unknown arg', function() {\n\n        var cmd = COA.Cmd();\n\n        it('should fail', function() {\n            return cmd.do(['test'])\n                .then(assert.fail, emptyFn);\n        });\n\n    });\n\n    describe('Unknown arg after known', function() {\n\n        var cmd = COA.Cmd()\n            .arg()\n                .name('a')\n                .end();\n\n        it('should fail', function() {\n            return cmd.do(['test', 'unknown'])\n                .then(assert.fail, emptyFn);\n        });\n\n    });\n\n    describe('Array arg', function() {\n\n        var cmd = COA.Cmd()\n            .arg()\n                .name('a')\n                .arr()\n                .end()\n            .act(function(opts, args) {\n                return args;\n            });\n\n        it('should return array of passed values', function() {\n            return cmd.do(['value 1', 'value 2'])\n                .then(function(args) {\n                    assert.deepEqual(args, { a: ['value 1', 'value 2'] });\n                });\n        });\n\n    });\n\n    describe('Required arg', function() {\n\n        var cmd = COA.Cmd()\n            .arg()\n                .name('a')\n                .req()\n                .end()\n            .act(function(opts, args) {\n                return args;\n            });\n\n        it('should fail if not specified', function() {\n            return cmd.do()\n                .then(assert.fail, emptyFn);\n        });\n\n        it('should return passed value if specified', function() {\n            return cmd.do(['value'])\n                .then(function(args) {\n                    assert.equal(args.a, 'value');\n                });\n        });\n\n    });\n\n    describe('Args after options', function() {\n\n        var cmd = COA.Cmd()\n            .opt()\n                .name('opt')\n                .long('opt')\n                .end()\n            .arg()\n                .name('arg1')\n                .end()\n            .arg()\n                .name('arg2')\n                .arr()\n                .end()\n            .act(function(opts, args) {\n                return { opts: opts, args: args };\n            });\n\n        it('should return passed values', function() {\n            return cmd.do(['--opt', 'value', 'value', 'value 1', 'value 2'])\n                .then(function(o) {\n                    assert.deepEqual(o, {\n                        opts: { opt: 'value' },\n                        args: {\n                            arg1: 'value',\n                            arg2: ['value 1', 'value 2']\n                        }\n                    });\n                });\n        });\n\n    });\n\n    describe('Raw args', function() {\n\n        var cmd = COA.Cmd()\n            .arg()\n                .name('raw')\n                .arr()\n                .end()\n            .act(function(opts, args) {\n                return args;\n            });\n\n        it('should return passed arg values', function() {\n            return cmd.do(['--', 'raw', 'arg', 'values'])\n                .then(function(args) {\n                    assert.deepEqual(args, { raw: ['raw', 'arg', 'values'] });\n                });\n        });\n\n    });\n\n});\n\ndescribe('Cmd', function() {\n\n    var doTest = function(o) {\n            assert.deepEqual(o, {\n                opts: { opt: 'value' },\n                args: {\n                    arg1: 'value',\n                    arg2: ['value 1', 'value 2']\n                }\n            });\n        },\n\n        invokeOpts = { opt: 'value' },\n        invokeArgs = {\n            arg1: 'value',\n            arg2:  ['value 1', 'value 2']\n        };\n\n    describe('Subcommand', function() {\n\n        var cmd = COA.Cmd()\n            .cmd()\n                .name('command')\n                .opt()\n                    .name('opt')\n                    .long('opt')\n                    .end()\n                .arg()\n                    .name('arg1')\n                    .end()\n                .arg()\n                    .name('arg2')\n                    .arr()\n                    .end()\n                .act(function(opts, args) {\n                    return { opts: opts, args: args };\n                })\n                .end();\n\n        describe('when specified on command line', function() {\n\n            it('should be invoked and accept passed opts and args', function() {\n                return cmd.do(['command', '--opt', 'value', 'value', 'value 1', 'value 2'])\n                    .then(doTest);\n            });\n\n        });\n\n        describe('when invoked using api', function() {\n\n            it('should be invoked and accept passed opts and args', function() {\n                return cmd.api.command(invokeOpts, invokeArgs)\n                    .then(doTest);\n            });\n\n        });\n\n        describe('when invoked using invoke()', function() {\n\n            it('should be invoked and accept passed opts and args', function() {\n                return cmd.invoke('command', invokeOpts, invokeArgs)\n                    .then(doTest);\n            });\n\n        });\n\n        describe('when unexisting command invoked using invoke()', function() {\n\n            it('should fail', function() {\n                return cmd.invoke('unexistent')\n                    .then(assert.fail, emptyFn);\n            });\n\n        });\n\n    });\n\n    describe('External subcommand', function() {\n\n        describe('default scheme: cmd.extendable()', function() {\n\n            describe('when described as a function', function() {\n                var cmd = COA.Cmd()\n                    .name('coa')\n                    .extendable();\n\n                it('should be invoked and accept passed opts and args', function() {\n                    return cmd.do(['test', '--opt', 'value', 'value', 'value 1', 'value 2'])\n                        .then(doTest);\n                });\n            });\n\n            describe('when described as an COA.Cmd() object', function() {\n                var cmd = COA.Cmd()\n                    .name('coa')\n                    .extendable();\n\n                it('should be invoked and accept passed opts and args', function() {\n                    return cmd.do(['test-obj', '--opt', 'value', 'value', 'value 1', 'value 2'])\n                        .then(doTest);\n                });\n            });\n\n            describe('2nd level subcommand', function() {\n                var cmd = COA.Cmd()\n                    .name('coa')\n                    .cmd()\n                    .name('test')\n                    .extendable()\n                    .end();\n\n                it('should be invoked and accept passed opts and args', function() {\n                    return cmd.do(['test', 'obj', '--opt', 'value', 'value', 'value 1', 'value 2'])\n                        .then(doTest);\n                });\n            });\n\n        });\n\n        describe(\"common prefix: cmd.extendable('coa-')\", function() {\n\n            describe('when described as a function', function() {\n                var cmd = COA.Cmd()\n                    .name('coa')\n                    .extendable('coa-');\n\n                it('should be invoked and accept passed opts and args', function() {\n                    return cmd.do(['test', '--opt', 'value', 'value', 'value 1', 'value 2'])\n                        .then(doTest);\n                });\n            });\n\n        });\n\n        describe(\"format string: cmd.extendable('coa-%s')\", function() {\n\n            describe('when described as a function', function() {\n                var cmd = COA.Cmd()\n                    .name('coa')\n                    .extendable('coa-%s');\n\n                it('should be invoked and accept passed opts and args', function() {\n                    return cmd.do(['test', '--opt', 'value', 'value', 'value 1', 'value 2'])\n                        .then(doTest);\n                });\n            });\n\n        });\n\n    });\n\n    it('helpful(), name(), title()');\n\n});\n\nfunction emptyFn() {\n    // empty function\n}\n"]}