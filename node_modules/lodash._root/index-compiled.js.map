{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;AAUA,IAAI,cAAc;AAChB,cAAY,IAAZ;AACA,YAAU,IAAV;CAFE;;;AAMJ,IAAI,cAAc,WAAC,CAAY,OAAO,OAAP,CAAZ,IAA+B,OAA/B,IAA0C,CAAC,QAAQ,QAAR,GAC1D,OADc,GAEd,SAFc;;;AAKlB,IAAI,aAAa,WAAC,CAAY,OAAO,MAAP,CAAZ,IAA8B,MAA9B,IAAwC,CAAC,OAAO,QAAP,GACvD,MADa,GAEb,SAFa;;;AAKjB,IAAI,aAAa,YAAY,eAAe,UAAf,IAA6B,OAAO,MAAP,IAAiB,QAAjB,IAA6B,MAA1D,CAAzB;;;AAGJ,IAAI,WAAW,YAAY,YAAY,OAAO,IAAP,CAAZ,IAA4B,IAA5B,CAAvB;;;AAGJ,IAAI,aAAa,YAAY,YAAY,OAAO,MAAP,CAAZ,IAA8B,MAA9B,CAAzB;;;AAGJ,IAAI,aAAa,YAAY,YAAY,OAAO,IAAP,CAAZ,IAA4B,IAA5B,CAAzB;;;;;;;;AAQJ,IAAI,OAAO,cACR,UAAC,MAAgB,cAAc,WAAW,MAAX,CAA9B,IAAqD,UAAtD,IACC,QAFO,IAEK,UAFL,IAEmB,SAAS,aAAT,GAFnB;;;;;;;;;AAWX,SAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B,SAAO,KAAC,IAAS,MAAM,MAAN,KAAiB,MAAjB,GAA2B,KAArC,GAA6C,IAA7C,CADmB;CAA5B;;AAIA,OAAO,OAAP,GAAiB,IAAjB","file":"index-compiled.js","sourcesContent":["/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n\n/** Detect free variable `exports`. */\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n  ? exports\n  : undefined;\n\n/** Detect free variable `module`. */\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n  ? module\n  : undefined;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n\n/** Detect free variable `self`. */\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\n\n/** Detect free variable `window`. */\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\n\n/** Detect `this` as the global object. */\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n\n/**\n * Used as a reference to the global object.\n *\n * The `this` value is used if it's the global object to avoid Greasemonkey's\n * restricted `window` object, otherwise the `window` object is used.\n */\nvar root = freeGlobal ||\n  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n    freeSelf || thisGlobal || Function('return this')();\n\n/**\n * Checks if `value` is a global object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n */\nfunction checkGlobal(value) {\n  return (value && value.Object === Object) ? value : null;\n}\n\nmodule.exports = root;\n"]}