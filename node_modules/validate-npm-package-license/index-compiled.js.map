{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,uBAAR,CAAR;AACJ,IAAI,UAAU,QAAQ,cAAR,CAAV;;AAEJ,IAAI,iBACF,uBACA,0DADA,GAEA,mBAFA,GAGA,6BAHA;;AAMF,IAAI,kBAAkB,0BAAlB;;AAEJ,SAAS,UAAT,CAAoB,MAApB,EAA4B,MAA5B,EAAoC;AAClC,SAAO,OAAO,KAAP,CAAa,CAAb,EAAgB,OAAO,MAAP,CAAhB,KAAmC,MAAnC,CAD2B;CAApC;;AAIA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,MAAI,IAAI,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;AACjC,QAAI,UAAU,IAAI,OAAJ,CADmB;AAEjC,WACE,WAAW,YAAX,EAAyB,OAAzB,KACA,WAAW,aAAX,EAA0B,OAA1B,CADA,CAH+B;GAAnC,MAMO;AACL,WACE,eAAe,IAAI,IAAJ,CAAf,IACA,eAAe,IAAI,KAAJ,CADf,CAFG;GANP;CADF;;AAeA,OAAO,OAAP,GAAiB,UAAS,QAAT,EAAmB;AAClC,MAAI,GAAJ,CADkC;;AAGlC,MAAI;AACF,UAAM,MAAM,QAAN,CAAN,CADE;GAAJ,CAEE,OAAO,CAAP,EAAU;AACV,QAAI,KAAJ,CADU;AAEV,QACE,aAAa,YAAb,IACA,aAAa,YAAb,EACA;AACA,aAAO;AACL,6BAAqB,IAArB;AACA,6BAAqB,IAArB;AACA,oBAAY,IAAZ;OAHF,CADA;KAHF,MASO,IAAI,QAAQ,gBAAgB,IAAhB,CAAqB,QAArB,CAAR,EAAwC;AACjD,aAAO;AACL,6BAAqB,IAArB;AACA,6BAAqB,IAArB;AACA,gBAAQ,MAAM,CAAN,CAAR;OAHF,CADiD;KAA5C,MAMA;AACL,UAAI,SAAS;AACX,6BAAqB,KAArB;AACA,6BAAqB,KAArB;AACA,kBAAU,CAAC,cAAD,CAAV;OAHE,CADC;AAML,UAAI,YAAY,QAAQ,QAAR,CAAZ,CANC;AAOL,UAAI,SAAJ,EAAe;AACb,eAAO,QAAP,CAAgB,IAAhB,CACE,iDAAiD,SAAjD,GAA6D,GAA7D,CADF,CADa;OAAf;AAKA,aAAO,MAAP,CAZK;KANA;GAXP;;AAiCF,MAAI,eAAe,GAAf,CAAJ,EAAyB;AACvB,WAAO;AACL,2BAAqB,KAArB;AACA,2BAAqB,KAArB;AACA,YAAM,IAAN;AACA,gBAAU,CAAC,cAAD,CAAV;KAJF,CADuB;GAAzB,MAOO;AACL,WAAO;AACL,2BAAqB,IAArB;AACA,2BAAqB,IAArB;AACA,YAAM,IAAN;KAHF,CADK;GAPP;CAtCe","file":"index-compiled.js","sourcesContent":["var parse = require('spdx-expression-parse');\nvar correct = require('spdx-correct');\n\nvar genericWarning = (\n  'license should be ' +\n  'a valid SPDX license expression (without \"LicenseRef\"), ' +\n  '\"UNLICENSED\", or ' +\n  '\"SEE LICENSE IN <filename>\"'\n);\n\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return (\n      startsWith('LicenseRef', license) ||\n      startsWith('DocumentRef', license)\n    );\n  } else {\n    return (\n      usesLicenseRef(ast.left) ||\n      usesLicenseRef(ast.right)\n    );\n  }\n}\n\nmodule.exports = function(argument) {\n  var ast;\n\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match\n    if (\n      argument === 'UNLICENSED' ||\n      argument === 'UNLICENCED'\n    ) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n      var corrected = correct(argument);\n      if (corrected) {\n        result.warnings.push(\n          'license is similar to the valid expression \"' + corrected + '\"'\n        );\n      }\n      return result;\n    }\n  }\n\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};\n"]}