{"version":3,"sources":["stringify.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAJ;;AAEA,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACpB,KAAG,QAAQ,GAAR,EAAa;AACf,SAAO,GAAP,CADe;EAAhB;AAGA,QAAO,IAAI,OAAJ,CAAY,0CAAZ,EAAwD,MAAxD,CAAP,CAJoB;CAArB;;AAOA,SAAS,2BAAT,CAAqC,IAArC,EAA2C;AAC1C,SAAO,KAAK,IAAL;AACP,OAAK,WAAL;AACC,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAA+B,GAA/B,CAAP,CADD;AADA,OAGK,UAAL;AACC,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAA+B,EAA/B,CAAP,CADD;AAHA,OAKK,SAAL;AACC,UAAO,CAAC,OAAO,KAAK,SAAL,KAAmB,QAA1B,GAAqC,OAAO,KAAK,SAAL,CAAP,GAAyB,GAAzB,GAA+B,EAApE,CAAD,GAA2E,OAAO,KAAK,IAAL,CAAlF,CADR;AALA,OAOK,OAAL;AACC,UAAO,MAAM,OAAO,KAAK,IAAL,CAAb,CADR;AAPA,OASK,IAAL;AACC,UAAO,MAAM,OAAO,KAAK,IAAL,CAAb,CADR;AATA,OAWK,WAAL;AACC,UAAO,MAAM,KAAK,OAAL,GAAe,GAArB,CADR;AAXA,OAaK,SAAL;AACC,UAAO,KAAK,KAAL,CADR;AAbA,OAeK,cAAL;AACC,UAAO,MAAM,OAAO,KAAK,IAAL,CAAb,IAA2B,OAAO,KAAK,OAAL,KAAiB,QAAxB,GAAmC,MAAM,KAAK,OAAL,GAAe,GAArB,GAA2B,EAA9D,CAA3B,CADR;AAfA,OAiBK,qBAAL;AACC,UAAO,MAAM,OAAO,KAAK,IAAL,CAAb,GAA0B,GAA1B,GAAgC,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAA+B,GAA/B,CAAhC,GAAsE,GAAtE,CADR;AAjBA,OAmBK,gBAAL;AACC,UAAO,OAAO,OAAO,KAAK,IAAL,CAAd,CADR;AAnBA,OAqBK,WAAL;AACC,UAAO,CAAC,OAAO,KAAK,SAAL,KAAmB,QAA1B,GAAqC,OAAO,KAAK,SAAL,CAAP,GAAyB,GAAzB,GAA+B,EAApE,CAAD,GAA2E,GAA3E,CADR;AArBA,OAuBK,UAAL;AACC,UAAO,KAAK,QAAL,CADR;AAvBA,OAyBK,SAAL;AACC,UAAO,OAAO,KAAK,OAAL,GAAe,IAAtB,CADR;AAzBA,OA2BK,SAAL;AACC,UAAO,KAAK,KAAL,CADR;AA3BA,EAD0C;CAA3C;;AAkCA,YAAY,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AACpC,KAAI,MAAM,4BAA4B,IAA5B,CAAN,CADgC;AAEpC,KAAG,KAAK,MAAL,EAAa;AACf,QAAM,KAAK,MAAL,GAAc,GAAd,CADS;EAAhB;AAGA,KAAG,KAAK,KAAL,EAAY;AACd,QAAM,MAAM,KAAK,KAAL,CADE;EAAf;AAGA,QAAO,GAAP,CARoC;CAAzB;;AAWZ,OAAO,OAAP,GAAiB,SAAjB","file":"stringify-compiled.js","sourcesContent":["\"use strict\";\r\n\r\nvar stringify;\r\n\r\nfunction escape(str) {\r\n\tif(str === \"*\") {\r\n\t\treturn \"*\";\r\n\t}\r\n\treturn str.replace(/(^[^A-Za-z_\\\\-]|^\\-\\-|[^A-Za-z_0-9\\\\-])/g, \"\\\\$1\");\r\n}\r\n\r\nfunction stringifyWithoutBeforeAfter(tree) {\r\n\tswitch(tree.type) {\r\n\tcase \"selectors\":\r\n\t\treturn tree.nodes.map(stringify).join(\",\");\r\n\tcase \"selector\":\r\n\t\treturn tree.nodes.map(stringify).join(\"\");\r\n\tcase \"element\":\r\n\t\treturn (typeof tree.namespace === \"string\" ? escape(tree.namespace) + \"|\" : \"\") + escape(tree.name);\r\n\tcase \"class\":\r\n\t\treturn \".\" + escape(tree.name);\r\n\tcase \"id\":\r\n\t\treturn \"#\" + escape(tree.name);\r\n\tcase \"attribute\":\r\n\t\treturn \"[\" + tree.content + \"]\";\r\n\tcase \"spacing\":\r\n\t\treturn tree.value;\r\n\tcase \"pseudo-class\":\r\n\t\treturn \":\" + escape(tree.name) + (typeof tree.content === \"string\" ? \"(\" + tree.content + \")\" : \"\");\r\n\tcase \"nested-pseudo-class\":\r\n\t\treturn \":\" + escape(tree.name) + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\r\n\tcase \"pseudo-element\":\r\n\t\treturn \"::\" + escape(tree.name);\r\n\tcase \"universal\":\r\n\t\treturn (typeof tree.namespace === \"string\" ? escape(tree.namespace) + \"|\" : \"\") + \"*\";\r\n\tcase \"operator\":\r\n\t\treturn tree.operator;\r\n\tcase \"comment\":\r\n\t\treturn \"/*\" + tree.content + \"*/\";\r\n\tcase \"invalid\":\r\n\t\treturn tree.value;\r\n\t}\r\n}\r\n\r\n\r\nstringify = function stringify(tree) {\r\n\tvar str = stringifyWithoutBeforeAfter(tree);\r\n\tif(tree.before) {\r\n\t\tstr = tree.before + str;\r\n\t}\r\n\tif(tree.after) {\r\n\t\tstr = str + tree.after;\r\n\t}\r\n\treturn str;\r\n};\r\n\r\nmodule.exports = stringify;\r\n"]}