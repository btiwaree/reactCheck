{"version":3,"sources":["stringifyValues.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,QAAR,CAAT;;AAEJ,IAAI,SAAJ;;AAEA,SAAS,MAAT,CAAgB,GAAhB,EAAqB,UAArB,EAAiC;AAChC,QAAO,OAAO,GAAP,EAAY;AAClB,UAAQ,eAAe,IAAf,GAAsB,QAAtB,GAAiC,QAAjC;EADF,CAAP,CADgC;CAAjC;;AAMA,SAAS,2BAAT,CAAqC,IAArC,EAA2C;AAC1C,SAAO,KAAK,IAAL;AACP,OAAK,QAAL;AACC,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAA+B,GAA/B,CAAP,CADD;AADA,OAGK,OAAL;AACC,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAA+B,EAA/B,CAAP,CADD;AAHA,OAKK,MAAL;AACC,UAAO,KAAK,IAAL,CADR;AALA,OAOK,aAAL;AACC,UAAO,KAAK,IAAL,GAAY,GAAZ,GAAkB,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAA+B,GAA/B,CAAlB,GAAwD,GAAxD,CADR;AAPA,OASK,SAAL;AACC,UAAO,KAAK,KAAL,CADR;AATA,OAWK,SAAL;AACC,UAAO,OAAO,KAAK,OAAL,GAAe,IAAtB,CADR;AAXA,OAaK,QAAL;AACC,WAAO,KAAK,UAAL;AACP,SAAK,GAAL;AACC,YAAO,MAAM,OAAO,KAAK,KAAL,EAAY,GAAnB,CAAN,GAAgC,GAAhC,CADR;AADA,SAGK,IAAL;AACC,YAAO,OAAO,OAAO,KAAK,KAAL,EAAY,IAAnB,CAAP,GAAkC,IAAlC,CADR;AAHA;;AADD,SAQO,IAAI,KAAJ,CAAU,oBAAV,CAAN,CARD;AAbA,OAsBK,KAAL;AACC,OAAI,QAAQ,UAAU,KAAK,kBAAL,IAA2B,EAA3B,CAAV,CADb;AAEC,OAAI,MAAM,CAAC,KAAK,iBAAL,IAA0B,EAA1B,CAAD,GAAiC,GAAjC,CAFX;AAGC,WAAO,KAAK,UAAL;AACP,SAAK,GAAL;AACC,YAAO,QAAQ,GAAR,GAAc,KAAK,GAAL,CAAS,OAAT,CAAiB,IAAjB,EAAuB,KAAvB,CAAd,GAA8C,GAA9C,GAAoD,GAApD,CADR;AADA,SAGK,IAAL;AACC,YAAO,QAAQ,IAAR,GAAe,KAAK,GAAL,CAAS,OAAT,CAAiB,IAAjB,EAAuB,MAAvB,CAAf,GAAgD,IAAhD,GAAuD,GAAvD,CADR;AAHA;AAMC,YAAO,QAAQ,KAAK,GAAL,CAAS,OAAT,CAAiB,WAAjB,EAA8B,MAA9B,CAAR,GAAgD,GAAhD,CADR;AALA,IAHD;AAtBA,EAD0C;CAA3C;;AAsCA,YAAY,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AACpC,KAAI,MAAM,4BAA4B,IAA5B,CAAN,CADgC;AAEpC,KAAG,KAAK,MAAL,EAAa;AACf,QAAM,KAAK,MAAL,GAAc,GAAd,CADS;EAAhB;AAGA,KAAG,KAAK,KAAL,EAAY;AACd,QAAM,MAAM,KAAK,KAAL,CADE;EAAf;AAGA,QAAO,GAAP,CARoC;CAAzB;;AAWZ,OAAO,OAAP,GAAiB,SAAjB","file":"stringifyValues-compiled.js","sourcesContent":["\"use strict\";\r\n\r\nvar cssesc = require(\"cssesc\");\r\n\r\nvar stringify;\r\n\r\nfunction escape(str, stringType) {\r\n\treturn cssesc(str, {\r\n\t\tquotes: stringType === \"\\\"\" ? \"double\" : \"single\"\r\n\t});\r\n}\r\n\r\nfunction stringifyWithoutBeforeAfter(tree) {\r\n\tswitch(tree.type) {\r\n\tcase \"values\":\r\n\t\treturn tree.nodes.map(stringify).join(\",\");\r\n\tcase \"value\":\r\n\t\treturn tree.nodes.map(stringify).join(\"\");\r\n\tcase \"item\":\r\n\t\treturn tree.name;\r\n\tcase \"nested-item\":\r\n\t\treturn tree.name + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\r\n\tcase \"invalid\":\r\n\t\treturn tree.value;\r\n\tcase \"comment\":\r\n\t\treturn \"/*\" + tree.content + \"*/\";\r\n\tcase \"string\":\r\n\t\tswitch(tree.stringType) {\r\n\t\tcase \"'\":\r\n\t\t\treturn \"'\" + escape(tree.value, \"'\") + \"'\";\r\n\t\tcase \"\\\"\":\r\n\t\t\treturn \"\\\"\" + escape(tree.value, \"\\\"\") + \"\\\"\";\r\n\t\t}\r\n\t\t/* istanbul ignore next */\r\n\t\tthrow new Error(\"Invalid stringType\");\r\n\tcase \"url\":\r\n\t\tvar start = \"url(\" + (tree.innerSpacingBefore || \"\");\r\n\t\tvar end = (tree.innerSpacingAfter || \"\") + \")\";\r\n\t\tswitch(tree.stringType) {\r\n\t\tcase \"'\":\r\n\t\t\treturn start + \"'\" + tree.url.replace(/'/g, \"\\\\'\") + \"'\" + end;\r\n\t\tcase \"\\\"\":\r\n\t\t\treturn start + \"\\\"\" + tree.url.replace(/\"/g, \"\\\\\\\"\") + \"\\\"\" + end;\r\n\t\tdefault:\r\n\t\t\treturn start + tree.url.replace(/(\"|'|\\))/g, \"\\\\$1\") + end;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nstringify = function stringify(tree) {\r\n\tvar str = stringifyWithoutBeforeAfter(tree);\r\n\tif(tree.before) {\r\n\t\tstr = tree.before + str;\r\n\t}\r\n\tif(tree.after) {\r\n\t\tstr = str + tree.after;\r\n\t}\r\n\treturn str;\r\n};\r\n\r\nmodule.exports = stringify;\r\n"]}