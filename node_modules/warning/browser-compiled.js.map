{"version":3,"sources":["browser.js"],"names":[],"mappings":";;;;;;;;;AASA;;;;;;;;;AASA,IAAI,UAAU,YAAW,EAAX;;AAEd,IAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,EAAuC;AACzC,YAAU,UAAS,SAAT,EAAoB,MAApB,EAA4B,IAA5B,EAAkC;AAC1C,QAAI,MAAM,UAAU,MAAV,CADgC;AAE1C,WAAO,IAAI,KAAJ,CAAU,MAAM,CAAN,GAAU,MAAM,CAAN,GAAU,CAApB,CAAjB,CAF0C;AAG1C,SAAK,IAAI,MAAM,CAAN,EAAS,MAAM,GAAN,EAAW,KAA7B,EAAoC;AAClC,WAAK,MAAM,CAAN,CAAL,GAAgB,UAAU,GAAV,CAAhB,CADkC;KAApC;AAGA,QAAI,WAAW,SAAX,EAAsB;AACxB,YAAM,IAAI,KAAJ,CACJ,8DACA,kBADA,CADF,CADwB;KAA1B;;AAOA,QAAI,OAAO,MAAP,GAAgB,EAAhB,IAAsB,WAAa,IAAb,CAAkB,MAAlB,CAAtB,EAAiD;AACnD,YAAM,IAAI,KAAJ,CACJ,iEACA,uDADA,GAC0D,MAD1D,CADF,CADmD;KAArD;;AAOA,QAAI,CAAC,SAAD,EAAY;AACd,UAAI,WAAW,CAAX,CADU;AAEd,UAAI,UAAU,cACZ,OAAO,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,eAAO,KAAK,UAAL,CAAP,CAD+B;OAAX,CADV,CAFA;AAMd,UAAI,OAAO,OAAP,KAAmB,WAAnB,EAAgC;AAClC,gBAAQ,KAAR,CAAc,OAAd,EADkC;OAApC;AAGA,UAAI;;;AAGF,cAAM,IAAI,KAAJ,CAAU,OAAV,CAAN,CAHE;OAAJ,CAIE,OAAM,CAAN,EAAS,EAAT;KAbJ;GApBQ,CAD+B;CAA3C;;AAuCA,OAAO,OAAP,GAAiB,OAAjB","file":"browser-compiled.js","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"]}