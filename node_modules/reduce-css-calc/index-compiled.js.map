{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AAGA,IAAI,WAAW,QAAQ,gBAAR,CAAX;AACJ,IAAI,qBAAqB,QAAQ,sBAAR,CAArB;;;;;AAKJ,IAAI,YAAY,GAAZ;AACJ,IAAI,iBAAiB,iCAAjB;;;;;AAKJ,IAAI,KAAJ;;;;;;;AAOA,OAAO,OAAP,GAAiB,aAAjB;;;;;;;AAOA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,gBAA9B,EAAgD;AAC9C,UAAQ,CAAR,CAD8C;AAE9C,qBAAmB,KAAK,GAAL,CAAS,EAAT,EAAa,qBAAqB,SAArB,GAAiC,CAAjC,GAAqC,gBAArC,CAAhC;;;;;;;;AAF8C,WAUrC,kBAAT,CAA6B,UAA7B,EAAyC,kBAAzC,EAA6D,IAA7D,EAAmE;AACjE,QAAI,UAAU,SAAV,EAAqB;AACvB,cAAQ,CAAR,CADuB;AAEvB,YAAM,IAAI,KAAJ,CAAU,6BAA6B,IAA7B,CAAhB,CAFuB;KAAzB;;AAKA,QAAI,eAAe,EAAf,EAAmB;AACrB,YAAM,IAAI,KAAJ,CAAU,qBAAqB,OAArB,GAA+B,IAA/B,GAAsC,wCAAtC,CAAhB,CADqB;KAAvB;;AAIA,iBAAa,yBAAyB,UAAzB,EAAqC,IAArC,CAAb,CAViE;;AAYjE,QAAI,QAAQ,qBAAqB,UAArB,CAAR;;;;AAZ6D,QAgB7D,MAAM,MAAN,GAAe,CAAf,IAAoB,WAAW,OAAX,CAAmB,MAAnB,IAA6B,CAAC,CAAD,EAAI;AACvD,aAAO,qBAAqB,GAArB,GAA2B,UAA3B,GAAwC,GAAxC,CADgD;KAAzD;;AAIA,QAAI,OAAO,MAAM,CAAN,KAAY,EAAZ,CApBsD;;AAsBjE,QAAI,SAAS,GAAT,EAAc;;AAEhB,mBAAa,WAAW,OAAX,CAAmB,cAAnB,EAAmC,UAAS,OAAT,EAAkB;AAChE,eAAO,WAAW,QAAQ,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAD,CAA5B,IAAmC,IAAnC,CADyD;OAAlB,CAAhD,CAFgB;KAAlB;;;AAtBiE,QA8B7D,aAAa,WAAW,OAAX,CAAmB,IAAI,MAAJ,CAAW,IAAX,EAAiB,IAAjB,CAAnB,EAA2C,EAA3C,CAAb,CA9B6D;AA+BjE,QAAI,MAAJ,CA/BiE;;AAiCjE,QAAI;AACF,eAAS,KAAK,UAAL,CAAT,CADE;KAAJ,CAGA,OAAO,CAAP,EAAU;AACR,aAAO,qBAAqB,GAArB,GAA2B,UAA3B,GAAwC,GAAxC,CADC;KAAV;;;AApCiE,QAyC7D,SAAS,GAAT,EAAc;AAChB,gBAAU,GAAV,CADgB;KAAlB;;;;AAzCiE,UA+CjE,GAAS,KAAK,KAAL,CAAW,SAAS,gBAAT,CAAX,GAAwC,gBAAxC;;;AA/CwD,QAkD7D,WAAW,CAAX,EAAc;AAChB,gBAAU,IAAV,CADgB;KAAlB;;AAIA,WAAO,MAAP,CAtDiE;GAAnE;;;;;;;;AAV8C,WAyErC,wBAAT,CAAkC,UAAlC,EAA8C,IAA9C,EAAoD;AAClD,QAAI,gBAAgB,EAAhB,CAD8C;AAElD,QAAI,mBAAmB,UAAnB,CAF8C;AAGlD,QAAI,OAAJ,CAHkD;AAIlD,WAAQ,UAAU,eAAe,IAAf,CAAoB,gBAApB,CAAV,EAAkD;AACxD,UAAI,QAAQ,CAAR,EAAW,KAAX,GAAmB,CAAnB,EAAsB;AACxB,yBAAiB,iBAAiB,SAAjB,CAA2B,CAA3B,EAA8B,QAAQ,CAAR,EAAW,KAAX,CAA/C,CADwB;OAA1B;;AAIA,UAAI,eAAe,SAAS,GAAT,EAAc,GAAd,EAAmB,iBAAiB,SAAjB,CAA2B,CAAC,CAAD,EAAI,KAAJ,CAA9C,CAAf,CALoD;AAMxD,UAAI,aAAa,IAAb,KAAsB,EAAtB,EAA0B;AAC5B,cAAM,IAAI,KAAJ,CAAU,MAAM,UAAN,GAAmB,wCAAnB,CAAhB,CAD4B;OAA9B;;AAIA,UAAI,YAAY,mBAAmB,aAAa,IAAb,EAAmB,EAAtC,EAA0C,IAA1C,CAAZ,CAVoD;;AAYxD,uBAAiB,aAAa,GAAb,GAAmB,SAAnB,CAZuC;AAaxD,yBAAmB,aAAa,IAAb,CAbqC;KAA1D;;AAgBA,WAAO,gBAAgB,gBAAhB,CApB2C;GAApD;;AAuBA,SAAO,mBAAmB,KAAnB,EAA0B,yBAA1B,EAAqD,kBAArD,CAAP,CAhG8C;CAAhD;;;;;;;;;AA0GA,SAAS,oBAAT,CAA8B,UAA9B,EAA0C;AACxC,MAAI,cAAc,EAAd,CADoC;AAExC,MAAI,uBAAuB,EAAvB,CAFoC;AAGxC,MAAI,YAAY,oBAAZ,CAHoC;AAIxC,MAAI,UAAU,UAAU,IAAV,CAAe,UAAf,CAAV,CAJoC;;AAMxC,SAAO,OAAP,EAAgB;AACd,QAAI,CAAC,OAAD,IAAY,CAAC,QAAQ,CAAR,CAAD,EAAa;AAC3B,eAD2B;KAA7B;;AAIA,QAAI,qBAAqB,OAArB,CAA6B,QAAQ,CAAR,EAAW,WAAX,EAA7B,MAA2D,CAAC,CAAD,EAAI;AACjE,kBAAY,IAAZ,CAAiB,QAAQ,CAAR,CAAjB,EADiE;AAEjE,2BAAqB,IAArB,CAA0B,QAAQ,CAAR,EAAW,WAAX,EAA1B,EAFiE;KAAnE;;AAKA,cAAU,UAAU,IAAV,CAAe,UAAf,CAAV,CAVc;GAAhB;;AAaA,SAAO,WAAP,CAnBwC;CAA1C","file":"index-compiled.js","sourcesContent":["/**\n * Module dependencies\n */\nvar balanced = require(\"balanced-match\")\nvar reduceFunctionCall = require(\"reduce-function-call\")\n\n/**\n * Constantes\n */\nvar MAX_STACK = 100 // should be enough for a single calc()...\nvar NESTED_CALC_RE = /(\\+|\\-|\\*|\\\\|[^a-z]|)(\\s*)(\\()/g\n\n/**\n * Global variables\n */\nvar stack\n\n/**\n * Expose reduceCSSCalc plugin\n *\n * @type {Function}\n */\nmodule.exports = reduceCSSCalc\n\n/**\n * Reduce CSS calc() in a string, whenever it's possible\n *\n * @param {String} value css input\n */\nfunction reduceCSSCalc(value, decimalPrecision) {\n  stack = 0\n  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision)\n\n  /**\n   * Evaluates an expression\n   *\n   * @param {String} expression\n   * @returns {String}\n   */\n  function evaluateExpression (expression, functionIdentifier, call) {\n    if (stack++ > MAX_STACK) {\n      stack = 0\n      throw new Error(\"Call stack overflow for \" + call)\n    }\n\n    if (expression === \"\") {\n      throw new Error(functionIdentifier + \"(): '\" + call + \"' must contain a non-whitespace string\")\n    }\n\n    expression = evaluateNestedExpression(expression, call)\n\n    var units = getUnitsInExpression(expression)\n\n    // If the expression contains multiple units or CSS variables,\n    // then let the expression be (i.e. browser calc())\n    if (units.length > 1 || expression.indexOf(\"var(\") > -1) {\n      return functionIdentifier + \"(\" + expression + \")\"\n    }\n\n    var unit = units[0] || \"\"\n\n    if (unit === \"%\") {\n      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):\n      expression = expression.replace(/\\b[0-9\\.]+%/g, function(percent) {\n        return parseFloat(percent.slice(0, -1)) * 0.01\n      })\n    }\n\n    // Remove units in expression:\n    var toEvaluate = expression.replace(new RegExp(unit, \"gi\"), \"\")\n    var result\n\n    try {\n      result = eval(toEvaluate)\n    }\n    catch (e) {\n      return functionIdentifier + \"(\" + expression + \")\"\n    }\n\n    // Transform back to a percentage result:\n    if (unit === \"%\") {\n      result *= 100\n    }\n\n    // adjust rounding shit\n    // (0.1 * 0.2 === 0.020000000000000004)\n    result = Math.round(result * decimalPrecision) / decimalPrecision\n\n    // We don't need units for zero values...\n    if (result !== 0) {\n      result += unit\n    }\n\n    return result\n  }\n\n  /**\n   * Evaluates nested expressions\n   *\n   * @param {String} expression\n   * @returns {String}\n   */\n  function evaluateNestedExpression(expression, call) {\n    var evaluatedPart = \"\"\n    var nonEvaluatedPart = expression\n    var matches\n    while ((matches = NESTED_CALC_RE.exec(nonEvaluatedPart))) {\n      if (matches[0].index > 0) {\n        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index)\n      }\n\n      var balancedExpr = balanced(\"(\", \")\", nonEvaluatedPart.substring([0].index))\n      if (balancedExpr.body === \"\") {\n        throw new Error(\"'\" + expression + \"' must contain a non-whitespace string\")\n      }\n\n      var evaluated = evaluateExpression(balancedExpr.body, \"\", call)\n\n      evaluatedPart += balancedExpr.pre + evaluated\n      nonEvaluatedPart = balancedExpr.post\n    }\n\n    return evaluatedPart + nonEvaluatedPart\n  }\n\n  return reduceFunctionCall(value, /((?:\\-[a-z]+\\-)?calc)\\(/, evaluateExpression)\n}\n\n/**\n * Checks what units are used in an expression\n *\n * @param {String} expression\n * @returns {Array}\n */\n\nfunction getUnitsInExpression(expression) {\n  var uniqueUnits = []\n  var uniqueLowerCaseUnits = []\n  var unitRegEx = /[\\.0-9]([%a-z]+)/gi\n  var matches = unitRegEx.exec(expression)\n\n  while (matches) {\n    if (!matches || !matches[1]) {\n      continue\n    }\n\n    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {\n      uniqueUnits.push(matches[1])\n      uniqueLowerCaseUnits.push(matches[1].toLowerCase())\n    }\n\n    matches = unitRegEx.exec(expression)\n  }\n\n  return uniqueUnits\n}\n"]}