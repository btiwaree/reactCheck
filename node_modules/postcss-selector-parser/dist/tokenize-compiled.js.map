{"version":3,"sources":["tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.default = tokenize;\nvar singleQuote = 39,\n    doubleQuote = 34,\n    backslash = 92,\n    slash = 47,\n    newline = 10,\n    space = 32,\n    feed = 12,\n    tab = 9,\n    cr = 13,\n    plus = 43,\n    gt = 62,\n    tilde = 126,\n    pipe = 124,\n    comma = 44,\n    openBracket = 40,\n    closeBracket = 41,\n    openSq = 91,\n    closeSq = 93,\n    semicolon = 59,\n    asterisk = 42,\n    colon = 58,\n    at = 64,\n    atEnd = /[ \\n\\t\\r\\{\\(\\)'\"\\\\;/]/g,\n    wordEnd = /[ \\n\\t\\r\\(\\)\\*:;@!'\"\\+\\|~>,\\[\\]\\\\]|\\/(?=\\*)/g;\n\nfunction tokenize(input) {\n    var tokens = [];\n    var css = input.css.valueOf();\n\n    var code = undefined,\n        next = undefined,\n        quote = undefined,\n        lines = undefined,\n        last = undefined,\n        content = undefined,\n        escape = undefined,\n        nextLine = undefined,\n        nextOffset = undefined,\n        escaped = undefined,\n        escapePos = undefined;\n\n    var length = css.length;\n    var offset = -1;\n    var line = 1;\n    var pos = 0;\n\n    var unclosed = function unclosed(what, end) {\n        if (input.safe) {\n            css += end;\n            next = css.length - 1;\n        } else {\n            throw input.error('Unclosed ' + what, line, pos - offset, pos);\n        }\n    };\n\n    while (pos < length) {\n        code = css.charCodeAt(pos);\n\n        if (code === newline) {\n            offset = pos;\n            line += 1;\n        }\n\n        switch (code) {\n            case newline:\n            case space:\n            case tab:\n            case cr:\n            case feed:\n                next = pos;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                    if (code === newline) {\n                        offset = next;\n                        line += 1;\n                    }\n                } while (code === space || code === newline || code === tab || code === cr || code === feed);\n\n                tokens.push(['space', css.slice(pos, next), line, pos - offset, pos]);\n                pos = next - 1;\n                break;\n\n            case plus:\n            case gt:\n            case tilde:\n            case pipe:\n                next = pos;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                } while (code === plus || code === gt || code === tilde || code === pipe);\n                tokens.push(['combinator', css.slice(pos, next), line, pos - offset, pos]);\n                pos = next - 1;\n                break;\n\n            case asterisk:\n                tokens.push(['*', '*', line, pos - offset, pos]);\n                break;\n\n            case comma:\n                tokens.push([',', ',', line, pos - offset, pos]);\n                break;\n\n            case openSq:\n                tokens.push(['[', '[', line, pos - offset, pos]);\n                break;\n\n            case closeSq:\n                tokens.push([']', ']', line, pos - offset, pos]);\n                break;\n\n            case colon:\n                tokens.push([':', ':', line, pos - offset, pos]);\n                break;\n\n            case semicolon:\n                tokens.push([';', ';', line, pos - offset, pos]);\n                break;\n\n            case openBracket:\n                tokens.push(['(', '(', line, pos - offset, pos]);\n                break;\n\n            case closeBracket:\n                tokens.push([')', ')', line, pos - offset, pos]);\n                break;\n\n            case singleQuote:\n            case doubleQuote:\n                quote = code === singleQuote ? \"'\" : '\"';\n                next = pos;\n                do {\n                    escaped = false;\n                    next = css.indexOf(quote, next + 1);\n                    if (next === -1) {\n                        unclosed('quote', quote);\n                    }\n                    escapePos = next;\n                    while (css.charCodeAt(escapePos - 1) === backslash) {\n                        escapePos -= 1;\n                        escaped = !escaped;\n                    }\n                } while (escaped);\n\n                tokens.push(['string', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                pos = next;\n                break;\n\n            case at:\n                atEnd.lastIndex = pos + 1;\n                atEnd.test(css);\n                if (atEnd.lastIndex === 0) {\n                    next = css.length - 1;\n                } else {\n                    next = atEnd.lastIndex - 2;\n                }\n                tokens.push(['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                pos = next;\n                break;\n\n            case backslash:\n                next = pos;\n                escape = true;\n                while (css.charCodeAt(next + 1) === backslash) {\n                    next += 1;\n                    escape = !escape;\n                }\n                code = css.charCodeAt(next + 1);\n                if (escape && code !== slash && code !== space && code !== newline && code !== tab && code !== cr && code !== feed) {\n                    next += 1;\n                }\n                tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                pos = next;\n                break;\n\n            default:\n                if (code === slash && css.charCodeAt(pos + 1) === asterisk) {\n                    next = css.indexOf('*/', pos + 2) + 1;\n                    if (next === 0) {\n                        unclosed('comment', '*/');\n                    }\n\n                    content = css.slice(pos, next + 1);\n                    lines = content.split('\\n');\n                    last = lines.length - 1;\n\n                    if (last > 0) {\n                        nextLine = line + last;\n                        nextOffset = next - lines[last].length;\n                    } else {\n                        nextLine = line;\n                        nextOffset = offset;\n                    }\n\n                    tokens.push(['comment', content, line, pos - offset, nextLine, next - nextOffset, pos]);\n\n                    offset = nextOffset;\n                    line = nextLine;\n                    pos = next;\n                } else {\n                    wordEnd.lastIndex = pos + 1;\n                    wordEnd.test(css);\n                    if (wordEnd.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = wordEnd.lastIndex - 2;\n                    }\n\n                    tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                    pos = next;\n                }\n\n                break;\n        }\n\n        pos++;\n    }\n\n    return tokens;\n}\nmodule.exports = exports['default'];"]}