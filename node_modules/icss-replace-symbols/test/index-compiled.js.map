{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAEA,OAAO,OAAP,MAAoB,SAApB;AACA,OAAO,MAAP,MAAmB,QAAnB;;AAEA,OAAO,cAAP,MAA2B,QAA3B;;AAEA,MAAM,OAAO,CAAC,KAAD,EAAQ,YAAR,EAAsB,QAAtB,KAAmC;AAC9C,MAAI,YAAY,QAAQ,CAAC,OAAO,eAAe,GAAf,EAAoB,YAApB,CAAP,CAAT,CAAZ,CAD0C;AAE9C,SAAO,KAAP,CAAa,UAAU,OAAV,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B,QAA3C,EAF8C;CAAnC;;AAKb,SAAS,iBAAT,EAA4B,MAAM;AAChC,KAAG,mCAAH,EAAwC,MAAM;AAC5C,SAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAD4C;GAAN,CAAxC,CADgC;;AAKhC,KAAG,iDAAH,EAAsD,MAAM;AAC1D,SAAK,qBAAL,EAA4B,EAA5B,EAAgC,qBAAhC,EAD0D;GAAN,CAAtD,CALgC;;AAShC,KAAG,+BAAH,EAAoC,MAAM;AACxC,SAAK,qBAAL,EAA4B,EAAC,KAAK,KAAL,EAA7B,EAA0C,qBAA1C,EADwC;GAAN,CAApC,CATgC;;AAahC,KAAG,kCAAH,EAAuC,MAAM;AAC3C,SAAK,qBAAL,EAA4B,EAAC,OAAO,YAAP,EAA7B,EAAmD,qBAAnD,EAD2C;GAAN,CAAvC,CAbgC;;AAiBhC,KAAG,kCAAH,EAAuC,MAAM;AAC3C,SAAK,qBAAL,EAA4B,EAAC,KAAK,MAAL,EAA7B,EAA2C,sBAA3C,EAD2C;GAAN,CAAvC,CAjBgC;;AAqBhC,KAAG,iDAAH,EAAsD,MAAM;AAC1D,SAAK,oCAAL,EAA2C,EAAC,KAAK,MAAL,EAA5C,EAA0D,qCAA1D,EAD0D;GAAN,CAAtD,CArBgC;;AAyBhC,KAAG,0DAAH,EAA+D,MAAM;AACnE,SAAK,iDAAL,EACE,EAAC,KAAK,KAAL,EAAY,MAAM,KAAN,EAAa,MAAM,KAAN,EAAa,QAAQ,KAAR,EAAe,OAAO,KAAP,EADxD,EAEE,0CAFF,EADmE;GAAN,CAA/D,CAzBgC;;AA+BhC,KAAG,mEAAH,EAAwE,MAAM;AAC5E,SAAK,iDAAL,EACE,EAAC,OAAO,MAAP,EAAe,SAAS,MAAT,EAAiB,OAAO,SAAP,EAAkB,WAAW,KAAX,EAAkB,QAAQ,OAAR,EADvE,EAEE,kDAFF,EAD4E;GAAN,CAAxE,CA/BgC;;AAqChC,KAAG,qCAAH,EAA0C,MAAM;AAC9C,SAAK,4BAAL,EACE,EAAC,SAAS,QAAT,EADH,EAEE,6BAFF,EAD8C;GAAN,CAA1C,CArCgC;;AA2ChC,KAAG,oCAAH,EAAyC,MAAM;AAC7C,SAAK,mDAAL,EACE,EAAC,KAAK,OAAL,EAAc,MAAM,OAAN,EADjB,EAEE,mDAFF,EAD6C;GAAN,CAAzC,CA3CgC;;AAiDhC,KAAG,kCAAH,EAAuC,MAAM;AAC3C,SAAK,uCAAL,EACE,EAAC,KAAK,MAAL,EAAa,MAAM,OAAN,EADhB,EAEE,yCAFF,EAD2C;GAAN,CAAvC,CAjDgC;;AAuDhC,KAAG,8BAAH,EAAmC,MAAM;AACvC,SAAK,uBAAL,EACE,EAAC,OAAO,WAAP,EAAoB,MAAM,OAAN,EADvB,EAEE,2BAFF,EADuC;AAIvC,SAAK,uBAAL,EACE,EAAC,OAAO,YAAP,EAAqB,MAAM,OAAN,EADxB,EAEE,4BAFF,EAJuC;GAAN,CAAnC,CAvDgC;;AAgEhC,KAAG,6BAAH,EAAkC,MAAM;AACtC,SAAK,sCAAL,EAA6C,EAAC,OAAO,oBAAP,EAA9C,EAA4E,mDAA5E,EADsC;GAAN,CAAlC,CAhEgC;CAAN,CAA5B","file":"index-compiled.js","sourcesContent":["/* global describe, it */\n\nimport postcss from 'postcss'\nimport assert from 'assert'\n\nimport replaceSymbols from '../src'\n\nconst test = (input, translations, expected) => {\n  let processor = postcss([css => replaceSymbols(css, translations)])\n  assert.equal(processor.process(input).css, expected)\n}\n\ndescribe('replace-symbols', () => {\n  it('should return empty CSS unchanged', () => {\n    test('', {}, '')\n  })\n\n  it('should not change unless there are translations', () => {\n    test('.foo { color: red }', {}, '.foo { color: red }')\n  })\n\n  it('should not change class names', () => {\n    test('.foo { color: red }', {foo: 'bar'}, '.foo { color: red }')\n  })\n\n  it('should not change property names', () => {\n    test('.foo { color: red }', {color: 'background'}, '.foo { color: red }')\n  })\n\n  it('should change declaration values', () => {\n    test('.foo { color: red }', {red: 'blue'}, '.foo { color: blue }')\n  })\n\n  it('should change symbols within declaration values', () => {\n    test('.foo { box-shadow: 0 0 0 4px red }', {red: 'blue'}, '.foo { box-shadow: 0 0 0 4px blue }')\n  })\n\n  it('should change multiple symbols within declaration values', () => {\n    test('.foo { box-shadow: top left blur spread color }',\n      {top: '1px', left: '2px', blur: '3px', spread: '4px', color: 'red'},\n      '.foo { box-shadow: 1px 2px 3px 4px red }')\n  })\n\n  it('should change complex symbols, if you feel like trolling yourself', () => {\n    test('.foo { box-shadow: 1px 0.5em 3px $sass-a #f00 }',\n      {'1px': '1rem', '0.5em': '10px', '3px': '$sass-b', '$sass-a': '4px', '#f00': 'green' },\n      '.foo { box-shadow: 1rem 10px $sass-b 4px green }')\n  })\n\n  it('should be able to rewrite variables', () => {\n    test('.foo { color: var(--red) }',\n      {'--red': '--blue' },\n      '.foo { color: var(--blue) }')\n  })\n\n  it('should not replace half a variable', () => {\n    test('.foo { color: colors.red; background: red.blue; }',\n      {red: 'green', blue: 'white' },\n      '.foo { color: colors.red; background: red.blue; }')\n  })\n\n  it('should not replace a replacement', () => {\n    test('.foo { background: blue; color: red }',\n      {red: 'blue', blue: 'green'},\n      '.foo { background: green; color: blue }')\n  })\n\n  it('should not get trolled by me', () => {\n    test('.foo { color: white }',\n      {white: 'lightblue', blue: 'green'},\n      '.foo { color: lightblue }')\n    test('.foo { color: white }',\n      {white: 'light blue', blue: 'green'},\n      '.foo { color: light blue }')\n  })\n\n  it('should change media queries', () => {\n    test('@media small { .foo { color: red } }', {small: '(max-width: 599px)'}, '@media (max-width: 599px) { .foo { color: red } }')\n  })\n})\n\n"]}