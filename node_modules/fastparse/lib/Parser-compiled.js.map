{"version":3,"sources":["Parser.js"],"names":[],"mappings":"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","file":"Parser-compiled.js","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\nfunction ignoreFunction() {}\r\n\r\nfunction createReturningFunction(value) {\r\n\treturn function() {\r\n\t\treturn value;\r\n\t};\r\n}\r\n\r\nfunction Parser(states) {\r\n\tthis.states = this.compileStates(states);\r\n}\r\n\r\nParser.prototype.compileStates = function(states) {\r\n\tvar result = {};\r\n\tObject.keys(states).forEach(function(name) {\r\n\t\tresult[name] = this.compileState(states[name], states);\r\n\t}, this);\r\n\treturn result;\r\n};\r\n\r\nParser.prototype.compileState = function(state, states) {\r\n\tvar regExps = [];\r\n\tfunction iterator(str, value) {\r\n\t\tregExps.push({\r\n\t\t\tgroups: Parser.getGroupCount(str),\r\n\t\t\tregExp: str,\r\n\t\t\tvalue: value\r\n\t\t});\r\n\t}\r\n\tfunction processState(statePart) {\r\n\t\tif(Array.isArray(statePart)) {\r\n\t\t\tstatePart.forEach(processState);\r\n\t\t} else if(typeof statePart === \"object\") {\r\n\t\t\tObject.keys(statePart).forEach(function(key) {\r\n\t\t\t\titerator(key, statePart[key]);\r\n\t\t\t});\r\n\t\t} else if(typeof statePart === \"string\") {\r\n\t\t\tprocessState(states[statePart]);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unexpected 'state' format\");\r\n\t\t}\r\n\t}\r\n\tprocessState(state);\r\n\tvar total = regExps.map(function(r) {\r\n\t\treturn \"(\" + r.regExp + \")\";\r\n\t}).join(\"|\");\r\n\tvar actions = [];\r\n\tvar pos = 1;\r\n\tregExps.forEach(function(r) {\r\n\t\tvar fn;\r\n\t\tif(typeof r.value === \"function\") {\r\n\t\t\tfn = r.value;\r\n\t\t} else if(typeof r.value === \"string\") {\r\n\t\t\tfn = createReturningFunction(r.value);\r\n\t\t} else {\r\n\t\t\tfn = ignoreFunction;\r\n\t\t}\r\n\t\tactions.push({\r\n\t\t\tname: r.regExp,\r\n\t\t\tfn: fn,\r\n\t\t\tpos: pos,\r\n\t\t\tpos2: pos + r.groups + 1\r\n\t\t});\r\n\t\tpos += r.groups + 1;\r\n\t});\r\n\treturn {\r\n\t\tregExp: new RegExp(total, \"g\"),\r\n\t\tactions: actions\r\n\t};\r\n};\r\n\r\nParser.getGroupCount = function(regExpStr) {\r\n\treturn new RegExp(\"(\" + regExpStr + \")|^$\").exec(\"\").length - 2;\r\n};\r\n\r\nParser.prototype.parse = function(initialState, string, context) {\r\n\tcontext = context || {};\r\n\tvar currentState = initialState;\r\n\tvar currentIndex = 0;\r\n\tfor(;;) {\r\n\t\tvar state = this.states[currentState];\r\n\t\tvar regExp = state.regExp;\r\n\t\tregExp.lastIndex = currentIndex;\r\n\t\tvar match = regExp.exec(string);\r\n\t\tif(!match) return context;\r\n\t\tvar actions = state.actions;\r\n\t\tcurrentIndex = state.regExp.lastIndex;\r\n\t\tfor(var i = 0; i < actions.length; i++) {\r\n\t\t\tvar action = actions[i];\r\n\t\t\tif(match[action.pos]) {\r\n\t\t\t\tvar ret = action.fn.apply(context, Array.prototype.slice.call(match, action.pos, action.pos2).concat([state.regExp.lastIndex - match[0].length, match[0].length]));\r\n\t\t\t\tif(ret) {\r\n\t\t\t\t\tif(!(ret in this.states))\r\n\t\t\t\t\t\tthrow new Error(\"State '\" + ret + \"' doesn't exist\");\r\n\t\t\t\t\tcurrentState = ret;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = Parser;\r\n"]}