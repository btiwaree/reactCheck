{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _commentRemover = require('./lib/commentRemover');\n\nvar _commentRemover2 = _interopRequireDefault(_commentRemover);\n\nvar _commentParser = require('./lib/commentParser');\n\nvar _commentParser2 = _interopRequireDefault(_commentParser);\n\nvar _postcss = require('postcss');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar space = _postcss.list.space;\n\nexports.default = (0, _postcss.plugin)('postcss-discard-comments', function () {\n    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var remover = new _commentRemover2.default(opts);\n\n    function matchesComments(source) {\n        return (0, _commentParser2.default)(source).filter(function (node) {\n            return node.type === 'comment';\n        });\n    }\n\n    function replaceComments(source) {\n        var separator = arguments.length <= 1 || arguments[1] === undefined ? ' ' : arguments[1];\n\n        if (!source) {\n            return source;\n        }\n        var parsed = (0, _commentParser2.default)(source).reduce(function (value, node) {\n            if (node.type !== 'comment') {\n                return value + node.value;\n            }\n            if (remover.canRemove(node.value)) {\n                return value + separator;\n            }\n            return value + '/*' + node.value + '*/';\n        }, '');\n\n        return space(parsed).join(' ');\n    }\n\n    return function (css) {\n        css.walk(function (node) {\n            if (node.type === 'comment' && remover.canRemove(node.text)) {\n                node.remove();\n                return;\n            }\n\n            if (node.raws.between) {\n                node.raws.between = replaceComments(node.raws.between);\n            }\n\n            if (node.type === 'decl') {\n                if (node.raws.value && node.raws.value.raw) {\n                    if (node.raws.value.value === node.value) {\n                        node.value = replaceComments(node.raws.value.raw);\n                    } else {\n                        node.value = replaceComments(node.value);\n                    }\n                    node.raws.value = null;\n                }\n                if (node.raws.important) {\n                    node.raws.important = replaceComments(node.raws.important);\n                    var b = matchesComments(node.raws.important);\n                    node.raws.important = b.length ? node.raws.important : '!important';\n                }\n                return;\n            }\n\n            if (node.type === 'rule' && node.raws.selector && node.raws.selector.raw) {\n                node.raws.selector.raw = replaceComments(node.raws.selector.raw, '');\n                return;\n            }\n\n            if (node.type === 'atrule') {\n                if (node.raws.afterName) {\n                    var commentsReplaced = replaceComments(node.raws.afterName);\n                    if (!commentsReplaced.length) {\n                        node.raws.afterName = commentsReplaced + ' ';\n                    } else {\n                        node.raws.afterName = ' ' + commentsReplaced + ' ';\n                    }\n                }\n                if (node.raws.params && node.raws.params.raw) {\n                    node.raws.params.raw = replaceComments(node.raws.params.raw);\n                }\n            }\n        });\n    };\n});\nmodule.exports = exports['default'];"]}