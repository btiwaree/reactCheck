{"version":3,"sources":["bitreader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAI,UAAU,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,CAAV;;;AAGJ,IAAI,YAAY,UAAS,MAAT,EAAiB;AAC/B,OAAK,MAAL,GAAc,MAAd,CAD+B;AAE/B,OAAK,SAAL,GAAiB,CAAjB,CAF+B;AAG/B,OAAK,OAAL,GAAe,CAAf,CAH+B;AAI/B,OAAK,OAAL,GAAe,KAAf,CAJ+B;CAAjB;;AAOhB,UAAU,SAAV,CAAoB,WAApB,GAAkC,YAAW;AAC3C,MAAI,CAAC,KAAK,OAAL,EAAc;AACjB,SAAK,OAAL,GAAe,KAAK,MAAL,CAAY,QAAZ,EAAf,CADiB;AAEjB,SAAK,OAAL,GAAe,IAAf,CAFiB;GAAnB;CADgC;;;AAQlC,UAAU,SAAV,CAAoB,IAApB,GAA2B,UAAS,IAAT,EAAe;AACxC,MAAI,SAAS,CAAT,CADoC;AAExC,SAAO,OAAO,CAAP,EAAU;AACf,SAAK,WAAL,GADe;AAEf,QAAI,YAAY,IAAI,KAAK,SAAL;;AAFL,QAIX,QAAQ,SAAR,EAAmB;AACrB,iBAAW,SAAX,CADqB;AAErB,gBAAU,QAAQ,SAAR,IAAqB,KAAK,OAAL,CAFV;AAGrB,WAAK,OAAL,GAAe,KAAf,CAHqB;AAIrB,WAAK,SAAL,GAAiB,CAAjB,CAJqB;AAKrB,cAAQ,SAAR,CALqB;KAAvB,MAMO;AACL,iBAAW,IAAX,CADK;AAEL,UAAI,QAAQ,YAAY,IAAZ,CAFP;AAGL,gBAAU,CAAC,KAAK,OAAL,GAAgB,QAAQ,IAAR,KAAiB,KAAjB,CAAjB,IAA6C,KAA7C,CAHL;AAIL,WAAK,SAAL,IAAkB,IAAlB,CAJK;AAKL,aAAO,CAAP,CALK;KANP;GAJF;AAkBA,SAAO,MAAP,CApBwC;CAAf;;;AAwB3B,UAAU,SAAV,CAAoB,IAApB,GAA2B,UAAS,GAAT,EAAc;AACvC,MAAI,QAAQ,MAAM,CAAN,CAD2B;AAEvC,MAAI,SAAS,CAAC,MAAM,KAAN,CAAD,GAAgB,CAAhB,CAF0B;AAGvC,OAAK,SAAL,GAAiB,KAAjB,CAHuC;AAIvC,OAAK,MAAL,CAAY,IAAZ,CAAiB,MAAjB,EAJuC;AAKvC,OAAK,OAAL,GAAe,KAAf,CALuC;CAAd;;;AAS3B,UAAU,SAAV,CAAoB,EAApB,GAAyB,YAAW;AAClC,MAAI,MAAM,IAAI,MAAJ,CAAW,CAAX,CAAN;MAAqB,CAAzB,CADkC;AAElC,OAAK,IAAI,CAAJ,EAAO,IAAI,IAAI,MAAJ,EAAY,GAA5B,EAAiC;AAC/B,QAAI,CAAJ,IAAS,KAAK,IAAL,CAAU,CAAV,CAAT,CAD+B;GAAjC;AAGA,SAAO,IAAI,QAAJ,CAAa,KAAb,CAAP,CALkC;CAAX;;AAQzB,OAAO,OAAP,GAAiB,SAAjB","file":"bitreader-compiled.js","sourcesContent":["/*\nnode-bzip - a pure-javascript Node.JS module for decoding bzip2 data\n\nCopyright (C) 2012 Eli Skeggs\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, see\nhttp://www.gnu.org/licenses/lgpl-2.1.html\n\nAdapted from bzip2.js, copyright 2011 antimatter15 (antimatter15@gmail.com).\n\nBased on micro-bunzip by Rob Landley (rob@landley.net).\n\nBased on bzip2 decompression code by Julian R Seward (jseward@acm.org),\nwhich also acknowledges contributions by Mike Burrows, David Wheeler,\nPeter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,\nRobert Sedgewick, and Jon L. Bentley.\n*/\n\nvar BITMASK = [0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];\n\n// offset in bytes\nvar BitReader = function(stream) {\n  this.stream = stream;\n  this.bitOffset = 0;\n  this.curByte = 0;\n  this.hasByte = false;\n};\n\nBitReader.prototype._ensureByte = function() {\n  if (!this.hasByte) {\n    this.curByte = this.stream.readByte();\n    this.hasByte = true;\n  }\n};\n\n// reads bits from the buffer\nBitReader.prototype.read = function(bits) {\n  var result = 0;\n  while (bits > 0) {\n    this._ensureByte();\n    var remaining = 8 - this.bitOffset;\n    // if we're in a byte\n    if (bits >= remaining) {\n      result <<= remaining;\n      result |= BITMASK[remaining] & this.curByte;\n      this.hasByte = false;\n      this.bitOffset = 0;\n      bits -= remaining;\n    } else {\n      result <<= bits;\n      var shift = remaining - bits;\n      result |= (this.curByte & (BITMASK[bits] << shift)) >> shift;\n      this.bitOffset += bits;\n      bits = 0;\n    }\n  }\n  return result;\n};\n\n// seek to an arbitrary point in the buffer (expressed in bits)\nBitReader.prototype.seek = function(pos) {\n  var n_bit = pos % 8;\n  var n_byte = (pos - n_bit) / 8;\n  this.bitOffset = n_bit;\n  this.stream.seek(n_byte);\n  this.hasByte = false;\n};\n\n// reads 6 bytes worth of data using the read method\nBitReader.prototype.pi = function() {\n  var buf = new Buffer(6), i;\n  for (i = 0; i < buf.length; i++) {\n    buf[i] = this.read(8);\n  }\n  return buf.toString('hex');\n};\n\nmodule.exports = BitReader;\n"]}