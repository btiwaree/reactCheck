{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var conversions = require(\"./conversions\");\n\nvar convert = function() {\n   return new Converter();\n}\n\nfor (var func in conversions) {\n  // export Raw versions\n  convert[func + \"Raw\"] =  (function(func) {\n    // accept array or plain args\n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      return conversions[func](arg);\n    }\n  })(func);\n\n  var pair = /(\\w+)2(\\w+)/.exec(func),\n      from = pair[1],\n      to = pair[2];\n\n  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n  convert[from] = convert[from] || {};\n\n  convert[from][to] = convert[func] = (function(func) { \n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      \n      var val = conversions[func](arg);\n      if (typeof val == \"string\" || val === undefined)\n        return val; // keyword\n\n      for (var i = 0; i < val.length; i++)\n        val[i] = Math.round(val[i]);\n      return val;\n    }\n  })(func);\n}\n\n\n/* Converter does lazy conversion and caching */\nvar Converter = function() {\n   this.convs = {};\n};\n\n/* Either get the values for a space or\n  set the values for a space, depending on args */\nConverter.prototype.routeSpace = function(space, args) {\n   var values = args[0];\n   if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n   }\n   // color.rgb(10, 10, 10)\n   if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);        \n   }\n\n   return this.setValues(space, values);\n};\n  \n/* Set the values for a space, invalidating cache */\nConverter.prototype.setValues = function(space, values) {\n   this.space = space;\n   this.convs = {};\n   this.convs[space] = values;\n   return this;\n};\n\n/* Get the values for a space. If there's already\n  a conversion for the space, fetch it, otherwise\n  compute it */\nConverter.prototype.getValues = function(space) {\n   var vals = this.convs[space];\n   if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n\n      this.convs[space] = vals;\n   }\n  return vals;\n};\n\n[\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function(space) {\n   Converter.prototype[space] = function(vals) {\n      return this.routeSpace(space, arguments);\n   }\n});\n\nmodule.exports = convert;"]}