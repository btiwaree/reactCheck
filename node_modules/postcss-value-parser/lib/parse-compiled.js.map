{"version":3,"sources":["parse.js"],"names":[],"mappings":"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","file":"parse-compiled.js","sourcesContent":["var openParentheses = '('.charCodeAt(0);\nvar closeParentheses = ')'.charCodeAt(0);\nvar singleQuote = '\\''.charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = '\\\\'.charCodeAt(0);\nvar slash = '/'.charCodeAt(0);\nvar comma = ','.charCodeAt(0);\nvar colon = ':'.charCodeAt(0);\nvar star = '*'.charCodeAt(0);\n\nmodule.exports = function (input) {\n    var tokens = [];\n    var value = input;\n\n    var next, quote, prev, token, escape, escapePos, whitespacePos;\n    var pos = 0;\n    var code = value.charCodeAt(pos);\n    var max = value.length;\n    var stack = [{ nodes: tokens }];\n    var balanced = 0;\n    var parent;\n\n    var name = '';\n    var before = '';\n    var after = '';\n\n    while (pos < max) {\n        // Whitespaces\n        if (code <= 32) {\n            next = pos;\n            do {\n                next += 1;\n                code = value.charCodeAt(next);\n            } while (code <= 32);\n            token = value.slice(pos, next);\n\n            prev = tokens[tokens.length - 1];\n            if (code === closeParentheses && balanced) {\n                after = token;\n            } else if (prev && prev.type === 'div') {\n                prev.after = token;\n            } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star) {\n                before = token;\n            } else {\n                tokens.push({\n                    type: 'space',\n                    sourceIndex: pos,\n                    value: token\n                });\n            }\n\n            pos = next;\n\n        // Quotes\n        } else if (code === singleQuote || code === doubleQuote) {\n            next = pos;\n            quote = code === singleQuote ? '\\'' : '\"';\n            token = {\n                type: 'string',\n                sourceIndex: pos,\n                quote: quote\n            };\n            do {\n                escape = false;\n                next = value.indexOf(quote, next + 1);\n                if (~next) {\n                    escapePos = next;\n                    while (value.charCodeAt(escapePos - 1) === backslash) {\n                        escapePos -= 1;\n                        escape = !escape;\n                    }\n                } else {\n                    value += quote;\n                    next = value.length - 1;\n                    token.unclosed = true;\n                }\n            } while (escape);\n            token.value = value.slice(pos + 1, next);\n\n            tokens.push(token);\n            pos = next + 1;\n            code = value.charCodeAt(pos);\n\n        // Comments\n        } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n            token = {\n                type: 'comment',\n                sourceIndex: pos\n            };\n\n            next = value.indexOf('*/', pos);\n            if (next === -1) {\n                token.unclosed = true;\n                next = value.length;\n            }\n\n            token.value = value.slice(pos + 2, next);\n            tokens.push(token);\n\n            pos = next + 2;\n            code = value.charCodeAt(pos);\n\n        // Dividers\n        } else if (code === slash || code === comma || code === colon) {\n            token = value[pos];\n\n            tokens.push({\n                type: 'div',\n                sourceIndex: pos - before.length,\n                value: token,\n                before: before,\n                after: ''\n            });\n            before = '';\n\n            pos += 1;\n            code = value.charCodeAt(pos);\n\n        // Open parentheses\n        } else if (openParentheses === code) {\n            // Whitespaces after open parentheses\n            next = pos;\n            do {\n                next += 1;\n                code = value.charCodeAt(next);\n            } while (code <= 32);\n            token = {\n                type: 'function',\n                sourceIndex: pos - name.length,\n                value: name,\n                before: value.slice(pos + 1, next)\n            };\n            pos = next;\n\n            if (name === 'url' && code !== singleQuote && code !== doubleQuote) {\n                next -= 1;\n                do {\n                    escape = false;\n                    next = value.indexOf(')', next + 1);\n                    if (~next) {\n                        escapePos = next;\n                        while (value.charCodeAt(escapePos - 1) === backslash) {\n                            escapePos -= 1;\n                            escape = !escape;\n                        }\n                    } else {\n                        value += ')';\n                        next = value.length - 1;\n                        token.unclosed = true;\n                    }\n                } while (escape);\n                // Whitespaces before closed\n                whitespacePos = next;\n                do {\n                    whitespacePos -= 1;\n                    code = value.charCodeAt(whitespacePos);\n                } while (code <= 32);\n                if (pos !== whitespacePos + 1) {\n                    token.nodes = [{\n                        type: 'word',\n                        sourceIndex: pos,\n                        value: value.slice(pos, whitespacePos + 1)\n                    }];\n                } else {\n                    token.nodes = [];\n                }\n                if (token.unclosed && whitespacePos + 1 !== next) {\n                    token.after = '';\n                    token.nodes.push({\n                        type: 'space',\n                        sourceIndex: whitespacePos + 1,\n                        value: value.slice(whitespacePos + 1, next)\n                    });\n                } else {\n                    token.after = value.slice(whitespacePos + 1, next);\n                }\n                pos = next + 1;\n                code = value.charCodeAt(pos);\n                tokens.push(token);\n            } else {\n                balanced += 1;\n                token.after = '';\n                tokens.push(token);\n                stack.push(token);\n                tokens = token.nodes = [];\n                parent = token;\n            }\n            name = '';\n\n        // Close parentheses\n        } else if (closeParentheses === code && balanced) {\n            pos += 1;\n            code = value.charCodeAt(pos);\n\n            parent.after = after;\n            after = '';\n            balanced -= 1;\n            stack.pop();\n            parent = stack[balanced];\n            tokens = parent.nodes;\n\n        // Words\n        } else {\n            next = pos;\n            do {\n                if (code === backslash) {\n                    next += 1;\n                }\n                next += 1;\n                code = value.charCodeAt(next);\n            } while (next < max && !(\n                code <= 32 ||\n                code === singleQuote ||\n                code === doubleQuote ||\n                code === comma ||\n                code === colon ||\n                code === slash ||\n                code === openParentheses ||\n                code === closeParentheses && balanced\n            ));\n            token = value.slice(pos, next);\n\n            if (openParentheses === code) {\n                name = token;\n            } else {\n                tokens.push({\n                    type: 'word',\n                    sourceIndex: pos,\n                    value: token\n                });\n            }\n\n            pos = next;\n        }\n    }\n\n    for (pos = stack.length - 1; pos; pos -= 1) {\n        stack[pos].unclosed = true;\n    }\n\n    return stack[0].nodes;\n};\n"]}