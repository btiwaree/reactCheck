{"version":3,"sources":["tests.js"],"names":[],"mappings":"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","file":"tests-compiled.js","sourcesContent":["var assert = require(\"chai\").assert;\n\nvar stream = require(\"readable-stream\");\n\nvar duplexer2 = require(\"../\");\n\ndescribe(\"duplexer2\", function() {\n  var writable, readable;\n\n  beforeEach(function() {\n    writable = new stream.Writable({objectMode: true});\n    readable = new stream.Readable({objectMode: true});\n\n    writable._write = function _write(input, encoding, done) {\n      return done();\n    };\n\n    readable._read = function _read(n) {\n    };\n  });\n\n  it(\"should interact with the writable stream properly for writing\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    writable._write = function _write(input, encoding, _done) {\n      assert.strictEqual(input, \"well hello there\");\n\n      return done();\n    };\n\n    duplex.write(\"well hello there\");\n  });\n\n  it(\"should interact with the readable stream properly for reading\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    duplex.on(\"data\", function(e) {\n      assert.strictEqual(e, \"well hello there\");\n\n      return done();\n    });\n\n    readable.push(\"well hello there\");\n  });\n\n  it(\"should end the writable stream, causing it to finish\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    writable.once(\"finish\", done);\n\n    duplex.end();\n  });\n\n  it(\"should finish when the writable stream finishes\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    duplex.once(\"finish\", done);\n\n    writable.end();\n  });\n\n  it(\"should end when the readable stream ends\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    // required to let \"end\" fire without reading\n    duplex.resume();\n    duplex.once(\"end\", done);\n\n    readable.push(null);\n  });\n\n  it(\"should bubble errors from the writable stream when no behaviour is specified\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    var originalErr = Error(\"testing\");\n\n    duplex.on(\"error\", function(err) {\n      assert.strictEqual(err, originalErr);\n\n      return done();\n    });\n\n    writable.emit(\"error\", originalErr);\n  });\n\n  it(\"should bubble errors from the readable stream when no behaviour is specified\", function(done) {\n    var duplex = duplexer2(writable, readable);\n\n    var originalErr = Error(\"testing\");\n\n    duplex.on(\"error\", function(err) {\n      assert.strictEqual(err, originalErr);\n\n      return done();\n    });\n\n    readable.emit(\"error\", originalErr);\n  });\n\n  it(\"should bubble errors from the writable stream when bubbleErrors is true\", function(done) {\n    var duplex = duplexer2({bubbleErrors: true}, writable, readable);\n\n    var originalErr = Error(\"testing\");\n\n    duplex.on(\"error\", function(err) {\n      assert.strictEqual(err, originalErr);\n\n      return done();\n    });\n\n    writable.emit(\"error\", originalErr);\n  });\n\n  it(\"should bubble errors from the readable stream when bubbleErrors is true\", function(done) {\n    var duplex = duplexer2({bubbleErrors: true}, writable, readable);\n\n    var originalErr = Error(\"testing\");\n\n    duplex.on(\"error\", function(err) {\n      assert.strictEqual(err, originalErr);\n\n      return done();\n    });\n\n    readable.emit(\"error\", originalErr);\n  });\n\n  it(\"should not bubble errors from the writable stream when bubbleErrors is false\", function(done) {\n    var duplex = duplexer2({bubbleErrors: false}, writable, readable);\n\n    var timeout = setTimeout(done, 25);\n\n    duplex.on(\"error\", function(err) {\n      clearTimeout(timeout);\n\n      return done(Error(\"shouldn't bubble error\"));\n    });\n\n    // prevent uncaught error exception\n    writable.on(\"error\", function() {});\n\n    writable.emit(\"error\", Error(\"testing\"));\n  });\n\n  it(\"should not bubble errors from the readable stream when bubbleErrors is false\", function(done) {\n    var duplex = duplexer2({bubbleErrors: false}, writable, readable);\n\n    var timeout = setTimeout(done, 25);\n\n    duplex.on(\"error\", function(err) {\n      clearTimeout(timeout);\n\n      return done(Error(\"shouldn't bubble error\"));\n    });\n\n    // prevent uncaught error exception\n    readable.on(\"error\", function() {});\n\n    readable.emit(\"error\", Error(\"testing\"));\n  });\n});\n"]}