{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;AAKA,IAAI,WAAW,QAAQ,WAAR,CAAX;AACJ,IAAI,SAAS,QAAQ,QAAR,CAAT;;;;;;AAMJ,IAAI,QAAQ,GAAG,KAAH;;;;;;AAMZ,IAAI,OAAO;AACT,gBAAc,KAAd;CADE;;;;;;AAQJ,OAAO,OAAP,GAAiB,IAAjB;;;;;;;;;;AAUA,SAAS,IAAT,GAAe;AACb,MAAI,UAAU,MAAV,IAAoB,CAApB,EAAuB,OAAO,UAAU,CAAV,CAAP,CAA3B;AACA,MAAI,UAAU,MAAM,IAAN,CAAW,SAAX,CAAV,CAFS;AAGb,MAAI,EAAJ,CAHa;AAIb,MAAI,cAAc,OAAO,QAAQ,QAAQ,MAAR,GAAiB,CAAjB,CAAf,EAAoC;AACpD,SAAK,QAAQ,MAAR,CAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAL,CADoD;GAAtD;AAGA,MAAI,QAAQ,QAAQ,CAAR,CAAR,CAPS;AAQb,MAAI,OAAO,QAAQ,QAAQ,MAAR,GAAiB,CAAjB,CAAf,CARS;AASb,MAAI,GAAJ,CATa;;AAWb,MAAI,MAAM,QAAN,IAAkB,KAAK,QAAL,EAAe,MAAM,SAAS,IAAT,EAAe,KAAf,EAAsB,IAAtB,CAAN,CAArC,KACK,IAAI,MAAM,QAAN,EAAgB,MAAM,KAAN,CAApB,KACA,IAAI,KAAK,QAAL,EAAe,MAAM,IAAN,CAAnB,KACA,MAAM,IAAI,MAAJ,EAAN,CADA;;AAGL,UAAQ,OAAR,CAAgB,UAAS,MAAT,EAAiB,CAAjB,EAAmB;AACjC,QAAI,OAAO,QAAQ,IAAE,CAAF,CAAf,CAD6B;AAEjC,QAAI,IAAJ,EAAU,OAAO,IAAP,CAAY,IAAZ,EAAV;AACA,QAAI,UAAU,GAAV,EAAe,OAAO,EAAP,CAAU,OAAV,EAAmB,IAAI,IAAJ,CAAS,IAAT,CAAc,GAAd,EAAmB,OAAnB,CAAnB,EAAnB;GAHc,CAAhB,CAhBa;;AAsBb,MAAI,EAAJ,EAAQ;AACN,QAAI,QAAQ,KAAR,CADE;AAEN,QAAI,EAAJ,CAAO,OAAP,EAAgB,GAAhB,EAFM;AAGN,SAAK,EAAL,CAAQ,QAAR,EAAkB,GAAlB,EAHM;AAIN,aAAS,GAAT,CAAa,GAAb,EAAiB;AACf,UAAI,KAAJ,EAAW,OAAX;AACA,cAAQ,IAAR,CAFe;AAGf,SAAG,GAAH,EAHe;KAAjB;GAJF;;AAWA,SAAO,GAAP,CAjCa;CAAf","file":"index-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar duplexer = require('duplexer2');\nvar Stream = require('stream');\n\n/**\n * Slice reference.\n */\n\nvar slice = [].slice;\n\n/**\n * Duplexer options.\n */\n\nvar opts = {\n  bubbleErrors: false\n};\n\n/**\n * Expose `pipe`.\n */\n\nmodule.exports = pipe;\n\n/**\n * Pipe.\n *\n * @param {Stream,...,[Function]}\n * @return {Stream}\n * @api public\n */\n\nfunction pipe(){\n  if (arguments.length == 1) return arguments[0];\n  var streams = slice.call(arguments);\n  var cb;\n  if ('function' == typeof streams[streams.length - 1]) {\n    cb = streams.splice(-1)[0];\n  }\n  var first = streams[0];\n  var last = streams[streams.length - 1];\n  var ret;\n  \n  if (first.writable && last.readable) ret = duplexer(opts, first, last);\n  else if (first.writable) ret = first;\n  else if (last.readable) ret = last;\n  else ret = new Stream;\n  \n  streams.forEach(function(stream, i){\n    var next = streams[i+1];\n    if (next) stream.pipe(next);\n    if (stream != ret) stream.on('error', ret.emit.bind(ret, 'error'));\n  });\n\n  if (cb) {\n    var ended = false;\n    ret.on('error', end);\n    last.on('finish', end);\n    function end(err){\n      if (ended) return;\n      ended = true;\n      cb(err);\n    }\n  }\n\n  return ret;\n}\n\n"]}