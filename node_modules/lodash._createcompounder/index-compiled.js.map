{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;AAQA,IAAI,SAAS,QAAQ,eAAR,CAAT;IACA,QAAQ,QAAQ,cAAR,CAAR;;;;;;;;;;AAUJ,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AAClC,SAAO,UAAS,MAAT,EAAiB;AACtB,QAAI,QAAQ,CAAC,CAAD;QACR,QAAQ,MAAM,OAAO,MAAP,CAAN,CAAR;QACA,SAAS,MAAM,MAAN;QACT,SAAS,EAAT,CAJkB;;AAMtB,WAAO,EAAE,KAAF,GAAU,MAAV,EAAkB;AACvB,eAAS,SAAS,MAAT,EAAiB,MAAM,KAAN,CAAjB,EAA+B,KAA/B,CAAT,CADuB;KAAzB;AAGA,WAAO,MAAP,CATsB;GAAjB,CAD2B;CAApC;;AAcA,OAAO,OAAP,GAAiB,gBAAjB","file":"index-compiled.js","sourcesContent":["/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar deburr = require('lodash.deburr'),\n    words = require('lodash.words');\n\n/**\n * Creates a function that produces compound words out of the words in a\n * given string.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    var index = -1,\n        array = words(deburr(string)),\n        length = array.length,\n        result = '';\n\n    while (++index < length) {\n      result = callback(result, array[index], index);\n    }\n    return result;\n  };\n}\n\nmodule.exports = createCompounder;\n"]}