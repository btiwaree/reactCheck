{"version":3,"sources":["minify-family.js"],"names":[],"mappings":"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","file":"minify-family-compiled.js","sourcesContent":["var stringify = require('postcss-value-parser').stringify;\r\nvar uniqs = require('uniqs');\r\n\r\nvar keywords = [\r\n    'sans-serif',\r\n    'serif',\r\n    'fantasy',\r\n    'cursive',\r\n    'monospace'\r\n];\r\n\r\nfunction intersection(haystack, array) {\r\n   return array.some(function (v) {\r\n        return ~haystack.indexOf(v);\r\n    });\r\n};\r\n\r\nmodule.exports = function (nodes, opts) {\r\n    var family = [];\r\n    var last = null;\r\n    var i, max;\r\n\r\n    nodes.forEach(function (node, index, nodes) {\r\n        var value = node.value;\r\n\r\n        if (node.type === 'string') {\r\n            family.push(node);\r\n        } else if (node.type === 'word') {\r\n            if (!last) {\r\n                last = { type: 'word', value: '' };\r\n                family.push(last);\r\n            }\r\n\r\n            last.value += node.value;\r\n        } else if (node.type === 'space') {\r\n            if (last && index !== nodes.length - 1) {\r\n                last.value += ' ';\r\n            }\r\n        } else {\r\n            last = null;\r\n        }\r\n    });\r\n\r\n    family = family.map(function (node) {\r\n        if (node.type === 'string') {\r\n            if (\r\n                !opts.removeQuotes ||\r\n                intersection(node.value, keywords) ||\r\n                /[0-9]/.test(node.value.slice(0, 1))\r\n            ) {\r\n                return stringify(node);\r\n            }\r\n\r\n            var escaped = node.value.split(/\\s/).map(function (word, index, words) {\r\n                var next = words[index + 1];\r\n                if (next && /^[^a-z]/i.test(next)) {\r\n                    return word + '\\\\';\r\n                }\r\n\r\n                if (!/^[^a-z\\d\\xa0-\\uffff_-]/i.test(word)) {\r\n                    return word.replace(/([^a-z\\d\\xa0-\\uffff_-])/gi, '\\\\$1');\r\n                }\r\n\r\n                if (/^[^a-z]/i.test(word) && index < 1) {\r\n                    return '\\\\' + word;\r\n                }\r\n\r\n                return word;\r\n            }).join(' ');\r\n\r\n            if (escaped.length < node.value.length + 2) {\r\n                return escaped;\r\n            }\r\n        }\r\n\r\n        return stringify(node);\r\n    });\r\n\r\n    if (opts.removeAfterKeyword) {\r\n        for (i = 0, max = family.length; i < max; i += 1) {\r\n            if (~keywords.indexOf(family[i])) {\r\n                family = family.slice(0, i + 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (opts.removeDuplicates) {\r\n        family = uniqs(family);\r\n    }\r\n\r\n    return [\r\n        {\r\n            type: 'word',\r\n            value: family.join()\r\n        }\r\n    ];\r\n};\r\n"]}