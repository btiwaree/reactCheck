{"version":3,"sources":["minify-font.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,sBAAR,EAAgC,IAAhC;AACX,IAAI,WAAW,QAAQ,YAAR,CAAX;AACJ,IAAI,eAAe,QAAQ,iBAAR,CAAf;AACJ,IAAI,eAAe,QAAQ,iBAAR,CAAf;;AAEJ,OAAO,OAAP,GAAiB,UAAU,KAAV,EAAiB,IAAjB,EAAuB;AACpC,QAAI,CAAJ,EAAO,GAAP,EAAY,IAAZ,EAAkB,WAAlB,EAA+B,MAA/B,CADoC;AAEpC,QAAI,UAAU,KAAV,CAFgC;;AAIpC,SAAK,IAAI,CAAJ,EAAO,MAAM,MAAM,MAAN,EAAc,IAAI,GAAJ,EAAS,KAAK,CAAL,EAAQ;AAC7C,eAAO,MAAM,CAAN,CAAP,CAD6C;AAE7C,YAAI,KAAK,IAAL,KAAc,MAAd,EAAsB;AACtB,gBAAI,KAAK,KAAL,KAAe,QAAf,IACA,CAAC,SAAS,KAAT,CAAe,OAAf,CAAuB,KAAK,KAAL,CAAxB,IACA,CAAC,SAAS,OAAT,CAAiB,OAAjB,CAAyB,KAAK,KAAL,CAA1B,IACA,CAAC,SAAS,OAAT,CAAiB,OAAjB,CAAyB,KAAK,KAAL,CAA1B,EAAuC;AACvC,oBAAI,CAAC,OAAD,EAAU;AACV,kCAAc,CAAd,CADU;iBAAd;aAJJ,MAOO,IAAI,CAAC,SAAS,MAAT,CAAgB,OAAhB,CAAwB,KAAK,KAAL,CAAzB,EAAsC;AAC7C,oBAAI,CAAC,OAAD,EAAU;AACV,yBAAK,KAAL,GAAa,aAAa,KAAK,KAAL,EAAY,IAAzB,CAAb,CADU;AAEV,kCAAc,CAAd,CAFU;iBAAd;aADG,MAKA,IAAI,CAAC,SAAS,IAAT,CAAc,OAAd,CAAsB,KAAK,KAAL,CAAvB,IAAsC,KAAK,KAAK,KAAL,CAA3C,EAAwD;AAC/D,oBAAI,CAAC,OAAD,EAAU;AACV,kCAAc,CAAd,CADU;AAEV,8BAAU,IAAV,CAFU;iBAAd;aADG;SAbX,MAmBO,IAAI,KAAK,IAAL,KAAc,KAAd,EAAqB;AAC5B,iBAAK,MAAL,GAAc,EAAd,CAD4B;AAE5B,iBAAK,KAAL,GAAa,EAAb,CAF4B;AAG5B,gBAAI,KAAK,KAAL,KAAe,GAAf,EAAoB;AACpB,8BAAc,IAAI,CAAJ,CADM;aAAxB;AAGA,kBAN4B;SAAzB,MAOA,IAAI,KAAK,IAAL,KAAc,OAAd,EAAuB;AAC9B,iBAAK,KAAL,GAAa,GAAb,CAD8B;SAA3B;KA5BX;;AAiCA,QAAI,CAAC,MAAM,WAAN,CAAD,EAAqB;AACrB,uBAAe,CAAf,CADqB;AAErB,iBAAS,aAAa,MAAM,KAAN,CAAY,WAAZ,CAAb,EAAuC,IAAvC,CAAT,CAFqB;AAGrB,gBAAQ,MAAM,KAAN,CAAY,CAAZ,EAAe,WAAf,EAA4B,MAA5B,CAAmC,MAAnC,CAAR,CAHqB;KAAzB;;AAMA,WAAO,KAAP,CA3CoC;CAAvB","file":"minify-font-compiled.js","sourcesContent":["var unit = require('postcss-value-parser').unit;\r\nvar keywords = require('./keywords');\r\nvar minifyFamily = require('./minify-family');\r\nvar minifyWeight = require('./minify-weight');\r\n\r\nmodule.exports = function (nodes, opts) {\r\n    var i, max, node, familyStart, family;\r\n    var hasSize = false;\r\n\r\n    for (i = 0, max = nodes.length; i < max; i += 1) {\r\n        node = nodes[i];\r\n        if (node.type === 'word') {\r\n            if (node.value === 'normal' ||\r\n                ~keywords.style.indexOf(node.value) ||\r\n                ~keywords.variant.indexOf(node.value) ||\r\n                ~keywords.stretch.indexOf(node.value)) {\r\n                if (!hasSize) {\r\n                    familyStart = i;\r\n                }\r\n            } else if (~keywords.weight.indexOf(node.value)) {\r\n                if (!hasSize) {\r\n                    node.value = minifyWeight(node.value, opts);\r\n                    familyStart = i;\r\n                }\r\n            } else if (~keywords.size.indexOf(node.value) || unit(node.value)) {\r\n                if (!hasSize) {\r\n                    familyStart = i;\r\n                    hasSize = true;\r\n                }\r\n            }\r\n        } else if (node.type === 'div') {\r\n            node.before = '';\r\n            node.after = '';\r\n            if (node.value === '/') {\r\n                familyStart = i + 1;\r\n            }\r\n            break;\r\n        } else if (node.type === 'space') {\r\n            node.value = ' ';\r\n        }\r\n    }\r\n\r\n    if (!isNaN(familyStart)) {\r\n        familyStart += 2;\r\n        family = minifyFamily(nodes.slice(familyStart), opts);\r\n        nodes = nodes.slice(0, familyStart).concat(family);\r\n    }\r\n\r\n    return nodes;\r\n};\r\n"]}