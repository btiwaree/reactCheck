{"version":3,"sources":["parent.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,IAAR,CAAa,CAAb,CAAT;AACJ,IAAI,OAAO,CAAC,QAAQ,IAAR,CAAa,CAAb,CAAD,IAAoB,CAApB;;AAEX,IAAI,CAAC,MAAD,IAAW,CAAC,MAAM,MAAN,CAAD,EAAgB;AAC7B,QAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN,CAD6B;CAA/B;;AAIA,IAAI,QAAQ,QAAQ,eAAR,EAAyB,KAAzB;AACZ,IAAI,OAAO,QAAQ,OAAR,CAAgB,cAAhB,CAAP;AACJ,QAAQ,KAAR,CAAc,QAAQ,GAAR,EAAa,MAA3B,EAAmC,IAAnC;;AAEA,IAAI,OAAO,CAAP,EAAU;AACZ,SAAO,UAAP,CADY;CAAd;;AAIA,IAAI,QAAQ,MAAM,QAAQ,QAAR,EAAkB,CAAC,IAAD,EAAO,MAAP,EAAe,OAAO,CAAP,CAAvC,EAAkD;AAC5D,SAAO,CAAE,CAAF,EAAK,MAAL,EAAa,MAAb,CAAP;CADU,CAAR;;AAIJ,IAAI,CAAC,IAAD,EAAO;AACT,QAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,YAAY;AAClC,UAAM,IAAN,CAAW,MAAX,EADkC;GAAZ,CAAxB,CADS;CAAX;;AAMA,IAAI,SAAS,EAAT;AACJ,MAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAU,CAAV,EAAa;AACnC,YAAU,CAAV,CADmC;CAAb,CAAxB;;AAIA,MAAM,EAAN,CAAS,OAAT,EAAkB,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AACrC,MAAI;AACF,aAAS,KAAK,KAAL,CAAW,MAAX,CAAT,CADE;GAAJ,CAEE,OAAO,EAAP,EAAW;AACX,YAAQ,GAAR,CAAY,IAAZ,EAAkB;AAChB,aAAO,2BAA2B,GAAG,OAAH;AAClC,cAAQ,MAAR;AACA,WAAK,QAAQ,GAAR;AACL,aAAO,MAAM,GAAN;AACP,YAAM,IAAN;AACA,cAAQ,CAAE,IAAF,EAAQ,MAAR,CAAR;AACA,cAAQ,CAAE,IAAF,EAAQ,GAAR,CAAR;KAPF,EADW;AAUX,WAVW;GAAX;AAYF,MAAI,OAAO,MAAP,CAAc,CAAd,MAAqB,IAArB,EAA2B;AAC7B,UAAM,CAAC,CAAC,GAAD,CADsB;GAA/B;AAGA,SAAO,QAAP,GAAkB,OAAO,QAAP,IAAmB,CAAE,IAAF,EAAQ,GAAR,CAAnB,CAlBmB;AAmBrC,UAAQ,GAAR,CAAY,IAAZ,EAAkB,MAAlB,EAnBqC;CAArB,CAAlB","file":"parent-compiled.js","sourcesContent":["var signal = process.argv[2]\nvar gens = +process.argv[3] || 0\n\nif (!signal || !isNaN(signal)) {\n  throw new Error('signal not provided')\n}\n\nvar spawn = require('child_process').spawn\nvar file = require.resolve('./awaiter.js')\nconsole.error(process.pid, signal, gens)\n\nif (gens > 0) {\n  file = __filename\n}\n\nvar child = spawn(process.execPath, [file, signal, gens - 1], {\n  stdio: [ 0, 'pipe', 'pipe' ]\n})\n\nif (!gens) {\n  child.stderr.on('data', function () {\n    child.kill(signal)\n  })\n}\n\nvar result = ''\nchild.stdout.on('data', function (c) {\n  result += c\n})\n\nchild.on('close', function (code, sig) {\n  try {\n    result = JSON.parse(result)\n  } catch (er) {\n    console.log('%j', {\n      error: 'failed to parse json\\n' + er.message,\n      result: result,\n      pid: process.pid,\n      child: child.pid,\n      gens: gens,\n      expect: [ null, signal ],\n      actual: [ code, sig ]\n    })\n    return\n  }\n  if (result.wanted[1] === true) {\n    sig = !!sig\n  }\n  result.external = result.external || [ code, sig ]\n  console.log('%j', result)\n})\n"]}