{"version":3,"sources":["signal-default.js"],"names":[],"mappings":";;;;;AAKA,IAAI,QAAQ,IAAR,CAAa,CAAb,CAAJ,EAAqB;AACnB,QAAM,QAAQ,IAAR,CAAa,CAAb,CAAN,EADmB;CAArB,MAEO;AACL,MAAI,UAAU,CACZ,SADY,EAEZ,SAFY,EAGZ,QAHY,EAIZ,SAJY,EAKZ,QALY,EAMZ,SANY,EAOZ,QAPY,EAQZ,QARY,EASZ,QATY,EAUZ,QAVY,EAWZ,SAXY,EAYZ,QAZY,EAaZ,OAbY,EAcZ,QAdY,EAeZ,SAfY,EAgBZ,SAhBY,EAiBZ,SAjBY,EAkBZ,SAlBY,EAmBZ,SAnBY,EAoBZ,QApBY,EAqBZ,SArBY,EAsBZ,SAtBY,EAuBZ,WAvBY,EAwBZ,SAxBY,EAyBZ,QAzBY,EA0BZ,SA1BY,EA2BZ,SA3BY,EA4BZ,SA5BY,EA6BZ,SA7BY,EA8BZ,SA9BY,EA+BZ,WA/BY,EAgCZ,QAhCY,EAiCZ,SAjCY,EAkCZ,SAlCY,EAmCZ,WAnCY,EAoCZ,UApCY,EAqCZ,SArCY,EAsCZ,SAtCY,CAAV,CADC;;AA0CL,MAAI,QAAQ,QAAQ,eAAR,EAAyB,KAAzB,CA1CP,CA2CH,SAAS,IAAT,CAAe,MAAf,EAAuB;AACvB,QAAI,CAAC,MAAD,EAAS;AACX,aADW;KAAb;AAGA,QAAI,QAAQ,MAAM,QAAQ,QAAR,EAAkB,CAAC,UAAD,EAAa,MAAb,CAAxB,EAA8C,EAAE,OAAO,SAAP,EAAhD,CAAR,CAJmB;AAKvB,QAAI,QAAQ,WAAW,YAAY;AACjC,cAAQ,GAAR,CAAY,kBAAZ,EADiC;AAEjC,cAAQ,IAAR,CAAa,MAAM,GAAN,EAAW,SAAxB,EAFiC;KAAZ,EAGpB,GAHS,CAAR,CALmB;;AAUvB,UAAM,EAAN,CAAS,OAAT,EAAkB,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACxC,cAAQ,GAAR,CAAY,qBAAZ,EAAmC,IAAnC,EAAyC,MAAzC,EADwC;AAExC,mBAAa,KAAb,EAFwC;AAGxC,WAAK,QAAQ,GAAR,EAAL,EAHwC;KAAxB,CAAlB,CAVuB;GAAvB,CAAD,CAeE,QAAQ,GAAR,EAfF,EA3CI;CAFP;;AA+DA,SAAS,KAAT,CAAgB,MAAhB,EAAwB;AACtB,UAAQ,GAAR,CAAY,WAAZ,EAAyB,MAAzB;;;AADsB,YAItB,CAAW,YAAY;AACrB,YAAQ,GAAR,CAAY,gBAAZ,EADqB;GAAZ,EAER,GAFH,EAJsB;;AAQtB,UAAQ,EAAR,CAAW,MAAX,EAAmB,UAAU,IAAV,EAAgB;AACjC,YAAQ,GAAR,CAAY,mBAAZ,EAAiC,IAAjC,EADiC;GAAhB,CAAnB,CARsB;;AAYtB,MAAI;AACF,YAAQ,EAAR,CAAW,MAAX,EAAmB,SAAS,EAAT,GAAe;AAChC,cAAQ,GAAR,CAAY,qBAAZ,EAAmC,MAAnC,EADgC;AAEhC,cAAQ,cAAR,CAAuB,MAAvB,EAA+B,EAA/B,EAFgC;AAGhC,iBAAW,YAAY;AACrB,gBAAQ,KAAR,CAAc,cAAd,EADqB;AAErB,gBAAQ,IAAR,CAAa,QAAQ,GAAR,EAAa,MAA1B,EAFqB;OAAZ,CAAX,CAHgC;KAAf,CAAnB,CADE;GAAJ,CASE,OAAO,EAAP,EAAW;AACX,YAAQ,GAAR,CAAY,gBAAZ,EADW;GAAX;;AAIF,MAAI;AACF,YAAQ,IAAR,CAAa,QAAQ,GAAR,EAAa,MAA1B,EADE;GAAJ,CAEE,OAAO,EAAP,EAAW;AACX,YAAQ,GAAR,CAAY,cAAZ,EADW;GAAX;CA3BJ","file":"signal-default-compiled.js","sourcesContent":["// This fixture is not used in any tests.  It is here merely as a way to\n// do research into the various signal behaviors on Linux and Darwin.\n// Run with no args to cycle through every signal type.  Run with a signal\n// arg to learn about how that signal behaves.\n\nif (process.argv[2]) {\n  child(process.argv[2])\n} else {\n  var signals = [\n    'SIGABRT',\n    'SIGALRM',\n    'SIGBUS',\n    'SIGCHLD',\n    'SIGCLD',\n    'SIGCONT',\n    'SIGEMT',\n    'SIGFPE',\n    'SIGHUP',\n    'SIGILL',\n    'SIGINFO',\n    'SIGINT',\n    'SIGIO',\n    'SIGIOT',\n    'SIGKILL',\n    'SIGLOST',\n    'SIGPIPE',\n    'SIGPOLL',\n    'SIGPROF',\n    'SIGPWR',\n    'SIGQUIT',\n    'SIGSEGV',\n    'SIGSTKFLT',\n    'SIGSTOP',\n    'SIGSYS',\n    'SIGTERM',\n    'SIGTRAP',\n    'SIGTSTP',\n    'SIGTTIN',\n    'SIGTTOU',\n    'SIGUNUSED',\n    'SIGURG',\n    'SIGUSR1',\n    'SIGUSR2',\n    'SIGVTALRM',\n    'SIGWINCH',\n    'SIGXCPU',\n    'SIGXFSZ'\n  ]\n\n  var spawn = require('child_process').spawn\n  ;(function test (signal) {\n    if (!signal) {\n      return\n    }\n    var child = spawn(process.execPath, [__filename, signal], { stdio: 'inherit' })\n    var timer = setTimeout(function () {\n      console.log('requires SIGCONT')\n      process.kill(child.pid, 'SIGCONT')\n    }, 750)\n\n    child.on('close', function (code, signal) {\n      console.log('code=%j signal=%j\\n', code, signal)\n      clearTimeout(timer)\n      test(signals.pop())\n    })\n  })(signals.pop())\n}\n\nfunction child (signal) {\n  console.log('signal=%s', signal)\n\n  // set a timeout so we know whether or not the process terminated.\n  setTimeout(function () {\n    console.log('not terminated')\n  }, 200)\n\n  process.on('exit', function (code) {\n    console.log('emit exit code=%j', code)\n  })\n\n  try {\n    process.on(signal, function fn () {\n      console.log('signal is catchable', signal)\n      process.removeListener(signal, fn)\n      setTimeout(function () {\n        console.error('signal again')\n        process.kill(process.pid, signal)\n      })\n    })\n  } catch (er) {\n    console.log('not listenable')\n  }\n\n  try {\n    process.kill(process.pid, signal)\n  } catch (er) {\n    console.log('not issuable')\n  }\n}\n"]}