{"version":3,"sources":["signal-exit-test.js"],"names":[],"mappings":"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","file":"signal-exit-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar exec = require('child_process').exec,\n  expect = require('chai').expect,\n  assert = require('assert')\n\nrequire('chai').should()\nrequire('tap').mochaGlobals()\n\ndescribe('signal-exit', function () {\n\n  it('receives an exit event when a process exits normally', function (done) {\n    exec(process.execPath + ' ./test/fixtures/end-of-execution.js', function (err, stdout, stderr) {\n      expect(err).to.equal(null)\n      stdout.should.match(/reached end of execution, 0, null/)\n      done()\n    })\n  })\n\n  it('receives an exit event when a process is terminated with sigint', function (done) {\n    exec(process.execPath + ' ./test/fixtures/sigint.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/exited with sigint, null, SIGINT/)\n      done()\n    })\n  })\n\n  it('receives an exit event when a process is terminated with sigterm', function (done) {\n    exec(process.execPath + ' ./test/fixtures/sigterm.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/exited with sigterm, null, SIGTERM/)\n      done()\n    })\n  })\n\n  it('receives an exit event when process.exit() is called', function (done) {\n    exec(process.execPath + ' ./test/fixtures/exit.js', function (err, stdout, stderr) {\n      err.code.should.equal(32)\n      stdout.should.match(/exited with process\\.exit\\(\\), 32, null/)\n      done()\n    })\n  })\n\n  it('does not exit if user handles signal', function (done) {\n    exec(process.execPath + ' ./test/fixtures/signal-listener.js', function (err, stdout, stderr) {\n      assert(err)\n      assert.equal(stdout, 'exited calledListener=4, code=null, signal=\"SIGHUP\"\\n')\n      done()\n    })\n  })\n\n  it('ensures that if alwaysLast=true, the handler is run last (signal)', function (done) {\n    exec(process.execPath + ' ./test/fixtures/signal-last.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/first counter=1/)\n      stdout.should.match(/last counter=2/)\n      done()\n    })\n  })\n\n  it('ensures that if alwaysLast=true, the handler is run last (normal exit)', function (done) {\n    exec(process.execPath + ' ./test/fixtures/exit-last.js', function (err, stdout, stderr) {\n      assert.ifError(err)\n      stdout.should.match(/first counter=1/)\n      stdout.should.match(/last counter=2/)\n      done()\n    })\n  })\n\n  it('works when loaded multiple times', function (done) {\n    exec(process.execPath + ' ./test/fixtures/multiple-load.js', function (err, stdout, stderr) {\n      assert(err)\n      stdout.should.match(/first counter=1, code=null, signal=\"SIGHUP\"/)\n      stdout.should.match(/first counter=2, code=null, signal=\"SIGHUP\"/)\n      stdout.should.match(/last counter=3, code=null, signal=\"SIGHUP\"/)\n      stdout.should.match(/last counter=4, code=null, signal=\"SIGHUP\"/)\n      done()\n    })\n  })\n\n  // TODO: test on a few non-OSX machines.\n  it('removes handlers when fully unwrapped', function (done) {\n    exec(process.execPath + ' ./test/fixtures/unwrap.js', function (err, stdout, stderr) {\n      // on Travis CI no err.signal is populated but\n      // err.code is 129 (which I think tends to be SIGHUP).\n      var expectedCode = process.env.TRAVIS ? 129 : null\n\n      assert(err)\n      if (!process.env.TRAVIS) err.signal.should.equal('SIGHUP')\n      expect(err.code).to.equal(expectedCode)\n      done()\n    })\n  })\n\n  it('does not load() or unload() more than once', function (done) {\n    exec(process.execPath + ' ./test/fixtures/load-unload.js', function (err, stdout, stderr) {\n      assert.ifError(err)\n      done()\n    })\n  })\n\n  it('handles uncatchable signals with grace and poise', function (done) {\n    exec(process.execPath + ' ./test/fixtures/sigkill.js', function (err, stdout, stderr) {\n      assert.ifError(err)\n      done()\n    })\n  })\n})\n"]}