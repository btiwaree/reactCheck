{"version":3,"sources":["namespace.js"],"names":[],"mappings":";;;;;;;;;;AAUA;;AAEA,IAAI,KAAK,QAAQ,SAAR,CAAL;;;;;;;AAOJ,IAAI,YAAY,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC3D,KAAG,MAAH,CAAU,IAAV,EAAgB,OAAhB,EAD2D;CAA5B;;;;;;;;AAUjC,UAAU,SAAV,CAAoB,KAApB,GAA4B,UAAU,GAAV,EAAe;AACzC,SAAO,GAAG,GAAH,CAAO,IAAP,EAAa,GAAb,CAAP,CADyC;CAAf;;;;;;;;;;AAY5B,UAAU,SAAV,CAAoB,GAApB,GAA0B,UAAU,GAAV,EAAe,KAAf,EAAsB;AAC9C,MAAI,OAAQ,GAAR,KAAiB,QAAjB,EAA2B;AAC7B,OAAG,MAAH,CAAU,IAAV,EAAgB,GAAhB,EAD6B;GAA/B,MAEO;AACL,SAAK,GAAL,IAAY,KAAZ,CADK;GAFP;AAKA,SAAO,IAAP,CAN8C;CAAtB;;;;;;;;;AAgB1B,UAAU,SAAV,CAAoB,GAApB,GAA0B,UAAU,GAAV,EAAe,YAAf,EAA6B;AACrD,SAAO,CAAC,KAAK,GAAL,CAAD,GAAa,YAAb,GAA4B,KAAK,GAAL,CAA5B,CAD8C;CAA7B;;;;;;;;;AAW1B,UAAU,SAAV,CAAoB,KAApB,GAA4B,UAAU,GAAV,EAAe,YAAf,EAA6B;AACvD,MAAI,QAAQ,KAAK,GAAL,CAAR,CADmD;AAEvD,MAAI,UAAU,IAAV,EAAgB;AAClB,WAAO,KAAK,GAAL,CAAP,CADkB;AAElB,WAAO,KAAP,CAFkB;GAApB;AAIA,SAAO,YAAP,CANuD;CAA7B","file":"namespace-compiled.js","sourcesContent":["/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar $$ = require('./utils');\n\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\nvar Namespace = module.exports = function Namespace(options) {\n  $$.extend(this, options);\n};\n\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\nNamespace.prototype.isset = function (key) {\n  return $$.has(this, key);\n};\n\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\nNamespace.prototype.set = function (key, value) {\n  if (typeof (key) === 'object') {\n    $$.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n  return this;\n};\n\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue : this[key];\n};\n\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n  if (value !== null) {\n    delete this[key];\n    return value;\n  }\n  return defaultValue;\n};\n"]}