{"version":3,"sources":["error.js"],"names":[],"mappings":"AAAA;;AAGA,IAAI,SAAU,QAAQ,MAAR,EAAgB,MAAhB;;AAGd,IAAI,WAAW,UAAX;;;;;;;;;;;;;;;;;;;;;;;AAuBJ,OAAO,OAAP,GAAiB,UAAU,QAAV,EAAoB,OAApB,EAA6B;AAC5C,MAAI,eAAe,IAAf,CADwC;AAE5C,MAAI,UAAJ,CAF4C;AAG5C,MAAI,GAAJ,CAH4C;;AAK5C,MAAI,SAAS,OAAT,EAAkB;AACpB,mBAAe,SAAS,OAAT,EAAf,CADoB;GAAtB,MAEO;AACL,mBAAe,KAAK,QAAL,CADV;GAFP;;AAMA,MAAI,CAAC,YAAD,EAAe;AACjB,iBAAa,OAAb,CADiB;GAAnB,MAEO;AACL,iBAAa,OAAO,mBAAP,EAA4B,YAA5B,EAA0C,OAA1C,CAAb,CADK;GAFP;;AAMA,QAAM,IAAI,SAAJ,CAAc,UAAd,CAAN,CAjB4C;AAkB5C,MAAI,IAAJ,GAAW,QAAX,CAlB4C;AAmB5C,SAAO,GAAP,CAnB4C;CAA7B","file":"error-compiled.js","sourcesContent":["'use strict';\n\n\nvar format  = require('util').format;\n\n\nvar ERR_CODE = 'ARGError';\n\n/*:nodoc:*\n * argumentError(argument, message) -> TypeError\n * - argument (Object): action with broken argument\n * - message (String): error message\n *\n * Error format helper. An error from creating or using an argument\n * (optional or positional). The string value of this exception\n * is the message, augmented with information\n * about the argument that caused it.\n *\n * #####Example\n *\n *      var argumentErrorHelper = require('./argument/error');\n *      if (conflictOptionals.length > 0) {\n *        throw argumentErrorHelper(\n *          action,\n *          format('Conflicting option string(s): %s', conflictOptionals.join(', '))\n *        );\n *      }\n *\n **/\nmodule.exports = function (argument, message) {\n  var argumentName = null;\n  var errMessage;\n  var err;\n\n  if (argument.getName) {\n    argumentName = argument.getName();\n  } else {\n    argumentName = '' + argument;\n  }\n\n  if (!argumentName) {\n    errMessage = message;\n  } else {\n    errMessage = format('argument \"%s\": %s', argumentName, message);\n  }\n\n  err = new TypeError(errMessage);\n  err.code = ERR_CODE;\n  return err;\n};\n"]}