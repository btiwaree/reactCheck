{"version":3,"sources":["group.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,IAAI,kBAAkB,QAAQ,qBAAR,CAAlB;;;;;;;;;;;;;;AAeJ,IAAI,gBAAgB,OAAO,OAAP,GAAiB,SAAS,aAAT,CAAuB,SAAvB,EAAkC,OAAlC,EAA2C;;AAE9E,YAAU,WAAW,EAAX;;;AAFoE,SAK9E,CAAQ,eAAR,GAA2B,QAAQ,eAAR,IAA2B,UAAU,eAAV,CALwB;AAM9E,UAAQ,WAAR,GAAuB,QAAQ,WAAR,IAAuB,UAAU,WAAV,CANgC;AAO9E,UAAQ,eAAR,GAA2B,QAAQ,eAAR,IAA2B,UAAU,eAAV,CAPwB;;AAS9E,kBAAgB,IAAhB,CAAqB,IAArB,EAA2B,OAA3B;;;AAT8E,MAY9E,CAAK,KAAL,GAAa,QAAQ,KAAR,CAZiE;AAa9E,OAAK,aAAL,GAAqB,EAArB;;;AAb8E,MAgB9E,CAAK,UAAL,GAAkB,SAAlB,CAhB8E;AAiB9E,OAAK,WAAL,GAAmB,UAAU,WAAV,CAjB2D;AAkB9E,OAAK,QAAL,GAAgB,UAAU,QAAV,CAlB8D;AAmB9E,OAAK,oBAAL,GAA4B,UAAU,oBAAV,CAnBkD;AAoB9E,OAAK,SAAL,GAAiB,UAAU,SAAV,CApB6D;AAqB9E,OAAK,2BAAL,GAAmC,UAAU,2BAAV,CArB2C;AAsB9E,OAAK,wBAAL,GAAgC,UAAU,wBAAV,CAtB8C;CAA3C;AAwBrC,KAAK,QAAL,CAAc,aAAd,EAA6B,eAA7B;;AAGA,cAAc,SAAd,CAAwB,UAAxB,GAAqC,UAAU,MAAV,EAAkB;;AAErD,WAAS,gBAAgB,SAAhB,CAA0B,UAA1B,CAAqC,IAArC,CAA0C,IAA1C,EAAgD,MAAhD,CAAT,CAFqD;AAGrD,OAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB,EAHqD;AAIrD,SAAO,MAAP,CAJqD;CAAlB;;AAQrC,cAAc,SAAd,CAAwB,aAAxB,GAAwC,UAAU,MAAV,EAAkB;;AAExD,kBAAgB,SAAhB,CAA0B,aAA1B,CAAwC,IAAxC,CAA6C,IAA7C,EAAmD,MAAnD,EAFwD;AAGxD,MAAI,cAAc,KAAK,aAAL,CAAmB,OAAnB,CAA2B,MAA3B,CAAd,CAHoD;AAIxD,MAAI,eAAe,CAAf,EAAkB;AACpB,SAAK,aAAL,CAAmB,MAAnB,CAA0B,WAA1B,EAAuC,CAAvC,EADoB;GAAtB;CAJsC","file":"group-compiled.js","sourcesContent":["/** internal\n * class ArgumentGroup\n *\n * Group arguments.\n * By default, ArgumentParser groups command-line arguments\n * into “positional arguments” and “optional arguments”\n * when displaying help messages. When there is a better\n * conceptual grouping of arguments than this default one,\n * appropriate groups can be created using the addArgumentGroup() method\n *\n * This class inherited from [[ArgumentContainer]]\n **/\n'use strict';\n\nvar util = require('util');\n\nvar ActionContainer = require('../action_container');\n\n\n/**\n * new ArgumentGroup(container, options)\n * - container (object): main container\n * - options (object): hash of group options\n *\n * #### options\n * - **prefixChars**  group name prefix\n * - **argumentDefault**  default argument value\n * - **title**  group title\n * - **description** group description\n *\n **/\nvar ArgumentGroup = module.exports = function ArgumentGroup(container, options) {\n\n  options = options || {};\n\n  // add any missing keyword arguments by checking the container\n  options.conflictHandler = (options.conflictHandler || container.conflictHandler);\n  options.prefixChars = (options.prefixChars || container.prefixChars);\n  options.argumentDefault = (options.argumentDefault || container.argumentDefault);\n\n  ActionContainer.call(this, options);\n\n  // group attributes\n  this.title = options.title;\n  this._groupActions = [];\n\n  // share most attributes with the container\n  this._container = container;\n  this._registries = container._registries;\n  this._actions = container._actions;\n  this._optionStringActions = container._optionStringActions;\n  this._defaults = container._defaults;\n  this._hasNegativeNumberOptionals = container._hasNegativeNumberOptionals;\n  this._mutuallyExclusiveGroups = container._mutuallyExclusiveGroups;\n};\nutil.inherits(ArgumentGroup, ActionContainer);\n\n\nArgumentGroup.prototype._addAction = function (action) {\n  // Parent add action\n  action = ActionContainer.prototype._addAction.call(this, action);\n  this._groupActions.push(action);\n  return action;\n};\n\n\nArgumentGroup.prototype._removeAction = function (action) {\n  // Parent remove action\n  ActionContainer.prototype._removeAction.call(this, action);\n  var actionIndex = this._groupActions.indexOf(action);\n  if (actionIndex >= 0) {\n    this._groupActions.splice(actionIndex, 1);\n  }\n};\n\n"]}