{"version":3,"sources":["argument_parser.js"],"names":[],"mappings":"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","file":"argument_parser-compiled.js","sourcesContent":["/**\n * class ArgumentParser\n *\n * Object for parsing command line strings into js objects.\n *\n * Inherited from [[ActionContainer]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\nvar Path    = require('path');\nvar sprintf = require('sprintf-js').sprintf;\n\n// Constants\nvar c = require('./const');\n\nvar $$ = require('./utils');\n\nvar ActionContainer = require('./action_container');\n\n// Errors\nvar argumentErrorHelper = require('./argument/error');\n\nvar HelpFormatter = require('./help/formatter');\n\nvar Namespace = require('./namespace');\n\n\n/**\n * new ArgumentParser(options)\n *\n * Create a new ArgumentParser object.\n *\n * ##### Options:\n * - `prog`  The name of the program (default: Path.basename(process.argv[1]))\n * - `usage`  A usage message (default: auto-generated from arguments)\n * - `description`  A description of what the program does\n * - `epilog`  Text following the argument descriptions\n * - `parents`  Parsers whose arguments should be copied into this one\n * - `formatterClass`  HelpFormatter class for printing help messages\n * - `prefixChars`  Characters that prefix optional arguments\n * - `fromfilePrefixChars` Characters that prefix files containing additional arguments\n * - `argumentDefault`  The default value for all arguments\n * - `addHelp`  Add a -h/-help option\n * - `conflictHandler`  Specifies how to handle conflicting argument names\n * - `debug`  Enable debug mode. Argument errors throw exception in\n *   debug mode and process.exit in normal. Used for development and\n *   testing (default: false)\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#argumentparser-objects\n **/\nfunction ArgumentParser(options) {\n  if (!(this instanceof ArgumentParser)) {\n    return new ArgumentParser(options);\n  }\n  var self = this;\n  options = options || {};\n\n  options.description = (options.description || null);\n  options.argumentDefault = (options.argumentDefault || null);\n  options.prefixChars = (options.prefixChars || '-');\n  options.conflictHandler = (options.conflictHandler || 'error');\n  ActionContainer.call(this, options);\n\n  options.addHelp = typeof options.addHelp === 'undefined' || !!options.addHelp;\n  options.parents = options.parents || [];\n  // default program name\n  options.prog = (options.prog || Path.basename(process.argv[1]));\n  this.prog = options.prog;\n  this.usage = options.usage;\n  this.epilog = options.epilog;\n  this.version = options.version;\n\n  this.debug = (options.debug === true);\n\n  this.formatterClass = (options.formatterClass || HelpFormatter);\n  this.fromfilePrefixChars = options.fromfilePrefixChars || null;\n  this._positionals = this.addArgumentGroup({ title: 'Positional arguments' });\n  this._optionals = this.addArgumentGroup({ title: 'Optional arguments' });\n  this._subparsers = null;\n\n  // register types\n  function FUNCTION_IDENTITY(o) {\n    return o;\n  }\n  this.register('type', 'auto', FUNCTION_IDENTITY);\n  this.register('type', null, FUNCTION_IDENTITY);\n  this.register('type', 'int', function (x) {\n    var result = parseInt(x, 10);\n    if (isNaN(result)) {\n      throw new Error(x + ' is not a valid integer.');\n    }\n    return result;\n  });\n  this.register('type', 'float', function (x) {\n    var result = parseFloat(x);\n    if (isNaN(result)) {\n      throw new Error(x + ' is not a valid float.');\n    }\n    return result;\n  });\n  this.register('type', 'string', function (x) {\n    return '' + x;\n  });\n\n  // add help and version arguments if necessary\n  var defaultPrefix = (this.prefixChars.indexOf('-') > -1) ? '-' : this.prefixChars[0];\n  if (options.addHelp) {\n    this.addArgument(\n      [ defaultPrefix + 'h', defaultPrefix + defaultPrefix + 'help' ],\n      {\n        action: 'help',\n        defaultValue: c.SUPPRESS,\n        help: 'Show this help message and exit.'\n      }\n    );\n  }\n  if (typeof this.version !== 'undefined') {\n    this.addArgument(\n      [ defaultPrefix + 'v', defaultPrefix + defaultPrefix + 'version' ],\n      {\n        action: 'version',\n        version: this.version,\n        defaultValue: c.SUPPRESS,\n        help: \"Show program's version number and exit.\"\n      }\n    );\n  }\n\n  // add parent arguments and defaults\n  options.parents.forEach(function (parent) {\n    self._addContainerActions(parent);\n    if (typeof parent._defaults !== 'undefined') {\n      for (var defaultKey in parent._defaults) {\n        if (parent._defaults.hasOwnProperty(defaultKey)) {\n          self._defaults[defaultKey] = parent._defaults[defaultKey];\n        }\n      }\n    }\n  });\n}\n\nutil.inherits(ArgumentParser, ActionContainer);\n\n/**\n * ArgumentParser#addSubparsers(options) -> [[ActionSubparsers]]\n * - options (object): hash of options see [[ActionSubparsers.new]]\n *\n * See also [subcommands][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#sub-commands\n **/\nArgumentParser.prototype.addSubparsers = function (options) {\n  if (this._subparsers) {\n    this.error('Cannot have multiple subparser arguments.');\n  }\n\n  options = options || {};\n  options.debug = (this.debug === true);\n  options.optionStrings = [];\n  options.parserClass = (options.parserClass || ArgumentParser);\n\n\n  if (!!options.title || !!options.description) {\n\n    this._subparsers = this.addArgumentGroup({\n      title: (options.title || 'subcommands'),\n      description: options.description\n    });\n    delete options.title;\n    delete options.description;\n\n  } else {\n    this._subparsers = this._positionals;\n  }\n\n  // prog defaults to the usage message of this parser, skipping\n  // optional arguments and with no \"usage:\" prefix\n  if (!options.prog) {\n    var formatter = this._getFormatter();\n    var positionals = this._getPositionalActions();\n    var groups = this._mutuallyExclusiveGroups;\n    formatter.addUsage(this.usage, positionals, groups, '');\n    options.prog = formatter.formatHelp().trim();\n  }\n\n  // create the parsers action and add it to the positionals list\n  var ParsersClass = this._popActionClass(options, 'parsers');\n  var action = new ParsersClass(options);\n  this._subparsers._addAction(action);\n\n  // return the created parsers action\n  return action;\n};\n\nArgumentParser.prototype._addAction = function (action) {\n  if (action.isOptional()) {\n    this._optionals._addAction(action);\n  } else {\n    this._positionals._addAction(action);\n  }\n  return action;\n};\n\nArgumentParser.prototype._getOptionalActions = function () {\n  return this._actions.filter(function (action) {\n    return action.isOptional();\n  });\n};\n\nArgumentParser.prototype._getPositionalActions = function () {\n  return this._actions.filter(function (action) {\n    return action.isPositional();\n  });\n};\n\n\n/**\n * ArgumentParser#parseArgs(args, namespace) -> Namespace|Object\n * - args (array): input elements\n * - namespace (Namespace|Object): result object\n *\n * Parsed args and throws error if some arguments are not recognized\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-parse-args-method\n **/\nArgumentParser.prototype.parseArgs = function (args, namespace) {\n  var argv;\n  var result = this.parseKnownArgs(args, namespace);\n\n  args = result[0];\n  argv = result[1];\n  if (argv && argv.length > 0) {\n    this.error(\n      format('Unrecognized arguments: %s.', argv.join(' '))\n    );\n  }\n  return args;\n};\n\n/**\n * ArgumentParser#parseKnownArgs(args, namespace) -> array\n * - args (array): input options\n * - namespace (Namespace|Object): result object\n *\n * Parse known arguments and return tuple of result object\n * and unknown args\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#partial-parsing\n **/\nArgumentParser.prototype.parseKnownArgs = function (args, namespace) {\n  var self = this;\n\n  // args default to the system args\n  args = args || process.argv.slice(2);\n\n  // default Namespace built from parser defaults\n  namespace = namespace || new Namespace();\n\n  self._actions.forEach(function (action) {\n    if (action.dest !== c.SUPPRESS) {\n      if (!$$.has(namespace, action.dest)) {\n        if (action.defaultValue !== c.SUPPRESS) {\n          var defaultValue = action.defaultValue;\n          if (typeof action.defaultValue === 'string') {\n            defaultValue = self._getValue(action, defaultValue);\n          }\n          namespace[action.dest] = defaultValue;\n        }\n      }\n    }\n  });\n\n  Object.keys(self._defaults).forEach(function (dest) {\n    namespace[dest] = self._defaults[dest];\n  });\n\n  // parse the arguments and exit if there are any errors\n  try {\n    var res = this._parseKnownArgs(args, namespace);\n\n    namespace = res[0];\n    args = res[1];\n    if ($$.has(namespace, c._UNRECOGNIZED_ARGS_ATTR)) {\n      args = $$.arrayUnion(args, namespace[c._UNRECOGNIZED_ARGS_ATTR]);\n      delete namespace[c._UNRECOGNIZED_ARGS_ATTR];\n    }\n    return [ namespace, args ];\n  } catch (e) {\n    this.error(e);\n  }\n};\n\nArgumentParser.prototype._parseKnownArgs = function (argStrings, namespace) {\n  var self = this;\n\n  var extras = [];\n\n  // replace arg strings that are file references\n  if (this.fromfilePrefixChars !== null) {\n    argStrings = this._readArgsFromFiles(argStrings);\n  }\n  // map all mutually exclusive arguments to the other arguments\n  // they can't occur with\n  // Python has 'conflicts = action_conflicts.setdefault(mutex_action, [])'\n  // though I can't conceive of a way in which an action could be a member\n  // of two different mutually exclusive groups.\n\n  function actionHash(action) {\n    // some sort of hashable key for this action\n    // action itself cannot be a key in actionConflicts\n    // I think getName() (join of optionStrings) is unique enough\n    return action.getName();\n  }\n\n  var conflicts, key;\n  var actionConflicts = {};\n\n  this._mutuallyExclusiveGroups.forEach(function (mutexGroup) {\n    mutexGroup._groupActions.forEach(function (mutexAction, i, groupActions) {\n      key = actionHash(mutexAction);\n      if (!$$.has(actionConflicts, key)) {\n        actionConflicts[key] = [];\n      }\n      conflicts = actionConflicts[key];\n      conflicts.push.apply(conflicts, groupActions.slice(0, i));\n      conflicts.push.apply(conflicts, groupActions.slice(i + 1));\n    });\n  });\n\n  // find all option indices, and determine the arg_string_pattern\n  // which has an 'O' if there is an option at an index,\n  // an 'A' if there is an argument, or a '-' if there is a '--'\n  var optionStringIndices = {};\n\n  var argStringPatternParts = [];\n\n  argStrings.forEach(function (argString, argStringIndex) {\n    if (argString === '--') {\n      argStringPatternParts.push('-');\n      while (argStringIndex < argStrings.length) {\n        argStringPatternParts.push('A');\n        argStringIndex++;\n      }\n    } else {\n      // otherwise, add the arg to the arg strings\n      // and note the index if it was an option\n      var pattern;\n      var optionTuple = self._parseOptional(argString);\n      if (!optionTuple) {\n        pattern = 'A';\n      } else {\n        optionStringIndices[argStringIndex] = optionTuple;\n        pattern = 'O';\n      }\n      argStringPatternParts.push(pattern);\n    }\n  });\n  var argStringsPattern = argStringPatternParts.join('');\n\n  var seenActions = [];\n  var seenNonDefaultActions = [];\n\n\n  function takeAction(action, argumentStrings, optionString) {\n    seenActions.push(action);\n    var argumentValues = self._getValues(action, argumentStrings);\n\n    // error if this argument is not allowed with other previously\n    // seen arguments, assuming that actions that use the default\n    // value don't really count as \"present\"\n    if (argumentValues !== action.defaultValue) {\n      seenNonDefaultActions.push(action);\n      if (actionConflicts[actionHash(action)]) {\n        actionConflicts[actionHash(action)].forEach(function (actionConflict) {\n          if (seenNonDefaultActions.indexOf(actionConflict) >= 0) {\n            throw argumentErrorHelper(\n              action,\n              format('Not allowed with argument \"%s\".', actionConflict.getName())\n            );\n          }\n        });\n      }\n    }\n\n    if (argumentValues !== c.SUPPRESS) {\n      action.call(self, namespace, argumentValues, optionString);\n    }\n  }\n\n  function consumeOptional(startIndex) {\n    // get the optional identified at this index\n    var optionTuple = optionStringIndices[startIndex];\n    var action = optionTuple[0];\n    var optionString = optionTuple[1];\n    var explicitArg = optionTuple[2];\n\n    // identify additional optionals in the same arg string\n    // (e.g. -xyz is the same as -x -y -z if no args are required)\n    var actionTuples = [];\n\n    var args, argCount, start, stop;\n\n    for (;;) {\n      if (!action) {\n        extras.push(argStrings[startIndex]);\n        return startIndex + 1;\n      }\n      if (explicitArg) {\n        argCount = self._matchArgument(action, 'A');\n\n        // if the action is a single-dash option and takes no\n        // arguments, try to parse more single-dash options out\n        // of the tail of the option string\n        var chars = self.prefixChars;\n        if (argCount === 0 && chars.indexOf(optionString[1]) < 0) {\n          actionTuples.push([ action, [], optionString ]);\n          optionString = optionString[0] + explicitArg[0];\n          var newExplicitArg = explicitArg.slice(1) || null;\n          var optionalsMap = self._optionStringActions;\n\n          if (Object.keys(optionalsMap).indexOf(optionString) >= 0) {\n            action = optionalsMap[optionString];\n            explicitArg = newExplicitArg;\n          } else {\n            throw argumentErrorHelper(action, sprintf('ignored explicit argument %r', explicitArg));\n          }\n        } else if (argCount === 1) {\n          // if the action expect exactly one argument, we've\n          // successfully matched the option; exit the loop\n          stop = startIndex + 1;\n          args = [ explicitArg ];\n          actionTuples.push([ action, args, optionString ]);\n          break;\n        } else {\n          // error if a double-dash option did not use the\n          // explicit argument\n          throw argumentErrorHelper(action, sprintf('ignored explicit argument %r', explicitArg));\n        }\n      } else {\n        // if there is no explicit argument, try to match the\n        // optional's string arguments with the following strings\n        // if successful, exit the loop\n\n        start = startIndex + 1;\n        var selectedPatterns = argStringsPattern.substr(start);\n\n        argCount = self._matchArgument(action, selectedPatterns);\n        stop = start + argCount;\n\n\n        args = argStrings.slice(start, stop);\n\n        actionTuples.push([ action, args, optionString ]);\n        break;\n      }\n\n    }\n\n    // add the Optional to the list and return the index at which\n    // the Optional's string args stopped\n    if (actionTuples.length < 1) {\n      throw new Error('length should be > 0');\n    }\n    for (var i = 0; i < actionTuples.length; i++) {\n      takeAction.apply(self, actionTuples[i]);\n    }\n    return stop;\n  }\n\n  // the list of Positionals left to be parsed; this is modified\n  // by consume_positionals()\n  var positionals = self._getPositionalActions();\n\n  function consumePositionals(startIndex) {\n    // match as many Positionals as possible\n    var selectedPattern = argStringsPattern.substr(startIndex);\n    var argCounts = self._matchArgumentsPartial(positionals, selectedPattern);\n\n    // slice off the appropriate arg strings for each Positional\n    // and add the Positional and its args to the list\n    for (var i = 0; i < positionals.length; i++) {\n      var action = positionals[i];\n      var argCount = argCounts[i];\n      if (typeof argCount === 'undefined') {\n        continue;\n      }\n      var args = argStrings.slice(startIndex, startIndex + argCount);\n\n      startIndex += argCount;\n      takeAction(action, args);\n    }\n\n    // slice off the Positionals that we just parsed and return the\n    // index at which the Positionals' string args stopped\n    positionals = positionals.slice(argCounts.length);\n    return startIndex;\n  }\n\n  // consume Positionals and Optionals alternately, until we have\n  // passed the last option string\n  var startIndex = 0;\n  var position;\n\n  var maxOptionStringIndex = -1;\n\n  Object.keys(optionStringIndices).forEach(function (position) {\n    maxOptionStringIndex = Math.max(maxOptionStringIndex, parseInt(position, 10));\n  });\n\n  var positionalsEndIndex, nextOptionStringIndex;\n\n  while (startIndex <= maxOptionStringIndex) {\n    // consume any Positionals preceding the next option\n    nextOptionStringIndex = null;\n    for (position in optionStringIndices) {\n      if (!optionStringIndices.hasOwnProperty(position)) { continue; }\n\n      position = parseInt(position, 10);\n      if (position >= startIndex) {\n        if (nextOptionStringIndex !== null) {\n          nextOptionStringIndex = Math.min(nextOptionStringIndex, position);\n        } else {\n          nextOptionStringIndex = position;\n        }\n      }\n    }\n\n    if (startIndex !== nextOptionStringIndex) {\n      positionalsEndIndex = consumePositionals(startIndex);\n      // only try to parse the next optional if we didn't consume\n      // the option string during the positionals parsing\n      if (positionalsEndIndex > startIndex) {\n        startIndex = positionalsEndIndex;\n        continue;\n      } else {\n        startIndex = positionalsEndIndex;\n      }\n    }\n\n    // if we consumed all the positionals we could and we're not\n    // at the index of an option string, there were extra arguments\n    if (!optionStringIndices[startIndex]) {\n      var strings = argStrings.slice(startIndex, nextOptionStringIndex);\n      extras = extras.concat(strings);\n      startIndex = nextOptionStringIndex;\n    }\n    // consume the next optional and any arguments for it\n    startIndex = consumeOptional(startIndex);\n  }\n\n  // consume any positionals following the last Optional\n  var stopIndex = consumePositionals(startIndex);\n\n  // if we didn't consume all the argument strings, there were extras\n  extras = extras.concat(argStrings.slice(stopIndex));\n\n  // if we didn't use all the Positional objects, there were too few\n  // arg strings supplied.\n  if (positionals.length > 0) {\n    self.error('too few arguments');\n  }\n\n  // make sure all required actions were present\n  self._actions.forEach(function (action) {\n    if (action.required) {\n      if (seenActions.indexOf(action) < 0) {\n        self.error(format('Argument \"%s\" is required', action.getName()));\n      }\n    }\n  });\n\n  // make sure all required groups have one option present\n  var actionUsed = false;\n  self._mutuallyExclusiveGroups.forEach(function (group) {\n    if (group.required) {\n      actionUsed = group._groupActions.some(function (action) {\n        return seenNonDefaultActions.indexOf(action) !== -1;\n      });\n\n      // if no actions were used, report the error\n      if (!actionUsed) {\n        var names = [];\n        group._groupActions.forEach(function (action) {\n          if (action.help !== c.SUPPRESS) {\n            names.push(action.getName());\n          }\n        });\n        names = names.join(' ');\n        var msg = 'one of the arguments ' + names + ' is required';\n        self.error(msg);\n      }\n    }\n  });\n\n  // return the updated namespace and the extra arguments\n  return [ namespace, extras ];\n};\n\nArgumentParser.prototype._readArgsFromFiles = function (argStrings) {\n  // expand arguments referencing files\n  var self = this;\n  var fs = require('fs');\n  var newArgStrings = [];\n  argStrings.forEach(function (argString) {\n    if (self.fromfilePrefixChars.indexOf(argString[0]) < 0) {\n      // for regular arguments, just add them back into the list\n      newArgStrings.push(argString);\n    } else {\n      // replace arguments referencing files with the file content\n      try {\n        var argstrs = [];\n        var filename = argString.slice(1);\n        var content = fs.readFileSync(filename, 'utf8');\n        content = content.trim().split('\\n');\n        content.forEach(function (argLine) {\n          self.convertArgLineToArgs(argLine).forEach(function (arg) {\n            argstrs.push(arg);\n          });\n          argstrs = self._readArgsFromFiles(argstrs);\n        });\n        newArgStrings.push.apply(newArgStrings, argstrs);\n      } catch (error) {\n        return self.error(error.message);\n      }\n    }\n  });\n  return newArgStrings;\n};\n\nArgumentParser.prototype.convertArgLineToArgs = function (argLine) {\n  return [ argLine ];\n};\n\nArgumentParser.prototype._matchArgument = function (action, regexpArgStrings) {\n\n  // match the pattern for this action to the arg strings\n  var regexpNargs = new RegExp('^' + this._getNargsPattern(action));\n  var matches = regexpArgStrings.match(regexpNargs);\n  var message;\n\n  // throw an exception if we weren't able to find a match\n  if (!matches) {\n    switch (action.nargs) {\n    /*eslint-disable no-undefined*/\n    case undefined:\n    case null:\n      message = 'Expected one argument.';\n      break;\n    case c.OPTIONAL:\n      message = 'Expected at most one argument.';\n      break;\n    case c.ONE_OR_MORE:\n      message = 'Expected at least one argument.';\n      break;\n    default:\n      message = 'Expected %s argument(s)';\n    }\n\n    throw argumentErrorHelper(\n      action,\n      format(message, action.nargs)\n    );\n  }\n  // return the number of arguments matched\n  return matches[1].length;\n};\n\nArgumentParser.prototype._matchArgumentsPartial = function (actions, regexpArgStrings) {\n  // progressively shorten the actions list by slicing off the\n  // final actions until we find a match\n  var self = this;\n  var result = [];\n  var actionSlice, pattern, matches;\n  var i, j;\n\n  function getLength(string) {\n    return string.length;\n  }\n\n  for (i = actions.length; i > 0; i--) {\n    pattern = '';\n    actionSlice = actions.slice(0, i);\n    for (j = 0; j < actionSlice.length; j++) {\n      pattern += self._getNargsPattern(actionSlice[j]);\n    }\n\n    pattern = new RegExp('^' + pattern);\n    matches = regexpArgStrings.match(pattern);\n\n    if (matches && matches.length > 0) {\n      // need only groups\n      matches = matches.splice(1);\n      result = result.concat(matches.map(getLength));\n      break;\n    }\n  }\n\n  // return the list of arg string counts\n  return result;\n};\n\nArgumentParser.prototype._parseOptional = function (argString) {\n  var action, optionString, argExplicit, optionTuples;\n\n  // if it's an empty string, it was meant to be a positional\n  if (!argString) {\n    return null;\n  }\n\n  // if it doesn't start with a prefix, it was meant to be positional\n  if (this.prefixChars.indexOf(argString[0]) < 0) {\n    return null;\n  }\n\n  // if the option string is present in the parser, return the action\n  if (this._optionStringActions[argString]) {\n    return [ this._optionStringActions[argString], argString, null ];\n  }\n\n  // if it's just a single character, it was meant to be positional\n  if (argString.length === 1) {\n    return null;\n  }\n\n  // if the option string before the \"=\" is present, return the action\n  if (argString.indexOf('=') >= 0) {\n    optionString = argString.split('=', 1)[0];\n    argExplicit = argString.slice(optionString.length + 1);\n\n    if (this._optionStringActions[optionString]) {\n      action = this._optionStringActions[optionString];\n      return [ action, optionString, argExplicit ];\n    }\n  }\n\n  // search through all possible prefixes of the option string\n  // and all actions in the parser for possible interpretations\n  optionTuples = this._getOptionTuples(argString);\n\n  // if multiple actions match, the option string was ambiguous\n  if (optionTuples.length > 1) {\n    var optionStrings = optionTuples.map(function (optionTuple) {\n      return optionTuple[1];\n    });\n    this.error(format(\n          'Ambiguous option: \"%s\" could match %s.',\n          argString, optionStrings.join(', ')\n    ));\n  // if exactly one action matched, this segmentation is good,\n  // so return the parsed action\n  } else if (optionTuples.length === 1) {\n    return optionTuples[0];\n  }\n\n  // if it was not found as an option, but it looks like a negative\n  // number, it was meant to be positional\n  // unless there are negative-number-like options\n  if (argString.match(this._regexpNegativeNumber)) {\n    if (!this._hasNegativeNumberOptionals.some(Boolean)) {\n      return null;\n    }\n  }\n  // if it contains a space, it was meant to be a positional\n  if (argString.search(' ') >= 0) {\n    return null;\n  }\n\n  // it was meant to be an optional but there is no such option\n  // in this parser (though it might be a valid option in a subparser)\n  return [ null, argString, null ];\n};\n\nArgumentParser.prototype._getOptionTuples = function (optionString) {\n  var result = [];\n  var chars = this.prefixChars;\n  var optionPrefix;\n  var argExplicit;\n  var action;\n  var actionOptionString;\n\n  // option strings starting with two prefix characters are only split at\n  // the '='\n  if (chars.indexOf(optionString[0]) >= 0 && chars.indexOf(optionString[1]) >= 0) {\n    if (optionString.indexOf('=') >= 0) {\n      var optionStringSplit = optionString.split('=', 1);\n\n      optionPrefix = optionStringSplit[0];\n      argExplicit = optionStringSplit[1];\n    } else {\n      optionPrefix = optionString;\n      argExplicit = null;\n    }\n\n    for (actionOptionString in this._optionStringActions) {\n      if (actionOptionString.substr(0, optionPrefix.length) === optionPrefix) {\n        action = this._optionStringActions[actionOptionString];\n        result.push([ action, actionOptionString, argExplicit ]);\n      }\n    }\n\n  // single character options can be concatenated with their arguments\n  // but multiple character options always have to have their argument\n  // separate\n  } else if (chars.indexOf(optionString[0]) >= 0 && chars.indexOf(optionString[1]) < 0) {\n    optionPrefix = optionString;\n    argExplicit = null;\n    var optionPrefixShort = optionString.substr(0, 2);\n    var argExplicitShort = optionString.substr(2);\n\n    for (actionOptionString in this._optionStringActions) {\n      if (!$$.has(this._optionStringActions, actionOptionString)) continue;\n\n      action = this._optionStringActions[actionOptionString];\n      if (actionOptionString === optionPrefixShort) {\n        result.push([ action, actionOptionString, argExplicitShort ]);\n      } else if (actionOptionString.substr(0, optionPrefix.length) === optionPrefix) {\n        result.push([ action, actionOptionString, argExplicit ]);\n      }\n    }\n\n  // shouldn't ever get here\n  } else {\n    throw new Error(format('Unexpected option string: %s.', optionString));\n  }\n  // return the collected option tuples\n  return result;\n};\n\nArgumentParser.prototype._getNargsPattern = function (action) {\n  // in all examples below, we have to allow for '--' args\n  // which are represented as '-' in the pattern\n  var regexpNargs;\n\n  switch (action.nargs) {\n  // the default (null) is assumed to be a single argument\n  case undefined:\n  case null:\n    regexpNargs = '(-*A-*)';\n    break;\n  // allow zero or more arguments\n  case c.OPTIONAL:\n    regexpNargs = '(-*A?-*)';\n    break;\n  // allow zero or more arguments\n  case c.ZERO_OR_MORE:\n    regexpNargs = '(-*[A-]*)';\n    break;\n  // allow one or more arguments\n  case c.ONE_OR_MORE:\n    regexpNargs = '(-*A[A-]*)';\n    break;\n  // allow any number of options or arguments\n  case c.REMAINDER:\n    regexpNargs = '([-AO]*)';\n    break;\n  // allow one argument followed by any number of options or arguments\n  case c.PARSER:\n    regexpNargs = '(-*A[-AO]*)';\n    break;\n  // all others should be integers\n  default:\n    regexpNargs = '(-*' + $$.repeat('-*A', action.nargs) + '-*)';\n  }\n\n  // if this is an optional action, -- is not allowed\n  if (action.isOptional()) {\n    regexpNargs = regexpNargs.replace(/-\\*/g, '');\n    regexpNargs = regexpNargs.replace(/-/g, '');\n  }\n\n  // return the pattern\n  return regexpNargs;\n};\n\n//\n// Value conversion methods\n//\n\nArgumentParser.prototype._getValues = function (action, argStrings) {\n  var self = this;\n\n  // for everything but PARSER args, strip out '--'\n  if (action.nargs !== c.PARSER && action.nargs !== c.REMAINDER) {\n    argStrings = argStrings.filter(function (arrayElement) {\n      return arrayElement !== '--';\n    });\n  }\n\n  var value, argString;\n\n  // optional argument produces a default when not present\n  if (argStrings.length === 0 && action.nargs === c.OPTIONAL) {\n\n    value = (action.isOptional()) ? action.constant : action.defaultValue;\n\n    if (typeof (value) === 'string') {\n      value = this._getValue(action, value);\n      this._checkValue(action, value);\n    }\n\n  // when nargs='*' on a positional, if there were no command-line\n  // args, use the default if it is anything other than None\n  } else if (argStrings.length === 0 && action.nargs === c.ZERO_OR_MORE &&\n    action.optionStrings.length === 0) {\n\n    value = (action.defaultValue || argStrings);\n    this._checkValue(action, value);\n\n  // single argument or optional argument produces a single value\n  } else if (argStrings.length === 1 &&\n        (!action.nargs || action.nargs === c.OPTIONAL)) {\n\n    argString = argStrings[0];\n    value = this._getValue(action, argString);\n    this._checkValue(action, value);\n\n  // REMAINDER arguments convert all values, checking none\n  } else if (action.nargs === c.REMAINDER) {\n    value = argStrings.map(function (v) {\n      return self._getValue(action, v);\n    });\n\n  // PARSER arguments convert all values, but check only the first\n  } else if (action.nargs === c.PARSER) {\n    value = argStrings.map(function (v) {\n      return self._getValue(action, v);\n    });\n    this._checkValue(action, value[0]);\n\n  // all other types of nargs produce a list\n  } else {\n    value = argStrings.map(function (v) {\n      return self._getValue(action, v);\n    });\n    value.forEach(function (v) {\n      self._checkValue(action, v);\n    });\n  }\n\n  // return the converted value\n  return value;\n};\n\nArgumentParser.prototype._getValue = function (action, argString) {\n  var result;\n\n  var typeFunction = this._registryGet('type', action.type, action.type);\n  if (typeof typeFunction !== 'function') {\n    var message = format('%s is not callable', typeFunction);\n    throw argumentErrorHelper(action, message);\n  }\n\n  // convert the value to the appropriate type\n  try {\n    result = typeFunction(argString);\n\n    // ArgumentTypeErrors indicate errors\n    // If action.type is not a registered string, it is a function\n    // Try to deduce its name for inclusion in the error message\n    // Failing that, include the error message it raised.\n  } catch (e) {\n    var name = null;\n    if (typeof action.type === 'string') {\n      name = action.type;\n    } else {\n      name = action.type.name || action.type.displayName || '<function>';\n    }\n    var msg = format('Invalid %s value: %s', name, argString);\n    if (name === '<function>') { msg += '\\n' + e.message; }\n    throw argumentErrorHelper(action, msg);\n  }\n  // return the converted value\n  return result;\n};\n\nArgumentParser.prototype._checkValue = function (action, value) {\n  // converted value must be one of the choices (if specified)\n  var choices = action.choices;\n  if (choices) {\n    // choise for argument can by array or string\n    if ((typeof choices === 'string' || Array.isArray(choices)) &&\n        choices.indexOf(value) !== -1) {\n      return;\n    }\n    // choise for subparsers can by only hash\n    if (typeof choices === 'object' && !Array.isArray(choices) && choices[value]) {\n      return;\n    }\n\n    if (typeof choices === 'string') {\n      choices = choices.split('').join(', ');\n    } else if (Array.isArray(choices)) {\n      choices =  choices.join(', ');\n    } else {\n      choices =  Object.keys(choices).join(', ');\n    }\n    var message = format('Invalid choice: %s (choose from [%s])', value, choices);\n    throw argumentErrorHelper(action, message);\n  }\n};\n\n//\n// Help formatting methods\n//\n\n/**\n * ArgumentParser#formatUsage -> string\n *\n * Return usage string\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.formatUsage = function () {\n  var formatter = this._getFormatter();\n  formatter.addUsage(this.usage, this._actions, this._mutuallyExclusiveGroups);\n  return formatter.formatHelp();\n};\n\n/**\n * ArgumentParser#formatHelp -> string\n *\n * Return help\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.formatHelp = function () {\n  var formatter = this._getFormatter();\n\n  // usage\n  formatter.addUsage(this.usage, this._actions, this._mutuallyExclusiveGroups);\n\n  // description\n  formatter.addText(this.description);\n\n  // positionals, optionals and user-defined groups\n  this._actionGroups.forEach(function (actionGroup) {\n    formatter.startSection(actionGroup.title);\n    formatter.addText(actionGroup.description);\n    formatter.addArguments(actionGroup._groupActions);\n    formatter.endSection();\n  });\n\n  // epilog\n  formatter.addText(this.epilog);\n\n  // determine help from format above\n  return formatter.formatHelp();\n};\n\nArgumentParser.prototype._getFormatter = function () {\n  var FormatterClass = this.formatterClass;\n  var formatter = new FormatterClass({ prog: this.prog });\n  return formatter;\n};\n\n//\n//  Print functions\n//\n\n/**\n * ArgumentParser#printUsage() -> Void\n *\n * Print usage\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.printUsage = function () {\n  this._printMessage(this.formatUsage());\n};\n\n/**\n * ArgumentParser#printHelp() -> Void\n *\n * Print help\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.printHelp = function () {\n  this._printMessage(this.formatHelp());\n};\n\nArgumentParser.prototype._printMessage = function (message, stream) {\n  if (!stream) {\n    stream = process.stdout;\n  }\n  if (message) {\n    stream.write('' + message);\n  }\n};\n\n//\n//  Exit functions\n//\n\n/**\n * ArgumentParser#exit(status=0, message) -> Void\n * - status (int): exit status\n * - message (string): message\n *\n * Print message in stderr/stdout and exit program\n **/\nArgumentParser.prototype.exit = function (status, message) {\n  if (message) {\n    if (status === 0) {\n      this._printMessage(message);\n    } else {\n      this._printMessage(message, process.stderr);\n    }\n  }\n\n  process.exit(status);\n};\n\n/**\n * ArgumentParser#error(message) -> Void\n * - err (Error|string): message\n *\n * Error method Prints a usage message incorporating the message to stderr and\n * exits. If you override this in a subclass,\n * it should not return -- it should\n * either exit or throw an exception.\n *\n **/\nArgumentParser.prototype.error = function (err) {\n  var message;\n  if (err instanceof Error) {\n    if (this.debug === true) {\n      throw err;\n    }\n    message = err.message;\n  } else {\n    message = err;\n  }\n  var msg = format('%s: error: %s', this.prog, message) + c.EOL;\n\n  if (this.debug === true) {\n    throw new Error(msg);\n  }\n\n  this.printUsage(process.stderr);\n\n  return this.exit(2, msg);\n};\n\nmodule.exports = ArgumentParser;\n"]}