{"version":3,"sources":["subparsers.js"],"names":[],"mappings":";;;;;;;AAOA;;AAEA,IAAI,OAAU,QAAQ,MAAR,CAAV;AACJ,IAAI,SAAU,QAAQ,MAAR,EAAgB,MAAhB;;AAGd,IAAI,SAAS,QAAQ,WAAR,CAAT;;;AAGJ,IAAI,IAAI,QAAQ,UAAR,CAAJ;;;AAGJ,IAAI,sBAAsB,QAAQ,mBAAR,CAAtB;;;;;;;;AASJ,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,IAAnC,EAAyC;AACvC,MAAI,UAAU;AACZ,mBAAe,EAAf;AACA,UAAM,IAAN;AACA,UAAM,IAAN;GAHE,CADmC;;AAOvC,SAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,EAPuC;CAAzC;;AAUA,KAAK,QAAL,CAAc,mBAAd,EAAmC,MAAnC;;;;;;;AAOA,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACjC,YAAU,WAAW,EAAX,CADuB;AAEjC,UAAQ,IAAR,GAAe,QAAQ,IAAR,IAAgB,EAAE,QAAF,CAFE;AAGjC,UAAQ,KAAR,GAAgB,EAAE,MAAF,CAHiB;;AAKjC,OAAK,KAAL,GAAc,QAAQ,KAAR,KAAkB,IAAlB,CALmB;;AAOjC,OAAK,WAAL,GAAmB,QAAQ,IAAR,CAPc;AAQjC,OAAK,YAAL,GAAoB,QAAQ,WAAR,CARa;AASjC,OAAK,cAAL,GAAsB,EAAtB,CATiC;AAUjC,OAAK,eAAL,GAAuB,EAAvB,CAViC;;AAYjC,UAAQ,OAAR,GAAkB,KAAK,cAAL,CAZe;AAajC,SAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,EAbiC;CAAnC;;AAgBA,KAAK,QAAL,CAAc,gBAAd,EAAgC,MAAhC;;;;;;;;;;;;;AAaA,iBAAiB,SAAjB,CAA2B,SAA3B,GAAuC,UAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC9D,MAAI,MAAJ,CAD8D;;AAG9D,MAAI,OAAO,IAAP,CAH0D;;AAK9D,YAAU,WAAW,EAAX,CALoD;;AAO9D,UAAQ,KAAR,GAAiB,KAAK,KAAL,KAAe,IAAf;;;AAP6C,MAU1D,CAAC,QAAQ,IAAR,EAAc;AACjB,YAAQ,IAAR,GAAe,KAAK,WAAL,GAAmB,GAAnB,GAAyB,IAAzB,CADE;GAAnB;;AAIA,MAAI,UAAU,QAAQ,OAAR,IAAmB,EAAnB;;;AAdgD,MAiB1D,CAAC,CAAC,QAAQ,IAAR,IAAgB,OAAO,QAAQ,IAAR,KAAiB,QAAxB,EAAkC;AACtD,QAAI,OAAO,QAAQ,IAAR,CAD2C;AAEtD,WAAO,QAAQ,IAAR,CAF+C;;AAItD,QAAI,eAAe,IAAI,mBAAJ,CAAwB,IAAxB,EAA8B,IAA9B,CAAf,CAJkD;AAKtD,SAAK,eAAL,CAAqB,IAArB,CAA0B,YAA1B,EALsD;GAAxD;;;AAjB8D,QA0B9D,GAAS,IAAI,KAAK,YAAL,CAAkB,OAAtB,CAAT,CA1B8D;AA2B9D,OAAK,cAAL,CAAoB,IAApB,IAA4B,MAA5B;;;AA3B8D,SA8B9D,CAAQ,OAAR,CAAgB,UAAU,KAAV,EAAiB;AAC/B,SAAK,cAAL,CAAoB,KAApB,IAA6B,MAA7B,CAD+B;GAAjB,CAAhB,CA9B8D;;AAkC9D,SAAO,MAAP,CAlC8D;CAAzB;;AAqCvC,iBAAiB,SAAjB,CAA2B,cAA3B,GAA4C,YAAY;AACtD,SAAO,KAAK,eAAL,CAD+C;CAAZ;;;;;;;;;;;AAa5C,iBAAiB,SAAjB,CAA2B,IAA3B,GAAkC,UAAU,MAAV,EAAkB,SAAlB,EAA6B,MAA7B,EAAqC;AACrE,MAAI,aAAa,OAAO,CAAP,CAAb,CADiE;AAErE,MAAI,aAAa,OAAO,KAAP,CAAa,CAAb,CAAb;;;AAFiE,MAKjE,KAAK,IAAL,KAAc,EAAE,QAAF,EAAY;AAC5B,cAAU,KAAK,IAAL,CAAV,GAAuB,UAAvB,CAD4B;GAA9B;;;AALqE,MAUjE,KAAK,cAAL,CAAoB,UAApB,CAAJ,EAAqC;AACnC,aAAS,KAAK,cAAL,CAAoB,UAApB,CAAT,CADmC;GAArC,MAEO;AACL,UAAM,oBAAoB,OACxB,sCADwB,EAEtB,UAFsB,EAGtB,OAAO,IAAP,CAAY,KAAK,cAAL,CAAZ,CAAiC,IAAjC,CAAsC,IAAtC,CAHsB,CAApB,CAAN,CADK;GAFP;;;AAVqE,QAqBrE,CAAO,SAAP,CAAiB,UAAjB,EAA6B,SAA7B,EArBqE;CAArC;;AAwBlC,OAAO,OAAP,GAAiB,gBAAjB","file":"subparsers-compiled.js","sourcesContent":["/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\n\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n// Errors\nvar argumentErrorHelper = require('../argument/error');\n\n\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\nfunction ChoicesPseudoAction(name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n\n  Action.call(this, options);\n}\n\nutil.inherits(ChoicesPseudoAction, Action);\n\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nfunction ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || c.SUPPRESS;\n  options.nargs = c.PARSER;\n\n  this.debug = (options.debug === true);\n\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n}\n\nutil.inherits(ActionSubparsers, Action);\n\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n\n  var self = this;\n\n  options = options || {};\n\n  options.debug = (this.debug === true);\n\n  // set program from the existing prefix\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n\n  var aliases = options.aliases || [];\n\n  // create a pseudo-action to hold the choice help\n  if (!!options.help || typeof options.help === 'string') {\n    var help = options.help;\n    delete options.help;\n\n    var choiceAction = new ChoicesPseudoAction(name, help);\n    this._choicesActions.push(choiceAction);\n  }\n\n  // create the parser and add it to the map\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser;\n\n  // make parser available under aliases also\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n\n  return parser;\n};\n\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1);\n\n  // set the parser name if requested\n  if (this.dest !== c.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  }\n\n  // select the parser\n  if (this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format(\n      'Unknown parser \"%s\" (choices: [%s]).',\n        parserName,\n        Object.keys(this._nameParserMap).join(', ')\n    ));\n  }\n\n  // parse all the remaining options into the namespace\n  parser.parseArgs(argStrings, namespace);\n};\n\nmodule.exports = ActionSubparsers;\n"]}