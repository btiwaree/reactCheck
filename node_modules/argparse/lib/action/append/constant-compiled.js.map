{"version":3,"sources":["constant.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,IAAI,SAAS,QAAQ,cAAR,CAAT;;;;;;;AAOJ,IAAI,uBAAuB,OAAO,OAAP,GAAiB,SAAS,oBAAT,CAA8B,OAA9B,EAAuC;AACjF,YAAU,WAAW,EAAX,CADuE;AAEjF,UAAQ,KAAR,GAAgB,CAAhB,CAFiF;AAGjF,MAAI,OAAO,QAAQ,QAAR,KAAqB,WAA5B,EAAyC;AAC3C,UAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN,CAD2C;GAA7C;AAGA,SAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,EANiF;CAAvC;AAQ5C,KAAK,QAAL,CAAc,oBAAd,EAAoC,MAApC;;;;;;;;;;;AAWA,qBAAqB,SAArB,CAA+B,IAA/B,GAAsC,UAAU,MAAV,EAAkB,SAAlB,EAA6B;AACjE,MAAI,QAAQ,GAAG,MAAH,CAAU,UAAU,KAAK,IAAL,CAAV,IAAwB,EAAxB,CAAlB,CAD6D;AAEjE,QAAM,IAAN,CAAW,KAAK,QAAL,CAAX,CAFiE;AAGjE,YAAU,GAAV,CAAc,KAAK,IAAL,EAAW,KAAzB,EAHiE;CAA7B","file":"constant-compiled.js","sourcesContent":["/*:nodoc:*\n * class ActionAppendConstant\n *\n * This stores a list, and appends the value specified by\n * the const keyword argument to the list.\n * (Note that the const keyword argument defaults to null.)\n * The 'appendConst' action is typically useful when multiple\n * arguments need to store constants to the same list.\n *\n * This class inherited from [[Action]]\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../../action');\n\n/*:nodoc:*\n * new ActionAppendConstant(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionAppendConstant = module.exports = function ActionAppendConstant(options) {\n  options = options || {};\n  options.nargs = 0;\n  if (typeof options.constant === 'undefined') {\n    throw new Error('constant option is required for appendAction');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppendConstant, Action);\n\n/*:nodoc:*\n * ActionAppendConstant#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppendConstant.prototype.call = function (parser, namespace) {\n  var items = [].concat(namespace[this.dest] || []);\n  items.push(this.constant);\n  namespace.set(this.dest, items);\n};\n"]}