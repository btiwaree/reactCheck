{"version":3,"sources":["append.js"],"names":[],"mappings":";;;;;;;;;AASA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,IAAI,SAAS,QAAQ,WAAR,CAAT;;;AAGJ,IAAI,IAAI,QAAQ,UAAR,CAAJ;;;;;;;;;AASJ,IAAI,eAAe,OAAO,OAAP,GAAiB,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AACjE,YAAU,WAAW,EAAX,CADuD;AAEjE,MAAI,KAAK,KAAL,IAAc,CAAd,EAAiB;AACnB,UAAM,IAAI,KAAJ,CAAU,kDACZ,iDADY,GAEZ,iDAFY,CAAhB,CADmB;GAArB;AAKA,MAAI,CAAC,CAAC,KAAK,QAAL,IAAiB,KAAK,KAAL,KAAe,EAAE,QAAF,EAAY;AAChD,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN,CADgD;GAAlD;AAGA,SAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,EAViE;CAA/B;AAYpC,KAAK,QAAL,CAAc,YAAd,EAA4B,MAA5B;;;;;;;;;;;AAWA,aAAa,SAAb,CAAuB,IAAvB,GAA8B,UAAU,MAAV,EAAkB,SAAlB,EAA6B,MAA7B,EAAqC;AACjE,MAAI,QAAQ,CAAC,UAAU,KAAK,IAAL,CAAV,IAAwB,EAAxB,CAAD,CAA6B,KAA7B,EAAR,CAD6D;AAEjE,QAAM,IAAN,CAAW,MAAX,EAFiE;AAGjE,YAAU,GAAV,CAAc,KAAK,IAAL,EAAW,KAAzB,EAHiE;CAArC","file":"append-compiled.js","sourcesContent":["/*:nodoc:*\n * class ActionAppend\n *\n * This action stores a list, and appends each argument value to the list.\n * This is useful to allow an option to be specified multiple times.\n * This class inherided from [[Action]]\n *\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n/*:nodoc:*\n * new ActionAppend(options)\n * - options (object): options hash see [[Action.new]]\n *\n * Note: options.nargs should be optional for constants\n * and more then zero for other\n **/\nvar ActionAppend = module.exports = function ActionAppend(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for append actions must be > 0; if arg ' +\n        'strings are not supplying the value to append, ' +\n        'the append const action may be more appropriate');\n  }\n  if (!!this.constant && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppend, Action);\n\n/*:nodoc:*\n * ActionAppend#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppend.prototype.call = function (parser, namespace, values) {\n  var items = (namespace[this.dest] || []).slice();\n  items.push(values);\n  namespace.set(this.dest, items);\n};\n"]}