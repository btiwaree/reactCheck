{"version":3,"sources":["fs_test.js"],"names":[],"mappings":";AACA,IAAI,SAAS,QAAQ,mBAAR,CAAT;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,SAAS,WAAT;AACJ,IAAI,WAAW,cAAX;AACJ,IAAI,YAAY,SAAS,SAAT;;AAEhB,QAAQ,EAAR,GAAa;AACX,aAAW,UAAS,IAAT,EAAe;AACxB,QAAI,MAAJ,EAAY,OAAZ,CADwB;;AAGxB,QAAI,WAAW,IAAI,OAAO,QAAP,CAAgB,YAAW;AAC3C,aAAO,GAAG,gBAAH,CAAoB,QAApB,EACL,EADK,CACF,MADE,EACM,UAAS,EAAT,EAAa;AACvB,iBAAS,EAAT,CADuB;OAAb,CADN,CAIL,EAJK,CAIF,OAJE,EAIO,YAAW;AACrB,iBAAS,SAAT,CADqB;AAErB,eAFqB;OAAX,CAJd,CAD2C;KAAX,CAA/B,CAHoB;;AAcxB,QAAI,WAAW,IAAI,OAAO,QAAP,CAAgB,YAAW;AAC5C,aAAO,GAAG,iBAAH,CAAqB,SAArB,EACJ,EADI,CACD,MADC,EACO,UAAS,EAAT,EAAa;AACvB,kBAAU,EAAV,CADuB;OAAb,CADP,CAIJ,EAJI,CAID,OAJC,EAIQ,YAAW;AACtB,kBAAU,SAAV,CADsB;AAErB,eAFqB;OAAX,CAJf,CAD4C;KAAX,CAA/B,CAdoB;;AAyBxB,SAAK,MAAL,CAAY,CAAZ,EAzBwB;;AA2BxB,SAAK,KAAL,CAAW,MAAX,EAAmB,SAAnB,EAA8B,4CAA9B,EA3BwB;AA4BxB,SAAK,KAAL,CAAW,OAAX,EAAoB,SAApB,EAA+B,8CAA/B,EA5BwB;;AA8BxB,QAAI,CAAC,GAAG,UAAH,CAAc,MAAd,CAAD,EAAwB;AAC1B,SAAG,SAAH,CAAa,MAAb,EAD0B;KAA5B;AAGA,QAAI,GAAG,UAAH,CAAc,SAAd,CAAJ,EAA8B;AAC5B,SAAG,UAAH,CAAc,SAAd,EAD4B;KAA9B;;AAIA,aAAS,EAAT,CAAY,KAAZ,EAAmB,YAAW;AAAE,aAAF;KAAX,CAAnB,CArCwB;AAsCxB,aAAS,EAAT,CAAY,KAAZ,EAAmB,YAAW;AAAE,aAAF;KAAX,CAAnB,CAtCwB;;AAwCxB,QAAI,QAAQ,CAAR,CAxCoB;AAyCxB,aAAS,IAAT,GAAgB;AACd,eAAS,CAAT,CADc;AAEd,UAAI,SAAS,CAAT,EAAY;AACd,YAAI,QAAQ,GAAG,YAAH,CAAgB,QAAhB,CAAR,CADU;AAEd,YAAI,SAAS,GAAG,YAAH,CAAgB,SAAhB,CAAT,CAFU;;AAId,aAAK,EAAL,CAAQ,SAAS,MAAT,IAAmB,SAAS,MAAT,EAAiB,iBAA5C,EAJc;;AAMd,WAAG,UAAH,CAAc,SAAd,EANc;AAOd,WAAG,SAAH,CAAa,MAAb,EAPc;;AASd,aAAK,IAAL,GATc;OAAhB;KAFF,CAzCwB;;AAwDxB,aAAS,IAAT,CAAc,QAAd,EAxDwB;GAAf;CADb","file":"fs_test-compiled.js","sourcesContent":["\nvar stream = require('../lib/lazystream');\nvar fs = require('fs');\nvar tmpDir = 'test/tmp/';\nvar readFile = 'test/data.md';\nvar writeFile = tmpDir + 'data.md';\n\nexports.fs = {\n  readwrite: function(test) {\n    var readfd, writefd;\n\n    var readable = new stream.Readable(function() {\n       return fs.createReadStream(readFile)\n        .on('open', function(fd) {\n          readfd = fd;\n        })\n        .on('close', function() {\n           readfd = undefined;\n           step();\n        });\n    });\n\n    var writable = new stream.Writable(function() {\n      return fs.createWriteStream(writeFile)\n        .on('open', function(fd) {\n          writefd = fd;\n        })\n        .on('close', function() {\n          writefd = undefined;\n           step();\n        });\n    });\n\n    test.expect(3);\n\n    test.equal(readfd, undefined, 'Input file should not be opened until read');\n    test.equal(writefd, undefined, 'Output file should not be opened until write');\n\n    if (!fs.existsSync(tmpDir)) {\n      fs.mkdirSync(tmpDir);\n    }\n    if (fs.existsSync(writeFile)) {\n      fs.unlinkSync(writeFile);\n    }\n\n    readable.on('end', function() { step(); });\n    writable.on('end', function() { step(); });\n\n    var steps = 0;\n    function step() {\n      steps += 1;\n      if (steps == 4) {\n        var input = fs.readFileSync(readFile);\n        var output = fs.readFileSync(writeFile);\n\n        test.ok(input >= output && input <= output, 'Should be equal');\n\n        fs.unlinkSync(writeFile);\n        fs.rmdirSync(tmpDir);\n\n        test.done();\n      }\n    };\n\n    readable.pipe(writable);\n  }\n};\n\n\n"]}