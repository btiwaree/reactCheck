{"version":3,"sources":["writeStream.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,KAAK,QAAQ,aAAR,CAAL;;AAEJ,IAAI,KAAK,QAAQ,sBAAR,CAAL;AACJ,IAAI,aAAa,QAAQ,kCAAR,CAAb;;AAEJ,SAAS,WAAT,CAAqB,SAArB,EAAgC,IAAhC,EAAsC,OAAtC,EAA+C;AAC7C,MAAI,MAAM;AACR,UAAM,KAAK,IAAL,CAAU,IAAV;AACN,UAAM,KAAK,IAAL;GAFJ,CADyC;;AAM7C,MAAI,YAAY,GAAG,iBAAH,CAAqB,SAArB,EAAgC,GAAhC,CAAZ,CANyC;;AAQ7C,OAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,EAA4B,QAA5B,EAR6C;AAS7C,OAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,EAA0B,aAA1B,EAT6C;AAU7C,YAAU,IAAV,CAAe,OAAf,EAAwB,QAAxB,EAV6C;AAW7C,YAAU,IAAV,CAAe,QAAf,EAAyB,QAAzB;;;;;AAX6C,MAgB7C,CAAK,QAAL,CAAc,IAAd,CAAmB,SAAnB,EAA8B,EAAE,KAAK,KAAL,EAAhC,EAhB6C;;AAkB7C,WAAS,aAAT,GAAyB;AACvB,eAAW,IAAX,EAAiB,QAAjB,EADuB;GAAzB;;AAIA,WAAS,GAAT,CAAa,aAAb,EAA4B;AAC1B,cAAU,GAAV,CAAc,KAAd,EAD0B;;AAG1B,aAAS,KAAT,CAAe,MAAf,EAAuB;AACrB,cAAQ,iBAAiB,MAAjB,CAAR,CADqB;KAAvB;GAHF;;;AAtB6C,WA+BpC,QAAT,CAAkB,SAAlB,EAA6B;AAC3B,SAAK,QAAL,CAAc,cAAd,CAA6B,OAA7B,EAAsC,QAAtC,EAD2B;AAE3B,SAAK,QAAL,CAAc,cAAd,CAA6B,KAA7B,EAAoC,aAApC,EAF2B;AAG3B,cAAU,cAAV,CAAyB,OAAzB,EAAkC,QAAlC,EAH2B;AAI3B,cAAU,cAAV,CAAyB,QAAzB,EAAmC,QAAnC,EAJ2B;;AAM3B,QAAI,SAAJ,EAAe;AACb,aAAO,IAAI,SAAJ,CAAP,CADa;KAAf;;AAIA,QAAI,OAAO,UAAU,EAAV,KAAiB,QAAxB,EAAkC;AACpC,aAAO,KAAP,CADoC;KAAtC;;AAIA,OAAG,cAAH,CAAkB,UAAU,EAAV,EAAc,IAAhC,EAAsC,GAAtC,EAd2B;GAA7B;CA/BF;;AAiDA,OAAO,OAAP,GAAiB,WAAjB","file":"writeStream-compiled.js","sourcesContent":["'use strict';\n\nvar fs = require('graceful-fs');\n\nvar fo = require('../../fileOperations');\nvar streamFile = require('../../src/getContents/streamFile');\n\nfunction writeStream(writePath, file, written) {\n  var opt = {\n    mode: file.stat.mode,\n    flag: file.flag,\n  };\n\n  var outStream = fs.createWriteStream(writePath, opt);\n\n  file.contents.once('error', complete);\n  file.contents.once('end', readStreamEnd);\n  outStream.once('error', complete);\n  outStream.once('finish', complete);\n\n  // Streams are piped with end disabled, this prevents the\n  // WriteStream from closing the file descriptor after all\n  // data is written.\n  file.contents.pipe(outStream, { end: false });\n\n  function readStreamEnd() {\n    streamFile(file, complete);\n  }\n\n  function end(propagatedErr) {\n    outStream.end(onEnd);\n\n    function onEnd(endErr) {\n      written(propagatedErr || endErr);\n    }\n  }\n\n  // Cleanup\n  function complete(streamErr) {\n    file.contents.removeListener('error', complete);\n    file.contents.removeListener('end', readStreamEnd);\n    outStream.removeListener('error', complete);\n    outStream.removeListener('finish', complete);\n\n    if (streamErr) {\n      return end(streamErr);\n    }\n\n    if (typeof outStream.fd !== 'number') {\n      return end();\n    }\n\n    fo.updateMetadata(outStream.fd, file, end);\n  }\n}\n\nmodule.exports = writeStream;\n"]}