{"version":3,"sources":["prepareWrite.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,eAAR,CAAT;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,SAAS,QAAQ,QAAR,CAAT;AACJ,IAAI,KAAK,QAAQ,aAAR,CAAL;;AAEJ,SAAS,aAAT,CAAuB,CAAvB,EAA0B,IAA1B,EAAgC;AAC9B,MAAI,OAAO,CAAP,KAAa,SAAb,IAA0B,OAAO,CAAP,KAAa,UAAb,EAAyB;AACrD,WAAO,IAAP,CADqD;GAAvD;;AAIA,SAAO,OAAO,CAAP,KAAa,SAAb,GAAyB,CAAzB,GAA6B,EAAE,IAAF,CAA7B,CALuB;CAAhC;;AAQA,SAAS,YAAT,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B;AAC7B,MAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,OAAO,CAAP,KAAa,UAAb,EAAyB;AACpD,WAAO,IAAP,CADoD;GAAtD;;AAIA,SAAO,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,EAAE,IAAF,CAA5B,CALsB;CAA/B;;AAQA,SAAS,YAAT,CAAsB,SAAtB,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,EAA5C,EAAgD;AAC9C,MAAI,UAAU,OAAO;AACnB,SAAK,QAAQ,GAAR,EAAL;AACA,UAAO,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAV,GAAiB,IAA7B;AACP,aAAS,IAAT;AACA,eAAW,IAAX;GAJY,EAKX,GALW,CAAV,CAD0C;AAO9C,MAAI,YAAY,cAAc,QAAQ,SAAR,EAAmB,IAAjC,CAAZ,CAP0C;AAQ9C,UAAQ,IAAR,GAAgB,YAAY,GAAZ,GAAkB,IAAlB,CAR8B;;AAU9C,MAAI,MAAM,KAAK,OAAL,CAAa,QAAQ,GAAR,CAAnB,CAV0C;AAW9C,MAAI,gBAAgB,aAAa,SAAb,EAAwB,IAAxB,CAAhB,CAX0C;AAY9C,MAAI,CAAC,aAAD,EAAgB;AAClB,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN,CADkB;GAApB;AAGA,MAAI,WAAW,QAAQ,IAAR,GACb,aAAa,QAAQ,IAAR,EAAc,IAA3B,CADa,GACsB,KAAK,OAAL,CAAa,GAAb,EAAkB,aAAlB,CADtB,CAf+B;AAiB9C,MAAI,CAAC,QAAD,EAAW;AACb,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN,CADa;GAAf;;AAIA,MAAI,YAAY,KAAK,OAAL,CAAa,QAAb,EAAuB,KAAK,QAAL,CAAnC,CArB0C;AAsB9C,MAAI,cAAc,KAAK,OAAL,CAAa,SAAb,CAAd;;;AAtB0C,MAyB9C,CAAK,IAAL,GAAa,KAAK,IAAL,IAAa,IAAI,GAAG,KAAH,EAAjB,CAzBiC;AA0B9C,OAAK,IAAL,CAAU,IAAV,GAAiB,QAAQ,IAAR,CA1B6B;AA2B9C,OAAK,IAAL,GAAY,QAAQ,IAAR,CA3BkC;AA4B9C,OAAK,GAAL,GAAW,GAAX,CA5B8C;AA6B9C,OAAK,IAAL,GAAY,QAAZ,CA7B8C;AA8B9C,OAAK,IAAL,GAAY,SAAZ;;;AA9B8C,MAiC1C,aAAa;AACf,UAAM,QAAQ,OAAR;AACN,QAAI,EAAJ;GAFE,CAjC0C;AAqC9C,SAAO,WAAP,EAAoB,UAApB,EAAgC,UAAS,GAAT,EAAc;AAC5C,QAAI,GAAJ,EAAS;AACP,aAAO,GAAG,GAAH,CAAP,CADO;KAAT;AAGA,OAAG,IAAH,EAAS,SAAT,EAJ4C;GAAd,CAAhC,CArC8C;CAAhD;;AA6CA,OAAO,OAAP,GAAiB,YAAjB","file":"prepareWrite-compiled.js","sourcesContent":["'use strict';\n\nvar assign = require('object-assign');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar fs = require('graceful-fs');\n\nfunction booleanOrFunc(v, file) {\n  if (typeof v !== 'boolean' && typeof v !== 'function') {\n    return null;\n  }\n\n  return typeof v === 'boolean' ? v : v(file);\n}\n\nfunction stringOrFunc(v, file) {\n  if (typeof v !== 'string' && typeof v !== 'function') {\n    return null;\n  }\n\n  return typeof v === 'string' ? v : v(file);\n}\n\nfunction prepareWrite(outFolder, file, opt, cb) {\n  var options = assign({\n    cwd: process.cwd(),\n    mode: (file.stat ? file.stat.mode : null),\n    dirMode: null,\n    overwrite: true,\n  }, opt);\n  var overwrite = booleanOrFunc(options.overwrite, file);\n  options.flag = (overwrite ? 'w' : 'wx');\n\n  var cwd = path.resolve(options.cwd);\n  var outFolderPath = stringOrFunc(outFolder, file);\n  if (!outFolderPath) {\n    throw new Error('Invalid output folder');\n  }\n  var basePath = options.base ?\n    stringOrFunc(options.base, file) : path.resolve(cwd, outFolderPath);\n  if (!basePath) {\n    throw new Error('Invalid base option');\n  }\n\n  var writePath = path.resolve(basePath, file.relative);\n  var writeFolder = path.dirname(writePath);\n\n  // Wire up new properties\n  file.stat = (file.stat || new fs.Stats());\n  file.stat.mode = options.mode;\n  file.flag = options.flag;\n  file.cwd = cwd;\n  file.base = basePath;\n  file.path = writePath;\n\n  // Mkdirp the folder the file is going in\n  var mkdirpOpts = {\n    mode: options.dirMode,\n    fs: fs,\n  };\n  mkdirp(writeFolder, mkdirpOpts, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, writePath);\n  });\n}\n\nmodule.exports = prepareWrite;\n"]}