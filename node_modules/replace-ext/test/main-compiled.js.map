{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,KAAR,CAAb;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,SAAS,QAAQ,QAAR,CAAT;AACJ,QAAQ,OAAR;;AAEA,SAAS,aAAT,EAAwB,YAAW;AACjC,KAAG,oDAAH,EAAyD,UAAS,IAAT,EAAe;AACtE,QAAI,QAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,wBAArB,CAAR,CADkE;AAEtE,QAAI,WAAW,KAAK,IAAL,CAAU,SAAV,EAAqB,oBAArB,CAAX,CAFkE;AAGtE,QAAI,KAAK,WAAW,KAAX,EAAkB,KAAlB,CAAL,CAHkE;AAItE,WAAO,KAAP,CAAa,EAAb,EAJsE;AAKtE,OAAG,MAAH,CAAU,KAAV,CAAgB,QAAhB,EALsE;AAMtE,WANsE;GAAf,CAAzD,CADiC;;AAUjC,KAAG,kDAAH,EAAuD,UAAS,IAAT,EAAe;AACpE,QAAI,QAAQ,aAAR,CADgE;AAEpE,QAAI,WAAW,SAAX,CAFgE;AAGpE,QAAI,KAAK,WAAW,KAAX,EAAkB,KAAlB,CAAL,CAHgE;AAIpE,WAAO,KAAP,CAAa,EAAb,EAJoE;AAKpE,OAAG,MAAH,CAAU,KAAV,CAAgB,QAAhB,EALoE;AAMpE,WANoE;GAAf,CAAvD,CAViC;;AAmBjC,KAAG,8DAAH,EAAmE,UAAS,IAAT,EAAe;AAChF,QAAI,QAAQ,EAAR,CAD4E;AAEhF,QAAI,WAAW,EAAX,CAF4E;AAGhF,QAAI,KAAK,WAAW,KAAX,EAAkB,KAAlB,CAAL,CAH4E;AAIhF,WAAO,KAAP,CAAa,EAAb,EAJgF;AAKhF,OAAG,MAAH,CAAU,KAAV,CAAgB,QAAhB,EALgF;AAMhF,WANgF;GAAf,CAAnE,CAnBiC;;AA4BjC,KAAG,mDAAH,EAAwD,UAAS,IAAT,EAAe;AACrE,QAAI,QAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,wBAArB,CAAR,CADiE;AAErE,QAAI,WAAW,KAAK,IAAL,CAAU,SAAV,EAAqB,iBAArB,CAAX,CAFiE;AAGrE,QAAI,KAAK,WAAW,KAAX,EAAkB,EAAlB,CAAL,CAHiE;AAIrE,WAAO,KAAP,CAAa,EAAb,EAJqE;AAKrE,OAAG,MAAH,CAAU,KAAV,CAAgB,QAAhB,EALqE;AAMrE,WANqE;GAAf,CAAxD,CA5BiC;;AAqCjC,KAAG,iDAAH,EAAsD,UAAS,IAAT,EAAe;AACnE,QAAI,QAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,iBAArB,CAAR,CAD+D;AAEnE,QAAI,WAAW,KAAK,IAAL,CAAU,SAAV,EAAqB,oBAArB,CAAX,CAF+D;AAGnE,QAAI,KAAK,WAAW,KAAX,EAAkB,KAAlB,CAAL,CAH+D;AAInE,WAAO,KAAP,CAAa,EAAb,EAJmE;AAKnE,OAAG,MAAH,CAAU,KAAV,CAAgB,QAAhB,EALmE;AAMnE,WANmE;GAAf,CAAtD,CArCiC;CAAX,CAAxB","file":"main-compiled.js","sourcesContent":["var replaceExt = require('../');\nvar path = require('path');\nvar should = require('should');\nrequire('mocha');\n\ndescribe('replace-ext', function() {\n  it('should return a valid replaced extension on nested', function(done) {\n    var fname = path.join(__dirname, './fixtures/test.coffee');\n    var expected = path.join(__dirname, './fixtures/test.js');\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should return a valid replaced extension on flat', function(done) {\n    var fname = 'test.coffee';\n    var expected = 'test.js';\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should not return a valid replaced extension on empty string', function(done) {\n    var fname = '';\n    var expected = '';\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should return a valid removed extension on nested', function(done) {\n    var fname = path.join(__dirname, './fixtures/test.coffee');\n    var expected = path.join(__dirname, './fixtures/test');\n    var nu = replaceExt(fname, '');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n\n  it('should return a valid added extension on nested', function(done) {\n    var fname = path.join(__dirname, './fixtures/test');\n    var expected = path.join(__dirname, './fixtures/test.js');\n    var nu = replaceExt(fname, '.js');\n    should.exist(nu);\n    nu.should.equal(expected);\n    done();\n  });\n});\n"]}