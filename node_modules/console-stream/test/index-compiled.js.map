{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,UAAR,CAAhB;AACJ,IAAI,UAAU,QAAQ,SAAR,CAAV;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,KAAK,gBAAL,EAAuB,UAAU,MAAV,EAAkB;AACrC,QAAI,SAAS,eAAT,CADiC;;AAGrC,WAAO,EAAP,CAAU,OAAO,KAAP,CAAV,CAHqC;AAIrC,WAAO,EAAP,CAAU,OAAO,GAAP,CAAV,CAJqC;AAKrC,WAAO,EAAP,CAAU,OAAO,OAAP,CAAV,CALqC;;AAOrC,WAAO,GAAP,GAPqC;CAAlB,CAAvB;;AAUA,KAAK,wBAAL,EAA+B,UAAU,MAAV,EAAkB;AAC7C,QAAI,SAAS,eAAT,CADyC;;AAG7C,WAAO,IAAP,CAAY,OAAZ,EAAqB,YAAY;AAC7B,eAAO,EAAP,CAAU,IAAV,EAD6B;AAE7B,eAAO,GAAP,GAF6B;KAAZ,CAArB,CAH6C;;AAQ7C,WAAO,OAAP,GAR6C;CAAlB,CAA/B;;AAWA,KAAK,oBAAL,EAA2B,UAAU,MAAV,EAAkB;AACzC,QAAI,MAAM,QAAQ,GAAR,CAD+B;AAEzC,YAAQ,GAAR,GAAc,SAAd,CAFyC;;AAIzC,QAAI,SAAS,KAAT,CAJqC;AAKzC,QAAI,SAAS,eAAT,CALqC;AAMzC,QAAI,OAAO,EAAP,CANqC;;AAQzC,WAAO,IAAP,CAAY,OAAZ,EAAqB,YAAY;AAC7B,iBAAS,IAAT,CAD6B;;AAG7B,gBAAQ,GAAR,GAAc,GAAd,CAH6B;;AAK7B,eAAO,SAAP,CAAiB,IAAjB,EAAuB,CAAC,KAAD,CAAvB,EAL6B;AAM7B,eAAO,KAAP,CAAa,MAAb,EAAqB,IAArB,EAN6B;;AAQ7B,eAAO,GAAP,GAR6B;KAAZ,CAArB,CARyC;;AAmBzC,WAAO,GAAP,CAAW,KAAX,EAnByC;;AAqBzC,aAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,aAAK,IAAL,CAAU,KAAV;;;AADsB,KAA1B;CArBuB,CAA3B;;AA4BA,KAAK,sBAAL,EAA6B,UAAU,MAAV,EAAkB;AAC3C,QAAI,MAAM,QAAQ,GAAR,CADiC;AAE3C,YAAQ,GAAR,GAAc,SAAd,CAF2C;;AAI3C,QAAI,OAAO,EAAP,CAJuC;AAK3C,QAAI,SAAS,eAAT,CALuC;;AAO3C,WAAO,KAAP,CAAa,KAAb,EAP2C;AAQ3C,WAAO,KAAP,CAAa,KAAb,EAR2C;AAS3C,WAAO,KAAP,CAAa,OAAb,EAT2C;AAU3C,WAAO,KAAP,CAAa,QAAb,EAV2C;AAW3C,WAAO,KAAP,CAAa,SAAb,EAX2C;AAY3C,WAAO,KAAP,CAAa,KAAb,EAZ2C;AAa3C,WAAO,GAAP,GAb2C;;AAe3C,YAAQ,GAAR,GAAc,GAAd,CAf2C;;AAiB3C,WAAO,SAAP,CAAiB,IAAjB,EAAuB,CACnB,iBADmB,EAEjB,MAFiB,EAGjB,MAHiB,CAAvB,EAjB2C;AAsB3C,WAAO,GAAP,GAtB2C;;AAwB3C,aAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,aAAK,IAAL,CAAU,KAAV;;;AADsB,KAA1B;CAxByB,CAA7B","file":"index-compiled.js","sourcesContent":["var ConsoleStream = require(\"../index\")\nvar console = require(\"console\")\nvar test = require(\"tape\")\n\ntest(\"console stream\", function (assert) {\n    var stream = ConsoleStream()\n\n    assert.ok(stream.write)\n    assert.ok(stream.end)\n    assert.ok(stream.destroy)\n\n    assert.end()\n})\n\ntest(\"console stream destroy\", function (assert) {\n    var stream = ConsoleStream()\n\n    stream.once(\"close\", function () {\n        assert.ok(true)\n        assert.end()\n    })\n\n    stream.destroy()\n})\n\ntest(\"console stream end\", function (assert) {\n    var old = console.log\n    console.log = intercept\n\n    var closed = false\n    var stream = ConsoleStream()\n    var list = []\n\n    stream.once(\"close\", function () {\n        closed = true\n\n        console.log = old\n\n        assert.deepEqual(list, [\"foo\"])\n        assert.equal(closed, true)\n\n        assert.end()\n    })\n\n    stream.end(\"foo\")\n\n    function intercept(chunk) {\n        list.push(chunk)\n\n        // old.apply(this, arguments)\n    }\n})\n\ntest(\"console stream write\", function (assert) {\n    var old = console.log\n    console.log = intercept\n\n    var list = []\n    var stream = ConsoleStream()\n\n    stream.write(\"one\")\n    stream.write(\"two\")\n    stream.write(\"three\")\n    stream.write(\"four\\n\")\n    stream.write(\"five\\na\")\n    stream.write(\"bar\")\n    stream.end()\n\n    console.log = old\n\n    assert.deepEqual(list, [\n        \"onetwothreefour\"\n        , \"five\"\n        , \"abar\"\n    ])\n    assert.end()\n\n    function intercept(chunk) {\n        list.push(chunk)\n\n        // old.apply(this, arguments)\n    }\n})\n"]}