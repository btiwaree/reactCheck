{"version":3,"sources":["tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["'use strict';\n\nvar TokenType = require('./const.js').TokenType;\nvar lineStartPos;\nvar line;\nvar pos;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar DOUBLE_QUOTE = 34;\nvar QUOTE = 39;\nvar RIGHT_PARENTHESIS = 41;\nvar STAR = 42;\nvar SLASH = 47;\nvar BACK_SLASH = 92;\nvar UNDERSCORE = 95;\nvar LEFT_CURLY_BRACE = 123;\nvar RIGHT_CURLY_BRACE = 125;\n\nvar WHITESPACE = 1;\nvar PUNCTUATOR = 2;\nvar DIGIT = 3;\nvar STRING_SQ = 4;\nvar STRING_DQ = 5;\n\nvar PUNCTUATION = {\n    9:  TokenType.Tab,                // '\\t'\n    10: TokenType.Newline,            // '\\n'\n    13: TokenType.Newline,            // '\\r'\n    32: TokenType.Space,              // ' '\n    33: TokenType.ExclamationMark,    // '!'\n    34: TokenType.QuotationMark,      // '\"'\n    35: TokenType.NumberSign,         // '#'\n    36: TokenType.DollarSign,         // '$'\n    37: TokenType.PercentSign,        // '%'\n    38: TokenType.Ampersand,          // '&'\n    39: TokenType.Apostrophe,         // '\\''\n    40: TokenType.LeftParenthesis,    // '('\n    41: TokenType.RightParenthesis,   // ')'\n    42: TokenType.Asterisk,           // '*'\n    43: TokenType.PlusSign,           // '+'\n    44: TokenType.Comma,              // ','\n    45: TokenType.HyphenMinus,        // '-'\n    46: TokenType.FullStop,           // '.'\n    47: TokenType.Solidus,            // '/'\n    58: TokenType.Colon,              // ':'\n    59: TokenType.Semicolon,          // ';'\n    60: TokenType.LessThanSign,       // '<'\n    61: TokenType.EqualsSign,         // '='\n    62: TokenType.GreaterThanSign,    // '>'\n    63: TokenType.QuestionMark,       // '?'\n    64: TokenType.CommercialAt,       // '@'\n    91: TokenType.LeftSquareBracket,  // '['\n    93: TokenType.RightSquareBracket, // ']'\n    94: TokenType.CircumflexAccent,   // '^'\n    95: TokenType.LowLine,            // '_'\n    123: TokenType.LeftCurlyBracket,  // '{'\n    124: TokenType.VerticalLine,      // '|'\n    125: TokenType.RightCurlyBracket, // '}'\n    126: TokenType.Tilde              // '~'\n};\nvar SYMBOL_CATEGORY_LENGTH = Math.max.apply(null, Object.keys(PUNCTUATION)) + 1;\nvar SYMBOL_CATEGORY = new Uint32Array(SYMBOL_CATEGORY_LENGTH);\nvar IS_PUNCTUATOR = new Uint32Array(SYMBOL_CATEGORY_LENGTH);\n\n// fill categories\nObject.keys(PUNCTUATION).forEach(function(key) {\n    SYMBOL_CATEGORY[Number(key)] = PUNCTUATOR;\n    IS_PUNCTUATOR[Number(key)] = PUNCTUATOR;\n}, SYMBOL_CATEGORY);\n\n// don't treat as punctuator\nIS_PUNCTUATOR[UNDERSCORE] = 0;\n\nfor (var i = 48; i <= 57; i++) {\n    SYMBOL_CATEGORY[i] = DIGIT;\n}\n\nSYMBOL_CATEGORY[SPACE] = WHITESPACE;\nSYMBOL_CATEGORY[TAB] = WHITESPACE;\nSYMBOL_CATEGORY[N] = WHITESPACE;\nSYMBOL_CATEGORY[R] = WHITESPACE;\nSYMBOL_CATEGORY[F] = WHITESPACE;\n\nSYMBOL_CATEGORY[QUOTE] = STRING_SQ;\nSYMBOL_CATEGORY[DOUBLE_QUOTE] = STRING_DQ;\n\n//\n// main part\n//\n\nfunction tokenize(source, initBlockMode, initLine, initColumn) {\n    function pushToken(type, line, column, value) {\n        tokens.push({\n            type: type,\n            value: value,\n\n            offset: lastPos,\n            line: line,\n            column: column\n        });\n\n        lastPos = pos;\n    }\n\n    if (!source) {\n        return [];\n    }\n\n    var tokens = [];\n    var urlMode = false;\n    var lastPos = 0;\n    var minBlockMode = initBlockMode ? 1 : 0;\n    var blockMode = minBlockMode;\n    var code;\n    var next;\n    var ident;\n\n    // ignore first char if it is byte order marker (UTF-8 BOM)\n    pos = source.charCodeAt(0) === 0xFEFF ? 1 : 0;\n    lastPos = pos;\n    line = typeof initLine === 'undefined' ? 1 : initLine;\n    lineStartPos = typeof initColumn === 'undefined' ? -1 : -initColumn;\n\n    for (; pos < source.length; pos++) {\n        code = source.charCodeAt(pos);\n\n        switch (code < SYMBOL_CATEGORY_LENGTH ? SYMBOL_CATEGORY[code] : 0) {\n            case DIGIT:\n                pushToken(TokenType.DecimalNumber, line, pos - lineStartPos, parseDecimalNumber(source));\n                break;\n\n            case STRING_SQ:\n            case STRING_DQ:\n                pushToken(TokenType.String, line, pos - lineStartPos, parseString(source, code));\n                break;\n\n            case WHITESPACE:\n                pushToken(TokenType.Space, line, pos - lineStartPos, parseSpaces(source));\n                break;\n\n            case PUNCTUATOR:\n                if (code === SLASH) {\n                    next = source.charCodeAt(pos + 1);\n\n                    if (next === STAR) { // /*\n                        pushToken(TokenType.Comment, line, pos - lineStartPos, parseComment(source));\n                        continue;\n                    } else if (next === SLASH && !urlMode) { // //\n                        if (blockMode > 0) {\n                            var skip = 2;\n\n                            while (source.charCodeAt(pos + skip) === SLASH) {\n                                skip++;\n                            }\n\n                            pushToken(TokenType.Identifier, line, pos - lineStartPos, ident = parseIdentifier(source, skip));\n                            urlMode = urlMode || ident === 'url';\n                        } else {\n                            pushToken(TokenType.Unknown, line, pos - lineStartPos, parseUnknown(source));\n                        }\n                        continue;\n                    }\n                }\n\n                pushToken(PUNCTUATION[code], line, pos - lineStartPos, String.fromCharCode(code));\n\n                if (code === RIGHT_PARENTHESIS) {\n                    urlMode = false;\n                } else if (code === LEFT_CURLY_BRACE) {\n                    blockMode++;\n                } else if (code === RIGHT_CURLY_BRACE) {\n                    if (blockMode > minBlockMode) {\n                        blockMode--;\n                    }\n                }\n\n                break;\n\n            default:\n                pushToken(TokenType.Identifier, line, pos - lineStartPos, ident = parseIdentifier(source, 0));\n                urlMode = urlMode || ident === 'url';\n        }\n    }\n\n    return tokens;\n}\n\nfunction checkNewline(code, s) {\n    if (code === N || code === F || code === R) {\n        if (code === R && pos + 1 < s.length && s.charCodeAt(pos + 1) === N) {\n            pos++;\n        }\n\n        line++;\n        lineStartPos = pos;\n        return true;\n    }\n\n    return false;\n}\n\nfunction parseSpaces(s) {\n    var start = pos;\n\n    for (; pos < s.length; pos++) {\n        var code = s.charCodeAt(pos);\n\n        if (!checkNewline(code, s) && code !== SPACE && code !== TAB) {\n            break;\n        }\n    }\n\n    pos--;\n    return s.substring(start, pos + 1);\n}\n\nfunction parseComment(s) {\n    var start = pos;\n\n    for (pos += 2; pos < s.length; pos++) {\n        var code = s.charCodeAt(pos);\n\n        if (code === STAR) { // */\n            if (s.charCodeAt(pos + 1) === SLASH) {\n                pos++;\n                break;\n            }\n        } else {\n            checkNewline(code, s);\n        }\n    }\n\n    return s.substring(start, pos + 1);\n}\n\nfunction parseUnknown(s) {\n    var start = pos;\n\n    for (pos += 2; pos < s.length; pos++) {\n        if (checkNewline(s.charCodeAt(pos), s)) {\n            break;\n        }\n    }\n\n    return s.substring(start, pos + 1);\n}\n\nfunction parseString(s, quote) {\n    var start = pos;\n    var res = '';\n\n    for (pos++; pos < s.length; pos++) {\n        var code = s.charCodeAt(pos);\n\n        if (code === BACK_SLASH) {\n            var end = pos++;\n\n            if (checkNewline(s.charCodeAt(pos), s)) {\n                res += s.substring(start, end);\n                start = pos + 1;\n            }\n        } else if (code === quote) {\n            break;\n        }\n    }\n\n    return res + s.substring(start, pos + 1);\n}\n\nfunction parseDecimalNumber(s) {\n    var start = pos;\n    var code;\n\n    for (pos++; pos < s.length; pos++) {\n        code = s.charCodeAt(pos);\n\n        if (code < 48 || code > 57) {  // 0 .. 9\n            break;\n        }\n    }\n\n    pos--;\n    return s.substring(start, pos + 1);\n}\n\nfunction parseIdentifier(s, skip) {\n    var start = pos;\n\n    for (pos += skip; pos < s.length; pos++) {\n        var code = s.charCodeAt(pos);\n\n        if (code === BACK_SLASH) {\n            pos++;\n\n            // skip escaped unicode sequence that can ends with space\n            // [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\n            for (var i = 0; i < 7 && pos + i < s.length; i++) {\n                code = s.charCodeAt(pos + i);\n\n                if (i !== 6) {\n                    if ((code >= 48 && code <= 57) ||  // 0 .. 9\n                        (code >= 65 && code <= 70) ||  // A .. F\n                        (code >= 97 && code <= 102)) { // a .. f\n                        continue;\n                    }\n                }\n\n                if (i > 0) {\n                    pos += i - 1;\n                    if (code === SPACE || code === TAB || checkNewline(code, s)) {\n                        pos++;\n                    }\n                }\n\n                break;\n            }\n        } else if (code < SYMBOL_CATEGORY_LENGTH &&\n                   IS_PUNCTUATOR[code] === PUNCTUATOR) {\n            break;\n        }\n    }\n\n    pos--;\n    return s.substring(start, pos + 1);\n}\n\nmodule.exports = tokenize;\n"]}