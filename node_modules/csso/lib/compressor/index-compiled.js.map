{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var List = require('../utils/list');\nvar usageUtils = require('./usage');\nvar convertToInternal = require('./ast/gonzalesToInternal');\nvar convertToGonzales = require('./ast/internalToGonzales');\nvar clean = require('./clean');\nvar compress = require('./compress');\nvar restructureBlock = require('./restructure');\n\nfunction injectInfo(token) {\n    for (var i = token.length - 1; i > -1; i--) {\n        var child = token[i];\n\n        if (Array.isArray(child)) {\n            injectInfo(child);\n            child.unshift({});\n        }\n    }\n}\n\nfunction readBlock(stylesheet, offset) {\n    var buffer = [];\n    var nonSpaceTokenInBuffer = false;\n    var protectedComment;\n\n    for (var i = offset; i < stylesheet.length; i++) {\n        var token = stylesheet[i];\n\n        if (token[1] === 'comment' &&\n            token[2].charAt(0) === '!') {\n            if (nonSpaceTokenInBuffer || protectedComment) {\n                break;\n            }\n\n            protectedComment = token;\n            continue;\n        }\n\n        if (token[1] !== 's') {\n            nonSpaceTokenInBuffer = true;\n        }\n\n        buffer.push(token);\n    }\n\n    return {\n        comment: protectedComment,\n        stylesheet: [{}, 'stylesheet'].concat(buffer),\n        offset: i\n    };\n}\n\nfunction compressBlock(ast, usageData, num, logger) {\n    logger('Compress block #' + num, null, true);\n\n    var internalAst = convertToInternal(ast);\n    logger('convertToInternal', internalAst);\n\n    internalAst.firstAtrulesAllowed = ast.firstAtrulesAllowed;\n\n    // remove redundant\n    clean(internalAst, usageData);\n    logger('clean', internalAst);\n\n    // compress nodes\n    compress(internalAst, usageData);\n    logger('compress', internalAst);\n\n    return internalAst;\n}\n\nmodule.exports = function compress(ast, options) {\n    options = options || {};\n\n    var logger = typeof options.logger === 'function' ? options.logger : Function();\n    var restructuring =\n        'restructure' in options ? options.restructure :\n        'restructuring' in options ? options.restructuring :\n        true;\n    var result = new List();\n    var block = { offset: 2 };\n    var firstAtrulesAllowed = true;\n    var blockNum = 1;\n    var blockRules;\n    var blockMode = false;\n    var usageData = false;\n\n    ast = ast || [{}, 'stylesheet'];\n\n    if (typeof ast[0] === 'string') {\n        injectInfo([ast]);\n    }\n\n    if (ast[1] !== 'stylesheet') {\n        blockMode = true;\n        ast = [null, 'stylesheet',\n            [null, 'ruleset',\n                [null, 'selector',\n                    [null, 'simpleselector', [null, 'ident', 'x']]],\n                ast\n            ]\n        ];\n    }\n\n    if (options.usage) {\n        usageData = usageUtils.buildIndex(options.usage);\n    }\n\n    do {\n        block = readBlock(ast, block.offset);\n        block.stylesheet.firstAtrulesAllowed = firstAtrulesAllowed;\n        block.stylesheet = compressBlock(block.stylesheet, usageData, blockNum++, logger);\n\n        // structure optimisations\n        if (restructuring) {\n            restructureBlock(block.stylesheet, usageData, logger);\n        }\n\n        blockRules = block.stylesheet.rules;\n\n        if (block.comment) {\n            // add \\n before comment if there is another content in result\n            if (!result.isEmpty()) {\n                result.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n\n            result.insert(List.createItem({\n                type: 'Comment',\n                value: block.comment[2]\n            }));\n\n            // add \\n after comment if block is not empty\n            if (!blockRules.isEmpty()) {\n                result.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n        }\n\n        if (firstAtrulesAllowed && !blockRules.isEmpty()) {\n            var lastRule = blockRules.last();\n\n            if (lastRule.type !== 'Atrule' ||\n               (lastRule.name !== 'import' && lastRule.name !== 'charset')) {\n                firstAtrulesAllowed = false;\n            }\n        }\n\n        result.appendList(blockRules);\n    } while (block.offset < ast.length);\n\n    if (blockMode) {\n        result = result.first().block;\n    } else {\n        result = {\n            type: 'StyleSheet',\n            rules: result\n        };\n    }\n\n    if (!options.outputAst || options.outputAst === 'gonzales') {\n        return convertToGonzales(result);\n    }\n\n    return result;\n};\n"]}