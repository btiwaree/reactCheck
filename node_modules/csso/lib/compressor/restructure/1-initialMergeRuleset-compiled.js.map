{"version":3,"sources":["1-initialMergeRuleset.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,YAAR,CAAR;AACJ,IAAI,oBAAoB,QAAQ,gBAAR,EAA0B,KAA1B;;AAExB,SAAS,cAAT,CAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C;AACtC,QAAI,YAAY,KAAK,QAAL,CAAc,SAAd,CADsB;AAEtC,QAAI,eAAe,KAAK,KAAL,CAAW,YAAX,CAFmB;;AAItC,SAAK,SAAL,CAAe,KAAK,IAAL,EAAW,UAAS,IAAT,EAAe;;AAErC,YAAI,KAAK,IAAL,KAAc,SAAd,EAAyB;AACzB,mBAAO,MAAM,gBAAN,CAAuB,IAAvB,CAA4B,SAA5B,EAAuC,IAAvC,CAAP,CADyB;SAA7B;;AAIA,YAAI,gBAAgB,KAAK,QAAL,CAAc,SAAd,CANiB;AAOrC,YAAI,mBAAmB,KAAK,KAAL,CAAW,YAAX;;;AAPc,YAUjC,KAAK,eAAL,KAAyB,KAAK,eAAL,EAAsB;;AAE/C,gBAAI,MAAM,YAAN,CAAmB,aAAnB,EAAkC,SAAlC,CAAJ,EAAkD;AAC9C,iCAAiB,UAAjB,CAA4B,YAA5B,EAD8C;AAE9C,qBAAK,MAAL,CAAY,IAAZ,EAF8C;AAG9C,uBAAO,IAAP,CAH8C;aAAlD;;;AAF+C,gBAS3C,MAAM,YAAN,CAAmB,YAAnB,EAAiC,gBAAjC,CAAJ,EAAwD;AACpD,sBAAM,YAAN,CAAmB,aAAnB,EAAkC,SAAlC,EADoD;AAEpD,qBAAK,MAAL,CAAY,IAAZ,EAFoD;AAGpD,uBAAO,IAAP,CAHoD;aAAxD;SATJ;;;AAVqC,eA2B9B,MAAM,mBAAN,CAA0B,SAA1B,EAAqC,aAArC,CAAP,CA3BqC;KAAf,CAA1B,CAJsC;CAA1C;;;;;AAsCA,OAAO,OAAP,GAAiB,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AAC/C,sBAAkB,GAAlB,EAAuB,UAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B;AAC9C,YAAI,KAAK,IAAL,KAAc,SAAd,EAAyB;AACzB,2BAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EADyB;SAA7B;KADmB,CAAvB,CAD+C;CAAlC","file":"1-initialMergeRuleset-compiled.js","sourcesContent":["var utils = require('./utils.js');\nvar internalWalkRules = require('../ast/walk.js').rules;\n\nfunction processRuleset(node, item, list) {\n    var selectors = node.selector.selectors;\n    var declarations = node.block.declarations;\n\n    list.prevUntil(item.prev, function(prev) {\n        // skip non-ruleset node if safe\n        if (prev.type !== 'Ruleset') {\n            return utils.unsafeToSkipNode.call(selectors, prev);\n        }\n\n        var prevSelectors = prev.selector.selectors;\n        var prevDeclarations = prev.block.declarations;\n\n        // try to join rulesets with equal pseudo signature\n        if (node.pseudoSignature === prev.pseudoSignature) {\n            // try to join by selectors\n            if (utils.isEqualLists(prevSelectors, selectors)) {\n                prevDeclarations.appendList(declarations);\n                list.remove(item);\n                return true;\n            }\n\n            // try to join by declarations\n            if (utils.isEqualLists(declarations, prevDeclarations)) {\n                utils.addSelectors(prevSelectors, selectors);\n                list.remove(item);\n                return true;\n            }\n        }\n\n        // go to prev ruleset if has no selector similarities\n        return utils.hasSimilarSelectors(selectors, prevSelectors);\n    });\n};\n\n// NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\nmodule.exports = function initialMergeRuleset(ast) {\n    internalWalkRules(ast, function(node, item, list) {\n        if (node.type === 'Ruleset') {\n            processRuleset(node, item, list);\n        }\n    });\n};\n"]}