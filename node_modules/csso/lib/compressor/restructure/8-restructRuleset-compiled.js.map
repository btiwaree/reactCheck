{"version":3,"sources":["8-restructRuleset.js"],"names":[],"mappings":"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","file":"8-restructRuleset-compiled.js","sourcesContent":["var List = require('../../utils/list.js');\nvar utils = require('./utils.js');\nvar internalWalkRulesRight = require('../ast/walk.js').rulesRight;\n\nfunction calcSelectorLength(list) {\n    var length = 0;\n\n    list.each(function(data) {\n        length += data.id.length + 1;\n    });\n\n    return length - 1;\n}\n\nfunction calcDeclarationsLength(tokens) {\n    var length = 0;\n\n    for (var i = 0; i < tokens.length; i++) {\n        length += tokens[i].length;\n    }\n\n    return (\n        length +          // declarations\n        tokens.length - 1 // delimeters\n    );\n}\n\nfunction inList(selector) {\n    return selector.compareMarker in this;\n}\n\nfunction processRuleset(node, item, list) {\n    var avoidRulesMerge = this.stylesheet.avoidRulesMerge;\n    var selectors = node.selector.selectors;\n    var block = node.block;\n    var skippedCompareMarkers = Object.create(null);\n\n    list.prevUntil(item.prev, function(prev, prevItem) {\n        // skip non-ruleset node if safe\n        if (prev.type !== 'Ruleset') {\n            return utils.unsafeToSkipNode.call(selectors, prev);\n        }\n\n        var prevSelectors = prev.selector.selectors;\n        var prevBlock = prev.block;\n\n        if (node.pseudoSignature !== prev.pseudoSignature) {\n            return true;\n        }\n\n        // try prev ruleset if simpleselectors has no equal specifity and element selector\n        if (prevSelectors.some(inList, skippedCompareMarkers)) {\n            return true;\n        }\n\n        // try to join by selectors\n        if (utils.isEqualLists(prevSelectors, selectors)) {\n            prevBlock.declarations.appendList(block.declarations);\n            list.remove(item);\n            return true;\n        }\n\n        // try to join by properties\n        var diff = utils.compareDeclarations(block.declarations, prevBlock.declarations);\n\n        // console.log(diff.eq, diff.ne1, diff.ne2);\n\n        if (diff.eq.length) {\n            if (!diff.ne1.length && !diff.ne2.length) {\n                // equal blocks\n                utils.addSelectors(selectors, prevSelectors);\n                list.remove(prevItem);\n                return true;\n            } else if (!avoidRulesMerge) { /* probably we don't need to prevent those merges for @keyframes\n                                              TODO: need to be checked */\n\n                if (diff.ne1.length && !diff.ne2.length) {\n                    // prevBlock is subset block\n                    var selectorLength = calcSelectorLength(selectors);\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (selectorLength < blockLength) {\n                        utils.addSelectors(prevSelectors, selectors);\n                        block.declarations = new List(diff.ne1);\n                    }\n                } else if (!diff.ne1.length && diff.ne2.length) {\n                    // node is subset of prevBlock\n                    var selectorLength = calcSelectorLength(prevSelectors);\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (selectorLength < blockLength) {\n                        utils.addSelectors(selectors, prevSelectors);\n                        prevBlock.declarations = new List(diff.ne2);\n                    }\n                } else {\n                    // diff.ne1.length && diff.ne2.length\n                    // extract equal block\n                    var newSelector = {\n                        type: 'Selector',\n                        info: {},\n                        selectors: utils.addSelectors(prevSelectors.copy(), selectors)\n                    };\n                    var newBlockLength = calcSelectorLength(newSelector.selectors) + 2; // selectors length + curly braces length\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    // create new ruleset if declarations length greater than\n                    // ruleset description overhead\n                    if (blockLength >= newBlockLength) {\n                        var newRuleset = {\n                            type: 'Ruleset',\n                            info: {},\n                            pseudoSignature: node.pseudoSignature,\n                            selector: newSelector,\n                            block: {\n                                type: 'Block',\n                                info: {},\n                                declarations: new List(diff.eq)\n                            }\n                        };\n\n                        block.declarations = new List(diff.ne1);\n                        prevBlock.declarations = new List(diff.ne2.concat(diff.ne2overrided));\n                        list.insert(list.createItem(newRuleset), prevItem);\n                        return true;\n                    }\n                }\n            }\n        }\n\n        prevSelectors.each(function(data) {\n            skippedCompareMarkers[data.compareMarker] = true;\n        });\n    });\n};\n\nmodule.exports = function restructRuleset(ast) {\n    internalWalkRulesRight(ast, function(node, item, list) {\n        if (node.type === 'Ruleset') {\n            processRuleset.call(this, node, item, list);\n        }\n    });\n};\n"]}