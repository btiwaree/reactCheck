{"version":3,"sources":["Ruleset.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,OAAO,SAAP,CAAiB,cAAjB;;AAErB,SAAS,WAAT,CAAqB,IAArB,EAA2B,SAA3B,EAAsC;AAClC,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB,CAA6B,UAAS,QAAT,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B;AAC/D,YAAI,YAAY,SAAS,QAAT,CAAkB,IAAlB,CAAuB,UAAS,IAAT,EAAe;AAClD,oBAAQ,KAAK,IAAL;AACJ,qBAAK,OAAL;AACI,2BAAO,UAAU,OAAV,IAAqB,CAAC,eAAe,IAAf,CAAoB,UAAU,OAAV,EAAmB,KAAK,IAAL,CAAxC,CADhC;;AADJ,qBAIS,IAAL;AACI,2BAAO,UAAU,GAAV,IAAiB,CAAC,eAAe,IAAf,CAAoB,UAAU,GAAV,EAAe,KAAK,IAAL,CAApC,CAD5B;;AAJJ,qBAOS,YAAL;;AAEI,wBAAI,KAAK,IAAL,KAAc,GAAd,EAAmB;;AAEnB,+BAAO,UAAU,IAAV,IAAkB,CAAC,eAAe,IAAf,CAAoB,UAAU,IAAV,EAAgB,KAAK,IAAL,CAAU,WAAV,EAApC,CAAD,CAFN;qBAAvB;;AAKA,0BAPJ;AAPJ,aADkD;SAAf,CAAnC,CAD2D;;AAoB/D,YAAI,SAAJ,EAAe;AACX,iBAAK,MAAL,CAAY,IAAZ,EADW;SAAf;KApBgC,CAApC,CADkC;CAAtC;;AA2BA,OAAO,OAAP,GAAiB,SAAS,YAAT,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,SAAxC,EAAmD;AAChE,QAAI,SAAJ,EAAe;AACX,oBAAY,IAAZ,EAAkB,SAAlB,EADW;KAAf;;AAIA,QAAI,KAAK,QAAL,CAAc,SAAd,CAAwB,OAAxB,MACA,KAAK,KAAL,CAAW,YAAX,CAAwB,OAAxB,EADA,EACmC;AACnC,aAAK,MAAL,CAAY,IAAZ,EADmC;KADvC;CALa","file":"Ruleset-compiled.js","sourcesContent":["var hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction cleanUnused(node, usageData) {\n    return node.selector.selectors.each(function(selector, item, list) {\n        var hasUnused = selector.sequence.some(function(node) {\n            switch (node.type) {\n                case 'Class':\n                    return usageData.classes && !hasOwnProperty.call(usageData.classes, node.name);\n\n                case 'Id':\n                    return usageData.ids && !hasOwnProperty.call(usageData.ids, node.name);\n\n                case 'Identifier':\n                    // ignore universal selector\n                    if (node.name !== '*') {\n                        // TODO: remove toLowerCase when type selectors will be normalized\n                        return usageData.tags && !hasOwnProperty.call(usageData.tags, node.name.toLowerCase());\n                    }\n\n                    break;\n            }\n        });\n\n        if (hasUnused) {\n            list.remove(item);\n        }\n    });\n}\n\nmodule.exports = function cleanRuleset(node, item, list, usageData) {\n    if (usageData) {\n        cleanUnused(node, usageData);\n    }\n\n    if (node.selector.selectors.isEmpty() ||\n        node.block.declarations.isEmpty()) {\n        list.remove(item);\n    }\n};\n"]}