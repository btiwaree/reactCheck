{"version":3,"sources":["Atrule.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,GAAiB,SAAS,WAAT,CAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC;AACpD,QAAI,KAAK,KAAL,EAAY;;AAEZ,aAAK,IAAL,CAAU,mBAAV,GAAgC,KAAhC,CAFY;;AAIZ,YAAI,KAAK,KAAL,CAAW,IAAX,KAAoB,OAApB,IAA+B,KAAK,KAAL,CAAW,YAAX,CAAwB,OAAxB,EAA/B,EAAkE;AAClE,iBAAK,MAAL,CAAY,IAAZ,EADkE;AAElE,mBAFkE;SAAtE;;AAKA,YAAI,KAAK,KAAL,CAAW,IAAX,KAAoB,YAApB,IAAoC,KAAK,KAAL,CAAW,KAAX,CAAiB,OAAjB,EAApC,EAAgE;AAChE,iBAAK,MAAL,CAAY,IAAZ,EADgE;AAEhE,mBAFgE;SAApE;KATJ;;AAeA,YAAQ,KAAK,IAAL;AACJ,aAAK,SAAL;AACI,gBAAI,KAAK,UAAL,CAAgB,QAAhB,CAAyB,OAAzB,EAAJ,EAAwC;AACpC,qBAAK,MAAL,CAAY,IAAZ,EADoC;AAEpC,uBAFoC;aAAxC;;;AADJ,gBAOQ,KAAK,IAAL,EAAW;AACX,qBAAK,MAAL,CAAY,IAAZ,EADW;AAEX,uBAFW;aAAf;;AAKA,kBAZJ;;AADJ,aAeS,QAAL;AACI,gBAAI,CAAC,KAAK,IAAL,CAAU,mBAAV,EAA+B;AAChC,qBAAK,MAAL,CAAY,IAAZ,EADgC;AAEhC,uBAFgC;aAApC;;;;AADJ,gBAQI,CAAK,SAAL,CAAe,KAAK,IAAL,EAAW,UAAS,IAAT,EAAe;AACrC,oBAAI,KAAK,IAAL,KAAc,QAAd,EAAwB;AACxB,wBAAI,KAAK,IAAL,KAAc,QAAd,IAA0B,KAAK,IAAL,KAAc,SAAd,EAAyB;AACnD,+BADmD;qBAAvD;iBADJ;;AAMA,qBAAK,IAAL,CAAU,mBAAV,GAAgC,KAAhC,CAPqC;AAQrC,qBAAK,MAAL,CAAY,IAAZ,EARqC;AASrC,uBAAO,IAAP,CATqC;aAAf,EAUvB,IAVH,EARJ;;AAoBI,kBApBJ;AAfJ,KAhBoD;CAAvC","file":"Atrule-compiled.js","sourcesContent":["module.exports = function cleanAtrule(node, item, list) {\n    if (node.block) {\n        // otherwise removed at-rule don't prevent @import for removal\n        this.root.firstAtrulesAllowed = false;\n\n        if (node.block.type === 'Block' && node.block.declarations.isEmpty()) {\n            list.remove(item);\n            return;\n        }\n\n        if (node.block.type === 'StyleSheet' && node.block.rules.isEmpty()) {\n            list.remove(item);\n            return;\n        }\n    }\n\n    switch (node.name) {\n        case 'charset':\n            if (node.expression.sequence.isEmpty()) {\n                list.remove(item);\n                return;\n            }\n\n            // if there is any rule before @charset -> remove it\n            if (item.prev) {\n                list.remove(item);\n                return;\n            }\n\n            break;\n\n        case 'import':\n            if (!this.root.firstAtrulesAllowed) {\n                list.remove(item);\n                return;\n            }\n\n            // if there are some rules that not an @import or @charset before @import\n            // remove it\n            list.prevUntil(item.prev, function(rule) {\n                if (rule.type === 'Atrule') {\n                    if (rule.name === 'import' || rule.name === 'charset') {\n                        return;\n                    }\n                }\n\n                this.root.firstAtrulesAllowed = false;\n                list.remove(item);\n                return true;\n            }, this);\n\n            break;\n    }\n};\n"]}