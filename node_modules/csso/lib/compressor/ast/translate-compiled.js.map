{"version":3,"sources":["translate.js"],"names":[],"mappings":"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","file":"translate-compiled.js","sourcesContent":["function each(list) {\n    if (list.head === null) {\n        return '';\n    }\n\n    if (list.head === list.tail) {\n        return translate(list.head.data);\n    }\n\n    return list.map(translate).join('');\n}\n\nfunction eachDelim(list, delimeter) {\n    if (list.head === null) {\n        return '';\n    }\n\n    if (list.head === list.tail) {\n        return translate(list.head.data);\n    }\n\n    return list.map(translate).join(delimeter);\n}\n\nfunction translate(node) {\n    switch (node.type) {\n        case 'StyleSheet':\n            return each(node.rules);\n\n        case 'Atrule':\n            var result = '@' + node.name;\n\n            if (node.expression && !node.expression.sequence.isEmpty()) {\n                result += ' ' + translate(node.expression);\n            }\n\n            if (node.block) {\n                return result + '{' + translate(node.block) + '}';\n            } else {\n                return result + ';';\n            }\n\n        case 'Ruleset':\n            return translate(node.selector) + '{' + translate(node.block) + '}';\n\n        case 'Selector':\n            return eachDelim(node.selectors, ',');\n\n        case 'SimpleSelector':\n            return node.sequence.map(function(node) {\n                // add extra spaces around /deep/ combinator since comment beginning/ending may to be produced\n                if (node.type === 'Combinator' && node.name === '/deep/') {\n                    return ' ' + translate(node) + ' ';\n                }\n\n                return translate(node);\n            }).join('');\n\n        case 'Declaration':\n            return translate(node.property) + ':' + translate(node.value);\n\n        case 'Property':\n            return node.name;\n\n        case 'Value':\n            return node.important\n                ? each(node.sequence) + '!important'\n                : each(node.sequence);\n\n        case 'Attribute':\n            var result = translate(node.name);\n\n            if (node.operator !== null) {\n                result += node.operator;\n\n                if (node.value !== null) {\n                    result += translate(node.value);\n\n                    if (node.flags !== null) {\n                        result += (node.value.type !== 'String' ? ' ' : '') + node.flags;\n                    }\n                }\n            }\n\n            return '[' + result + ']';\n\n        case 'FunctionalPseudo':\n            return ':' + node.name + '(' + eachDelim(node.arguments, ',') + ')';\n\n        case 'Function':\n            return node.name + '(' + eachDelim(node.arguments, ',') + ')';\n\n        case 'Block':\n            return eachDelim(node.declarations, ';');\n\n        case 'Negation':\n            return ':not(' + eachDelim(node.sequence, ',') + ')';\n\n        case 'Braces':\n            return node.open + each(node.sequence) + node.close;\n\n        case 'Argument':\n        case 'AtruleExpression':\n            return each(node.sequence);\n\n        case 'Url':\n            return 'url(' + translate(node.value) + ')';\n\n        case 'Progid':\n            return translate(node.value);\n\n        case 'Combinator':\n            return node.name;\n\n        case 'Identifier':\n            return node.name;\n\n        case 'PseudoClass':\n            return ':' + node.name;\n\n        case 'PseudoElement':\n            return '::' + node.name;\n\n        case 'Class':\n            return '.' + node.name;\n\n        case 'Id':\n            return '#' + node.name;\n\n        case 'Hash':\n            return '#' + node.value;\n\n        case 'Dimension':\n            return node.value + node.unit;\n\n        case 'Nth':\n            return node.value;\n\n        case 'Number':\n            return node.value;\n\n        case 'String':\n            return node.value;\n\n        case 'Operator':\n            return node.value;\n\n        case 'Raw':\n            return node.value;\n\n        case 'Percentage':\n            return node.value + '%';\n\n        case 'Space':\n            return ' ';\n\n        case 'Comment':\n            return '/*' + node.value + '*/';\n\n        default:\n            throw new Error('Unknown node type: ' + node.type);\n    }\n}\n\nmodule.exports = translate;\n"]}