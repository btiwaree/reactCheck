{"version":3,"sources":["consistency.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,KAAR,CAAN;AACJ,IAAI,YAAY,QAAQ,kBAAR,CAAZ;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,IAAI,QAAQ,YAAR,CAAJ;AACJ,IAAI,QAAQ,QAAQ,OAAR,CAAR;;AAEJ,IAAI,IAAJ,EAAU,UAAV;AACA,IAAI,IAAJ;;AAEA,IAAI,IAAJ,CAAS,0BAAT,EAAqC,UAAS,CAAT,EAAY;AAC/C,OAAK,OAAL,CAAa,SAAb,EAAwB,mCAAxB,EAD+C;AAE/C,KAAG,OAAH,CAAY,YAAY,WAAZ,EAAyB,UAAU,GAAV,EAAe,OAAf,EAAwB;;AAE3D,wBAAoB,UAAS,SAAT,EAAoB,IAApB,EAA0B;AAC5C,aAAO,UAAS,GAAT,EAAc;;OAAd,CADqC;AAI5C,iBAAW,YAAY,YAAZ,GAA2B,SAA3B,CAJiC;AAK5C,SAAG,QAAH,CAAY,QAAZ,EAAsB,UAAS,GAAT,EAAc,QAAd,EAAwB;AAC5C,YAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP,CAAT;AACA,eAAO,KAAK,KAAL,CAAW,SAAS,QAAT,EAAX,CAAP,CAF4C;AAG5C,kBAAU,IAAV,EAAgB,IAAhB,EAH4C;AAI5C,qBAAa,EAAE,KAAF,CAAQ,IAAR,CAAb,CAJ4C;AAK5C,kBAAU,IAAV,EAAgB,IAAhB,EAL4C;AAM5C,UAAE,SAAF,CAAY,UAAZ,EAAwB,IAAxB,EACE,sBAAsB,SAAtB,GAAkC,iBAAlC,CADF,CAN4C;AAQ5C,aAAK,IAAL,EAR4C;OAAxB,CAAtB;AAL4C,KAA1B;AAFuC,SAkB3D,CAAM,OAAN,CAAc,OAAd,EAAuB,iBAAvB,EAA0C,UAAS,GAAT,EAAc;AACtD,UAAI,GAAJ,EAAS,MAAM,GAAN,CAAT;AACA,QAAE,GAAF,GAFsD;KAAd,CAA1C,CAlB2D;GAAxB,CAArC;AAF+C,CAAZ,CAArC","file":"consistency-compiled.js","sourcesContent":["var tap = require(\"tap\")\nvar normalize = require(\"../lib/normalize\")\nvar path = require(\"path\")\nvar fs = require(\"fs\")\nvar _ = require(\"underscore\")\nvar async = require(\"async\")\n\nvar data, clonedData\nvar warn\n\ntap.test(\"consistent normalization\", function(t) {\n  path.resolve(__dirname, \"./fixtures/read-package-json.json\")\n  fs.readdir (__dirname + \"/fixtures\", function (err, entries) {\n    // entries = ['coffee-script.json'] // uncomment to limit to a specific file\n    verifyConsistency = function(entryName, next) {\n      warn = function(msg) { \n        // t.equal(\"\",msg) // uncomment to have some kind of logging of warnings\n      }\n      filename = __dirname + \"/fixtures/\" + entryName\n      fs.readFile(filename, function(err, contents) {\n        if (err) return next(err)\n        data = JSON.parse(contents.toString())\n        normalize(data, warn)\n        clonedData = _.clone(data)\n        normalize(data, warn)\n        t.deepEqual(clonedData, data,\n          \"Normalization of \" + entryName + \" is consistent.\")\n        next(null)\n      }) // fs.readFile\n    } // verifyConsistency\n    async.forEach(entries, verifyConsistency, function(err) {\n      if (err) throw err\n      t.end()\n    })\n  }) // fs.readdir\n}) // tap.test"]}