{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,OAAO,SAAP,CAAiB,cAAjB;AACb,IAAI,QAAQ,OAAO,SAAP,CAAiB,QAAjB;;AAEZ,IAAI,UAAU,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACnC,KAAI,OAAO,MAAM,OAAN,KAAkB,UAAzB,EAAqC;AACxC,SAAO,MAAM,OAAN,CAAc,GAAd,CAAP,CADwC;EAAzC;;AAIA,QAAO,MAAM,IAAN,CAAW,GAAX,MAAoB,gBAApB,CAL4B;CAAtB;;AAQd,IAAI,gBAAgB,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC/C,KAAI,CAAC,GAAD,IAAQ,MAAM,IAAN,CAAW,GAAX,MAAoB,iBAApB,EAAuC;AAClD,SAAO,KAAP,CADkD;EAAnD;;AAIA,KAAI,oBAAoB,OAAO,IAAP,CAAY,GAAZ,EAAiB,aAAjB,CAApB,CAL2C;AAM/C,KAAI,mBAAmB,IAAI,WAAJ,IAAmB,IAAI,WAAJ,CAAgB,SAAhB,IAA6B,OAAO,IAAP,CAAY,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,eAAvC,CAAhD;;AANwB,KAQ3C,IAAI,WAAJ,IAAmB,CAAC,iBAAD,IAAsB,CAAC,gBAAD,EAAmB;AAC/D,SAAO,KAAP,CAD+D;EAAhE;;;;AAR+C,KAc3C,GAAJ,CAd+C;AAe/C,MAAK,GAAL,IAAY,GAAZ,EAAiB,MAAjB;;AAEA,QAAO,OAAO,GAAP,KAAe,WAAf,IAA8B,OAAO,IAAP,CAAY,GAAZ,EAAiB,GAAjB,CAA9B,CAjBwC;CAA5B;;AAoBpB,OAAO,OAAP,GAAiB,SAAS,MAAT,GAAkB;AAClC,KAAI,OAAJ;KAAa,IAAb;KAAmB,GAAnB;KAAwB,IAAxB;KAA8B,WAA9B;KAA2C,KAA3C;KACC,SAAS,UAAU,CAAV,CAAT;KACA,IAAI,CAAJ;KACA,SAAS,UAAU,MAAV;KACT,OAAO,KAAP;;;AALiC,KAQ9B,OAAO,MAAP,KAAkB,SAAlB,EAA6B;AAChC,SAAO,MAAP,CADgC;AAEhC,WAAS,UAAU,CAAV,KAAgB,EAAhB;;AAFuB,GAIhC,GAAI,CAAJ,CAJgC;EAAjC,MAKO,IAAI,OAAQ,MAAP,KAAkB,QAAlB,IAA8B,OAAO,MAAP,KAAkB,UAAlB,IAAiC,UAAU,IAAV,EAAgB;AAC1F,WAAS,EAAT,CAD0F;EAApF;;AAIP,QAAO,IAAI,MAAJ,EAAY,EAAE,CAAF,EAAK;AACvB,YAAU,UAAU,CAAV,CAAV;;AADuB,MAGnB,WAAW,IAAX,EAAiB;;AAEpB,QAAK,IAAL,IAAa,OAAb,EAAsB;AACrB,UAAM,OAAO,IAAP,CAAN,CADqB;AAErB,WAAO,QAAQ,IAAR,CAAP;;;AAFqB,QAKjB,WAAW,IAAX,EAAiB;;AAEpB,SAAI,QAAQ,IAAR,KAAiB,cAAc,IAAd,MAAwB,cAAc,QAAQ,IAAR,CAAd,CAAxB,CAAjB,EAAwE;AAC3E,UAAI,WAAJ,EAAiB;AAChB,qBAAc,KAAd,CADgB;AAEhB,eAAQ,OAAO,QAAQ,GAAR,CAAP,GAAsB,GAAtB,GAA4B,EAA5B,CAFQ;OAAjB,MAGO;AACN,eAAQ,OAAO,cAAc,GAAd,CAAP,GAA4B,GAA5B,GAAkC,EAAlC,CADF;OAHP;;;AAD2E,YAS3E,CAAO,IAAP,IAAe,OAAO,IAAP,EAAa,KAAb,EAAoB,IAApB,CAAf;;;AAT2E,MAA5E,MAYO,IAAI,OAAO,IAAP,KAAgB,WAAhB,EAA6B;AACvC,cAAO,IAAP,IAAe,IAAf,CADuC;OAAjC;KAdR;IALD;GAFD;EAHD;;;AAjBkC,QAkD3B,MAAP,CAlDkC;CAAlB","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n"]}