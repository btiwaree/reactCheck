{"version":3,"sources":["nested.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,YAAY,QAAQ,KAAR,CAAZ;;AAEJ,KAAK,QAAL,EAAe,UAAU,CAAV,EAAa;AACxB,MAAE,IAAF,CAAO,CAAP,EADwB;AAExB,QAAI,MAAM,EAAE,GAAG,CAAH,EAAM,GAAG,CAAC,EAAC,GAAE,CAAF,EAAI,GAAE,CAAF,EAAI,GAAE,CAAF,EAAV,EAAe,CAAf,CAAH,EAAsB,GAAG,CAAH,EAApC,CAFoB;AAGxB,MAAE,KAAF,CAAQ,UAAU,GAAV,CAAR,EAAwB,2CAAxB,EAHwB;CAAb,CAAf;;AAMA,KAAK,kBAAL,EAAyB,UAAU,CAAV,EAAa;AAClC,MAAE,IAAF,CAAO,CAAP,EADkC;AAElC,QAAI,MAAM,EAAE,GAAG,CAAH,EAAR,CAF8B;AAGlC,QAAI,MAAM,EAAE,GAAG,CAAH,EAAM,KAAK,GAAL,EAAd,CAH8B;AAIlC,QAAI,GAAJ,GAAU,GAAV,CAJkC;AAKlC,QAAI;AACH,kBAAU,GAAV,EADG;KAAJ,CAEE,OAAO,EAAP,EAAW;AACZ,UAAE,KAAF,CAAQ,GAAG,QAAH,EAAR,EAAuB,kDAAvB,EADY;KAAX;CAPmB,CAAzB;;AAYA,KAAK,+BAAL,EAAsC,UAAU,CAAV,EAAa;AAC/C,MAAE,IAAF,CAAO,CAAP,EAD+C;AAE/C,QAAI,MAAM,EAAE,GAAG,CAAH,EAAR,CAF2C;AAG/C,QAAI,MAAM,EAAE,GAAG,CAAH,EAAM,KAAK,GAAL,EAAd,CAH2C;AAI/C,QAAI,GAAJ,GAAU,GAAV,CAJ+C;AAK/C,MAAE,KAAF,CAAQ,UAAU,GAAV,EAAe,EAAC,QAAO,IAAP,EAAhB,CAAR,EAAuC,yCAAvC,EAL+C;CAAb,CAAtC;;AAQA,KAAK,2BAAL,EAAkC,UAAS,CAAT,EAAY;AAC1C,MAAE,IAAF,CAAO,CAAP,EAD0C;AAE1C,QAAI,MAAM,EAAE,GAAG,CAAH,EAAR,CAFsC;AAG1C,QAAI,MAAM,EAAE,GAAG,GAAH,EAAQ,GAAG,GAAH,EAAhB,CAHsC;AAI1C,MAAE,KAAF,CAAQ,UAAU,GAAV,CAAR,EAAwB,2BAAxB,EAJ0C;CAAZ,CAAlC","file":"nested-compiled.js","sourcesContent":["var test = require('tape');\nvar stringify = require('../');\n\ntest('nested', function (t) {\n    t.plan(1);\n    var obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 };\n    t.equal(stringify(obj), '{\"a\":3,\"b\":[{\"x\":4,\"y\":5,\"z\":6},7],\"c\":8}');\n});\n\ntest('cyclic (default)', function (t) {\n    t.plan(1);\n    var one = { a: 1 };\n    var two = { a: 2, one: one };\n    one.two = two;\n    try {\n    \tstringify(one);\n    } catch (ex) {\n    \tt.equal(ex.toString(), 'TypeError: Converting circular structure to JSON');\n    }\n});\n\ntest('cyclic (specifically allowed)', function (t) {\n    t.plan(1);\n    var one = { a: 1 };\n    var two = { a: 2, one: one };\n    one.two = two;\n    t.equal(stringify(one, {cycles:true}), '{\"a\":1,\"two\":{\"a\":2,\"one\":\"__cycle__\"}}');\n});\n\ntest('repeated non-cyclic value', function(t) {\n    t.plan(1);\n    var one = { x: 1 };\n    var two = { a: one, b: one };\n    t.equal(stringify(two), '{\"a\":{\"x\":1},\"b\":{\"x\":1}}');\n});\n"]}