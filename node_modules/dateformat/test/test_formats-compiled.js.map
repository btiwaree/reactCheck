{"version":3,"sources":["test_formats.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAT;;AAEJ,IAAI,IAAI,QAAQ,YAAR,CAAJ;;AAEJ,IAAI,aAAa,QAAQ,mBAAR,CAAb;;AAEJ,IAAI,UAAU;AACZ,aAAyB,0BAAzB;AACA,eAAyB,UAAzB;AACA,gBAAyB,cAAzB;AACA,cAAyB,mBAAzB;AACA,cAAyB,8BAAzB;AACA,eAAyB,SAAzB;AACA,gBAAyB,YAAzB;AACA,cAAyB,mCAAzB;AACA,aAAyB,YAAzB;AACA,aAAyB,UAAzB;AACA,iBAAyB,gCAAzB;AACA,oBAAyB,EAAzB;AACA,yBAAyB,kDAAzB;CAbE;;AAgBJ,SAAS,GAAT,CAAa,GAAb,EAAkB,IAAlB,EAAwB;AACpB,MAAI,IAAI,MAAM,EAAN,CADY;AAEpB,SAAO,EAAE,MAAF,GAAW,IAAX,EAAiB;AACtB,QAAI,MAAM,CAAN,CADkB;GAAxB;AAGA,SAAO,CAAP,CALoB;CAAxB;;AAQA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB,MAAI,SAAS,KAAK,iBAAL,EAAT,CADqB;AAEzB,MAAI,QAAQ,KAAK,KAAL,CAAW,CAAC,CAAD,GAAK,MAAL,GAAc,EAAd,CAAnB,CAFqB;AAGzB,MAAI,UAAU,CAAE,CAAD,GAAK,MAAL,GAAgB,QAAQ,EAAR,CAHN;AAIzB,MAAI,OAAO,SAAS,CAAT,GAAa,GAAb,GAAmB,GAAnB,CAJc;AAKzB,SAAO;AACL,YAAQ,MAAR;AACA,WAAO,KAAP;AACA,aAAS,OAAT;AACA,UAAM,IAAN;GAJF,CALyB;CAA3B;;AAaA,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC5B,MAAI,SAAS,YAAY,IAAZ,CAAT,CADwB;AAE5B,SAAO,OAAO,IAAP,GAAc,IAAI,OAAO,KAAP,EAAc,CAAlB,CAAd,GAAqC,IAAI,OAAO,OAAP,EAAgB,CAApB,CAArC,CAFqB;CAA9B;;AAKA,SAAS,2BAAT,EAAsC,YAAW;AAC/C,IAAE,IAAF,CAAO,WAAW,KAAX,EAAkB,UAAS,KAAT,EAAgB,GAAhB,EAAqB;AAC5C,OAAG,oBAAoB,GAApB,GAA0B,QAA1B,EAAoC,UAAS,IAAT,EAAe;AACpD,UAAI,MAAM,IAAI,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,CAAN,CADgD;AAEpD,UAAI,WAAW,eAAe,GAAf,CAAX,CAFgD;AAGpD,UAAI,WAAW,QAAQ,GAAR,EAAa,OAAb,CAAqB,aAArB,EAAoC,KAApC,EACa,OADb,CACqB,cADrB,EACqC,QADrC,EAEa,OAFb,CAEqB,YAFrB,EAEmC,KAFnC,CAAX,CAHgD;AAMpD,UAAI,QAAQ,gBAAR,EAA0B;AAC5B,YAAI,SAAS,YAAY,GAAZ,CAAT,CADwB;AAE5B,YAAI,QAAJ,CAAa,IAAI,QAAJ,KAAiB,OAAO,KAAP,EACjB,IAAI,UAAJ,KAAmB,OAAO,OAAP,CADhC,CAF4B;AAI5B,YAAI,WAAW,IAAI,WAAJ,GAAkB,OAAlB,CAA0B,QAA1B,EAAoC,EAApC,CAAX,CAJwB;OAA9B;AAMA,UAAI,SAAS,WAAW,GAAX,EAAgB,GAAhB,CAAT,CAZgD;AAapD,aAAO,WAAP,CAAmB,MAAnB,EAA2B,QAA3B,EAboD;AAcpD,aAdoD;KAAf,CAAvC,CAD4C;GAArB,CAAzB,CAD+C;AAmB/C,KAAG,iDAAH,EAAsD,UAAS,IAAT,EAAe;AACnE,QAAI,MAAM,IAAI,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,CAAN,CAD+D;AAEnE,QAAI,WAAW,QAAQ,SAAR,CAAX,CAF+D;AAGnE,QAAI,SAAS,WAAW,GAAX,CAAT,CAH+D;;AAKnE,WAAO,WAAP,CAAmB,MAAnB,EAA2B,QAA3B,EALmE;AAMnE,WANmE;GAAf,CAAtD,CAnB+C;CAAX,CAAtC","file":"test_formats-compiled.js","sourcesContent":["var assert = require('assert');\n\nvar _ = require('underscore');\n\nvar dateFormat = require('../lib/dateformat');\n\nvar expects = {\n  'default':               'Wed Nov 26 2014 13:19:44',\n  'shortDate':             '11/26/14',\n  'mediumDate':            'Nov 26, 2014',\n  'longDate':              'November 26, 2014',\n  'fullDate':              'Wednesday, November 26, 2014',\n  'shortTime':             '1:19 PM',\n  'mediumTime':            '1:19:44 PM',\n  'longTime':              '1:19:44 PM %TZ_PREFIX%%TZ_OFFSET%',\n  'isoDate':               '2014-11-26',\n  'isoTime':               '13:19:44',\n  'isoDateTime':           '2014-11-26T13:19:44%TZ_OFFSET%',\n  'isoUtcDateTime':        '',\n  'expiresHeaderFormat':   'Wed, 26 Nov 2014 13:19:44 %TZ_PREFIX%%TZ_OFFSET%'\n};\n\nfunction pad(num, size) {\n    var s = num + '';\n    while (s.length < size) {\n      s = '0' + s;\n    }\n    return s;\n}\n\nfunction parseOffset(date) {\n  var offset = date.getTimezoneOffset();\n  var hours = Math.floor(-1 * offset / 60);\n  var minutes = (-1 * offset) - (hours * 60);\n  var sign = offset > 0 ? '-' : '+';\n  return {\n    offset: offset,\n    hours: hours,\n    minutes: minutes,\n    sign: sign,\n  };\n}\n\nfunction timezoneOffset(date) {\n  var offset = parseOffset(date);\n  return offset.sign + pad(offset.hours, 2) + pad(offset.minutes, 2);\n}\n\ndescribe('dateformat([now], [mask])', function() {\n  _.each(dateFormat.masks, function(value, key) {\n    it('should format `' + key + '` mask', function(done) {\n      var now = new Date(2014, 10, 26, 13, 19, 44);\n      var tzOffset = timezoneOffset(now);\n      var expected = expects[key].replace(/%TZ_PREFIX%/, 'GMT')\n                                 .replace(/%TZ_OFFSET%/g, tzOffset)\n                                 .replace(/GMT\\+0000/g, 'UTC');\n      if (key === 'isoUtcDateTime') {\n        var offset = parseOffset(now);\n        now.setHours(now.getHours() - offset.hours,\n                     now.getMinutes() - offset.minutes);\n        var expected = now.toISOString().replace(/\\.000/g, '');\n      }\n      var actual = dateFormat(now, key);\n      assert.strictEqual(actual, expected);\n      done();\n    });\n  });\n  it('should use `default` mask, when `mask` is empty', function(done) {\n    var now = new Date(2014, 10, 26, 13, 19, 44);\n    var expected = expects['default'];\n    var actual = dateFormat(now);\n\n    assert.strictEqual(actual, expected);\n    done();\n  });\n});\n"]}