{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AAGA,IAAI,WAAW,WAAX;;;;;AAKJ,OAAO,OAAP,GAAiB;AACf,gBAAc,YAAd;AACA,WAAS,aAAT;AACA,OAAK,QAAL;CAHF;;;;;;;AAWA,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B,MAAI,UAAU,aAAV,CADwB;AAE5B,MAAI,MAAJ,EAAY;AACV,QAAI,OAAO,KAAP,IAAgB,OAAO,KAAP,CAAa,IAAb,EAAmB;AACrC,gBAAU,OAAO,KAAP,CAAa,IAAb,CAD2B;KAAvC;AAGA,QAAI,OAAO,KAAP,EAAc;AAChB,iBAAW,MAAM,OAAO,KAAP,CAAa,IAAb,GAAoB,GAA1B,GAAgC,OAAO,KAAP,CAAa,MAAb,CAD3B;KAAlB;GAJF;;AASA,SAAO,OAAP,CAX4B;CAA9B;;;;;;;;;AAqBA,SAAS,aAAT,CAAuB,OAAvB,EAAgC,MAAhC,EAAwC;AACtC,SAAO,aAAa,MAAb,IAAuB,IAAvB,GAA8B,OAA9B,CAD+B;CAAxC;;;;;;;;AAUA,SAAS,QAAT,CAAkB,EAAlB,EAAsB,MAAtB,EAA8B;AAC5B,MAAI;AACF,WAAO,IAAP,CADE;GAAJ,CAGA,OAAO,GAAP,EAAY;AACV,QAAI,eAAJ,GAAsB,IAAI,OAAJ,CADZ;AAEV,QAAI,OAAJ,GAAc,cAAc,IAAI,OAAJ,EAAa,MAA3B,CAAd;;;AAFU,QAKN,OAAO,MAAP,KAAkB,QAAlB,EAA4B;;AAE9B,UAAI,MAAC,CAAO,KAAP,IAAgB,OAAO,KAAP,CAAa,IAAb,IAAsB,OAAO,KAAP,EAAc;AACvD,YAAI,QAAQ,IAAI,KAAJ,CAAU,KAAV,CAAgB,QAAhB,CAAR,CADmD;AAEvD,YAAI,iBAAiB,MAAM,KAAN,EAAjB,CAFmD;AAGvD,cAAM,OAAN,CAAc,aAAa,MAAb,CAAd,EAHuD;AAIvD,cAAM,OAAN,CAAc,cAAd,EAJuD;AAKvD,YAAI,KAAJ,GAAY,MAAM,IAAN,CAAW,QAAX,CAAZ,CALuD;OAAzD;;AAQA,UAAI,OAAO,KAAP,IAAgB,OAAO,KAAP,CAAa,IAAb,EAAmB;AACrC,YAAI,QAAJ,GAAe,OAAO,KAAP,CAAa,IAAb,CADsB;OAAvC;AAGA,UAAI,OAAO,KAAP,EAAc;AAChB,YAAI,UAAJ,GAAiB,OAAO,KAAP,CAAa,IAAb,CADD;AAEhB,YAAI,YAAJ,GAAmB,OAAO,KAAP,CAAa,MAAb,CAFH;OAAlB;KAbF;;AAmBA,UAAM,GAAN,CAxBU;GAAZ;CAJF","file":"index-compiled.js","sourcesContent":["/**\n * Constants\n */\nvar SPLITTER = \"\\n    at \"\n\n/**\n * PostCSS helpers\n */\nmodule.exports = {\n  sourceString: sourceString,\n  message: formatMessage,\n  try: tryCatch\n}\n\n/**\n * Returns GNU style source\n *\n * @param {Object} source\n */\nfunction sourceString(source) {\n  var message = \"<css input>\"\n  if (source) {\n    if (source.input && source.input.file) {\n      message = source.input.file\n    }\n    if (source.start) {\n      message += \":\" + source.start.line + \":\" + source.start.column\n    }\n  }\n\n  return message\n}\n\n/**\n * Returns a GNU style message\n *\n * @param  {String} message\n * @param  {Object} source a PostCSS source object\n * @return {String}\n */\nfunction formatMessage(message, source) {\n  return sourceString(source) + \": \" + message\n}\n\n/**\n * Do something and throw an error with enhanced exception (from given source)\n *\n * @param {Function} fn     [description]\n * @param {[type]}   source [description]\n */\nfunction tryCatch(fn, source) {\n  try {\n    return fn()\n  }\n  catch (err) {\n    err.originalMessage = err.message\n    err.message = formatMessage(err.message, source)\n\n    // if source seems interesting, enhance error\n    if (typeof source === \"object\") {\n      // add a stack item if something interesting available\n      if ((source.input && source.input.file) || source.start) {\n        var stack = err.stack.split(SPLITTER)\n        var firstStackItem = stack.shift()\n        stack.unshift(sourceString(source))\n        stack.unshift(firstStackItem)\n        err.stack = stack.join(SPLITTER)\n      }\n\n      if (source.input && source.input.file) {\n        err.fileName = source.input.file\n      }\n      if (source.start) {\n        err.lineNumber = source.start.line\n        err.columnNumber = source.start.column\n      }\n    }\n\n    throw err\n  }\n}\n"]}