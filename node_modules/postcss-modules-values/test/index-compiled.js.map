{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAEA,OAAO,OAAP,MAAoB,SAApB;AACA,OAAO,MAAP,MAAmB,QAAnB;;AAEA,OAAO,SAAP,MAAsB,QAAtB;;AAEA,MAAM,OAAO,CAAC,KAAD,EAAQ,QAAR,KAAqB;AAChC,MAAI,YAAY,QAAQ,CAAC,SAAD,CAAR,CAAZ,CAD4B;AAEhC,SAAO,KAAP,CAAa,UAAU,OAAV,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B,QAA3C,EAFgC;CAArB;;AAKb,SAAS,WAAT,EAAsB,MAAM;AAC1B,KAAG,qCAAH,EAA0C,MAAM;AAC9C,SAAK,EAAL,EAAS,EAAT,EAD8C;GAAN,CAA1C,CAD0B;;AAK1B,KAAG,0BAAH,EAA+B,MAAM;AACnC,SAAK,kBAAL,EAAyB,2BAAzB,EADmC;GAAN,CAA/B,CAL0B;;AAS1B,KAAG,yDAAH,EAA8D,MAAM;AAClE,UAAM,QAAQ,sCAAR,CAD4D;AAElE,QAAI,YAAY,QAAQ,CAAC,SAAD,CAAR,CAAZ,CAF8D;AAGlE,UAAM,SAAS,UAAU,OAAV,CAAkB,KAAlB,CAAT,CAH4D;AAIlE,UAAM,WAAW,OAAO,QAAP,EAAX,CAJ4D;;AAMlE,WAAO,KAAP,CAAa,SAAS,MAAT,EAAiB,CAA9B,EANkE;AAOlE,WAAO,KAAP,CAAa,SAAS,CAAT,EAAY,IAAZ,EAAkB,yDAA/B,EAPkE;GAAN,CAA9D,CAT0B;;AAmB1B,KAAG,uCAAH,EAA4C,MAAM;AAChD,SAAK,kCAAL,EAAyC,2CAAzC,EADgD;GAAN,CAA5C,CAnB0B;;AAuB1B,KAAG,0CAAH,EAA+C,MAAM;AACnD,SAAK,wCAAL,EAA+C,kDAA/C,EADmD;GAAN,CAA/C,CAvB0B;;AA2B1B,KAAG,+CAAH,EAAoD,MAAM;AACxD,SAAK,iCAAL,EAAwC,0FAAxC,EADwD;GAAN,CAApD,CA3B0B;;AA+B1B,KAAG,oDAAH,EAAyD,MAAM;AAC7D,SAAK,sDAAL,EAA6D,6HAA7D,EAD6D;GAAN,CAAzD,CA/B0B;;AAmC1B,KAAG,uDAAH,EAA4D,MAAM;AAChE,SAAK,8DAAL,EAAqE,8HAArE,EADgE;GAAN,CAA5D,CAnC0B;;AAuC1B,KAAG,2CAAH,EAAgD,MAAM;AACpD,SACE,CAAC;;oBAAD,CADF,EAIE,CAAC;;;;;;;;;+BAAD,CAJF,EADoD;GAAN,CAAhD,CAvC0B;;AAwD1B,KAAG,iCAAH,EAAsC,MAAM;AAC1C,SACE,wDADF,EAEE,0DACA,gEADA,CAFF,CAD0C;GAAN,CAAtC,CAxD0B;;AAgE1B,KAAG,kEAAH,EAAuE,MAAM;AAC3E,SACE,wDADF,EAEE,kDACA,gEADA,CAFF,CAD2E;GAAN,CAAvE,CAhE0B;;AAwE1B,KAAG,gCAAH,EAAqC,MAAM;AACzC,SACE,wDADF,EAEE,4DAFF,EADyC;GAAN,CAArC,CAxE0B;;AA+E1B,KAAG,4CAAH,EAAiD,MAAM;AACrD,SACE,0EADF,EAEE,uFAFF,EADqD;GAAN,CAAjD,CA/E0B;;AAsF1B,KAAG,8BAAH,EAAmC,MAAM;AACvC,SACE,mDADF,EAEE,iDACA,8CADA,GAEA,qDAFA,CAFF,CADuC;GAAN,CAAnC,CAtF0B;;AA+F1B,KAAG,0CAAH,EAA+C,MAAM;AACnD,SACE,0DADF,EAEE,+DACA,4CADA,GAEA,mCAFA,CAFF,CADmD;GAAN,CAA/C,CA/F0B;;AAuG1B,KAAG,+BAAH,EAAoC,MAAM;AACxC,SACE,6IACA,0HADA,EAEA,0IACA,gKADA,CAHF,CADwC;GAAN,CAApC,CAvG0B;CAAN,CAAtB","file":"index-compiled.js","sourcesContent":["/* global describe, it */\n\nimport postcss from 'postcss'\nimport assert from 'assert'\n\nimport constants from '../src'\n\nconst test = (input, expected) => {\n  let processor = postcss([constants])\n  assert.equal(processor.process(input).css, expected)\n}\n\ndescribe('constants', () => {\n  it('should pass through an empty string', () => {\n    test('', '')\n  })\n\n  it('should export a constant', () => {\n    test('@value red blue;', ':export {\\n  red: blue\\n}')\n  })\n\n  it('gives an error when there is no semicolon between lines', () => {\n    const input = '@value red blue\\n@value green yellow'\n    let processor = postcss([constants])\n    const result = processor.process(input)\n    const warnings = result.warnings()\n\n    assert.equal(warnings.length, 1)\n    assert.equal(warnings[0].text, 'Invalid value definition: red blue\\n@value green yellow')\n  })\n\n  it('should export a more complex constant', () => {\n    test('@value small (max-width: 599px);', ':export {\\n  small: (max-width: 599px)\\n}')\n  })\n\n  it('should replace constants within the file', () => {\n    test('@value blue red; .foo { color: blue; }', ':export {\\n  blue: red;\\n}\\n.foo { color: red; }')\n  })\n\n  it('should import and re-export a simple constant', () => {\n    test('@value red from \"./colors.css\";', ':import(\"./colors.css\") {\\n  i__const_red_0: red\\n}\\n:export {\\n  red: i__const_red_0\\n}')\n  })\n\n  it('should import a simple constant and replace usages', () => {\n    test('@value red from \"./colors.css\"; .foo { color: red; }', ':import(\"./colors.css\") {\\n  i__const_red_1: red;\\n}\\n:export {\\n  red: i__const_red_1;\\n}\\n.foo { color: i__const_red_1; }')\n  })\n\n  it('should import and alias a constant and replace usages', () => {\n    test('@value blue as red from \"./colors.css\"; .foo { color: red; }', ':import(\"./colors.css\") {\\n  i__const_red_2: blue;\\n}\\n:export {\\n  red: i__const_red_2;\\n}\\n.foo { color: i__const_red_2; }')\n  })\n\n  it('should import multiple from a single file', () => {\n    test(\n      `@value blue, red from \"./colors.css\";\n.foo { color: red; }\n.bar { color: blue }`,\n      `:import(\"./colors.css\") {\n  i__const_blue_3: blue;\n  i__const_red_4: red;\n}\n:export {\n  blue: i__const_blue_3;\n  red: i__const_red_4;\n}\n.foo { color: i__const_red_4; }\n.bar { color: i__const_blue_3 }`)\n  })\n\n  it('should import from a definition', () => {\n    test(\n      '@value colors: \"./colors.css\"; @value red from colors;',\n      ':import(\"./colors.css\") {\\n  i__const_red_5: red\\n}\\n' +\n      ':export {\\n  colors: \"./colors.css\";\\n  red: i__const_red_5\\n}'\n    )\n  })\n\n  it('should only allow values for paths if defined in the right order', () => {\n    test(\n      '@value red from colors; @value colors: \"./colors.css\";',\n      ':import(colors) {\\n  i__const_red_6: red\\n}\\n' +\n      ':export {\\n  red: i__const_red_6;\\n  colors: \"./colors.css\"\\n}'\n    )\n  })\n\n  it('should allow transitive values', () => {\n    test(\n      '@value aaa: red;\\n@value bbb: aaa;\\n.a { color: bbb; }',\n      ':export {\\n  aaa: red;\\n  bbb: red;\\n}\\n.a { color: red; }'\n    )\n  })\n\n  it('should allow transitive values within calc', () => {\n    test(\n      '@value base: 10px;\\n@value large: calc(base * 2);\\n.a { margin: large; }',\n      ':export {\\n  base: 10px;\\n  large: calc(10px * 2);\\n}\\n.a { margin: calc(10px * 2); }'\n    )\n  })\n\n  it('should preserve import order', () => {\n    test(\n      '@value a from \"./a.css\"; @value b from \"./b.css\";',\n      ':import(\"./a.css\") {\\n  i__const_a_7: a\\n}\\n' +\n      ':import(\"./b.css\") {\\n  i__const_b_8: b\\n}\\n' +\n      ':export {\\n  a: i__const_a_7;\\n  b: i__const_b_8\\n}'\n    )\n  })\n\n  it('should allow custom-property-style names', () => {\n    test(\n      '@value --red from \"./colors.css\"; .foo { color: --red; }',\n      ':import(\"./colors.css\") {\\n  i__const___red_9: --red;\\n}\\n' +\n      ':export {\\n  --red: i__const___red_9;\\n}\\n' +\n      '.foo { color: i__const___red_9; }')\n  })\n\n  it('should allow all colour types', () => {\n    test(\n      '@value named: red; @value 3char #0f0; @value 6char #00ff00; @value rgba rgba(34, 12, 64, 0.3); @value hsla hsla(220, 13.0%, 18.0%, 1);\\n' +\n      '.foo { color: named; background-color: 3char; border-top-color: 6char; border-bottom-color: rgba; outline-color: hsla; }',\n      ':export {\\n  named: red;\\n  3char: #0f0;\\n  6char: #00ff00;\\n  rgba: rgba(34, 12, 64, 0.3);\\n  hsla: hsla(220, 13.0%, 18.0%, 1);\\n}\\n' +\n      '.foo { color: red; background-color: #0f0; border-top-color: #00ff00; border-bottom-color: rgba(34, 12, 64, 0.3); outline-color: hsla(220, 13.0%, 18.0%, 1); }')\n  })\n})\n"]}