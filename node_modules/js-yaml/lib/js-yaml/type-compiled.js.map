{"version":3,"sources":["type.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,gBAAgB,QAAQ,aAAR,CAAhB;;AAEJ,IAAI,2BAA2B,CAC7B,MAD6B,EAE7B,SAF6B,EAG7B,WAH6B,EAI7B,YAJ6B,EAK7B,WAL6B,EAM7B,WAN6B,EAO7B,cAP6B,EAQ7B,cAR6B,CAA3B;;AAWJ,IAAI,kBAAkB,CACpB,QADoB,EAEpB,UAFoB,EAGpB,SAHoB,CAAlB;;AAMJ,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AAChC,MAAI,SAAS,EAAT,CAD4B;;AAGhC,MAAI,QAAQ,IAAR,EAAc;AAChB,WAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAU,KAAV,EAAiB;AACxC,UAAI,KAAJ,EAAW,OAAX,CAAmB,UAAU,KAAV,EAAiB;AAClC,eAAO,OAAO,KAAP,CAAP,IAAwB,KAAxB,CADkC;OAAjB,CAAnB,CADwC;KAAjB,CAAzB,CADgB;GAAlB;;AAQA,SAAO,MAAP,CAXgC;CAAlC;;AAcA,SAAS,IAAT,CAAc,GAAd,EAAmB,OAAnB,EAA4B;AAC1B,YAAU,WAAW,EAAX,CADgB;;AAG1B,SAAO,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAU,IAAV,EAAgB;AAC3C,QAAI,yBAAyB,OAAzB,CAAiC,IAAjC,MAA2C,CAAC,CAAD,EAAI;AACjD,YAAM,IAAI,aAAJ,CAAkB,qBAAqB,IAArB,GAA4B,6BAA5B,GAA4D,GAA5D,GAAkE,cAAlE,CAAxB,CADiD;KAAnD;GAD2B,CAA7B;;;AAH0B,MAU1B,CAAK,GAAL,GAAoB,GAApB,CAV0B;AAW1B,OAAK,IAAL,GAAoB,QAAQ,MAAR,KAA2B,IAA3B,CAXM;AAY1B,OAAK,OAAL,GAAoB,QAAQ,SAAR,KAA2B,YAAY;AAAE,WAAO,IAAP,CAAF;GAAZ,CAZrB;AAa1B,OAAK,SAAL,GAAoB,QAAQ,WAAR,KAA2B,UAAU,IAAV,EAAgB;AAAE,WAAO,IAAP,CAAF;GAAhB,CAbrB;AAc1B,OAAK,UAAL,GAAoB,QAAQ,YAAR,KAA2B,IAA3B,CAdM;AAe1B,OAAK,SAAL,GAAoB,QAAQ,WAAR,KAA2B,IAA3B,CAfM;AAgB1B,OAAK,SAAL,GAAoB,QAAQ,WAAR,KAA2B,IAA3B,CAhBM;AAiB1B,OAAK,YAAL,GAAoB,QAAQ,cAAR,KAA2B,IAA3B,CAjBM;AAkB1B,OAAK,YAAL,GAAoB,oBAAoB,QAAQ,cAAR,KAA2B,IAA3B,CAAxC,CAlB0B;;AAoB1B,MAAI,gBAAgB,OAAhB,CAAwB,KAAK,IAAL,CAAxB,KAAuC,CAAC,CAAD,EAAI;AAC7C,UAAM,IAAI,aAAJ,CAAkB,mBAAmB,KAAK,IAAL,GAAY,sBAA/B,GAAwD,GAAxD,GAA8D,cAA9D,CAAxB,CAD6C;GAA/C;CApBF;;AAyBA,OAAO,OAAP,GAAiB,IAAjB","file":"type-compiled.js","sourcesContent":["'use strict';\n\nvar YAMLException = require('./exception');\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind',\n  'resolve',\n  'construct',\n  'instanceOf',\n  'predicate',\n  'represent',\n  'defaultStyle',\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar',\n  'sequence',\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.tag          = tag;\n  this.kind         = options['kind']         || null;\n  this.resolve      = options['resolve']      || function () { return true; };\n  this.construct    = options['construct']    || function (data) { return data; };\n  this.instanceOf   = options['instanceOf']   || null;\n  this.predicate    = options['predicate']    || null;\n  this.represent    = options['represent']    || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;\n"]}