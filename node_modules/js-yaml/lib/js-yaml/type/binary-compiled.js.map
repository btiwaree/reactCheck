{"version":3,"sources":["binary.js"],"names":[],"mappings":"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","file":"binary-compiled.js","sourcesContent":["'use strict';\n\n/*eslint-disable no-bitwise*/\n\n// A trick for browserified version.\n// Since we make browserifier to ignore `buffer` module, NodeBuffer will be undefined\nvar NodeBuffer = require('buffer').Buffer;\nvar Type       = require('../type');\n\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx, tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  // Wrap into Buffer for NodeJS and leave Array for browser\n  if (NodeBuffer) return new NodeBuffer(result);\n\n  return result;\n}\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', bits = 0, idx, tail,\n      max = object.length,\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(object) {\n  return NodeBuffer && NodeBuffer.isBuffer(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n"]}