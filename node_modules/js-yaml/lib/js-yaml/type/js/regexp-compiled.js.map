{"version":3,"sources":["regexp.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,OAAO,QAAQ,YAAR,CAAP;;AAEJ,SAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACrC,MAAI,SAAS,IAAT,EAAe,OAAO,KAAP,CAAnB;AACA,MAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB,OAAO,KAAP,CAAvB;;AAEA,MAAI,SAAS,IAAT;MACA,OAAS,cAAc,IAAd,CAAmB,IAAnB,CAAT;MACA,YAAY,EAAZ;;;;AANiC,MAUjC,OAAO,CAAP,MAAc,GAAd,EAAmB;AACrB,QAAI,IAAJ,EAAU,YAAY,KAAK,CAAL,CAAZ,CAAV;;AAEA,QAAI,UAAU,MAAV,GAAmB,CAAnB,EAAsB,OAAO,KAAP,CAA1B;;AAHqB,QAKjB,OAAO,OAAO,MAAP,GAAgB,UAAU,MAAV,GAAmB,CAAnC,CAAP,KAAiD,GAAjD,EAAsD,OAAO,KAAP,CAA1D;GALF;;AAQA,SAAO,IAAP,CAlBqC;CAAvC;;AAqBA,SAAS,yBAAT,CAAmC,IAAnC,EAAyC;AACvC,MAAI,SAAS,IAAT;MACA,OAAS,cAAc,IAAd,CAAmB,IAAnB,CAAT;MACA,YAAY,EAAZ;;;AAHmC,MAMnC,OAAO,CAAP,MAAc,GAAd,EAAmB;AACrB,QAAI,IAAJ,EAAU,YAAY,KAAK,CAAL,CAAZ,CAAV;AACA,aAAS,OAAO,KAAP,CAAa,CAAb,EAAgB,OAAO,MAAP,GAAgB,UAAU,MAAV,GAAmB,CAAnC,CAAzB,CAFqB;GAAvB;;AAKA,SAAO,IAAI,MAAJ,CAAW,MAAX,EAAmB,SAAnB,CAAP,CAXuC;CAAzC;;AAcA,SAAS,yBAAT,CAAmC,kBAAnC,EAAuD;AACrD,MAAI,SAAS,MAAM,OAAO,MAAP,GAAgB,GAAtB,CADwC;;AAGrD,MAAI,OAAO,MAAP,EAAe,UAAU,GAAV,CAAnB;AACA,MAAI,OAAO,SAAP,EAAkB,UAAU,GAAV,CAAtB;AACA,MAAI,OAAO,UAAP,EAAmB,UAAU,GAAV,CAAvB;;AAEA,SAAO,MAAP,CAPqD;CAAvD;;AAUA,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,SAAO,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,MAA/B,MAA2C,iBAA3C,CADiB;CAA1B;;AAIA,OAAO,OAAP,GAAiB,IAAI,IAAJ,CAAS,6BAAT,EAAwC;AACvD,QAAM,QAAN;AACA,WAAS,uBAAT;AACA,aAAW,yBAAX;AACA,aAAW,QAAX;AACA,aAAW,yBAAX;CALe,CAAjB","file":"regexp-compiled.js","sourcesContent":["'use strict';\n\nvar Type = require('../../type');\n\nfunction resolveJavascriptRegExp(data) {\n  if (data === null) return false;\n  if (data.length === 0) return false;\n\n  var regexp = data,\n      tail   = /\\/([gim]*)$/.exec(data),\n      modifiers = '';\n\n  // if regexp starts with '/' it can have modifiers and must be properly closed\n  // `/foo/gim` - modifiers tail can be maximum 3 chars\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n\n    if (modifiers.length > 3) return false;\n    // if expression starts with /, is should be properly terminated\n    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;\n  }\n\n  return true;\n}\n\nfunction constructJavascriptRegExp(data) {\n  var regexp = data,\n      tail   = /\\/([gim]*)$/.exec(data),\n      modifiers = '';\n\n  // `/foo/gim` - tail can be maximum 4 chars\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n  }\n\n  return new RegExp(regexp, modifiers);\n}\n\nfunction representJavascriptRegExp(object /*, style*/) {\n  var result = '/' + object.source + '/';\n\n  if (object.global) result += 'g';\n  if (object.multiline) result += 'm';\n  if (object.ignoreCase) result += 'i';\n\n  return result;\n}\n\nfunction isRegExp(object) {\n  return Object.prototype.toString.call(object) === '[object RegExp]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/regexp', {\n  kind: 'scalar',\n  resolve: resolveJavascriptRegExp,\n  construct: constructJavascriptRegExp,\n  predicate: isRegExp,\n  represent: representJavascriptRegExp\n});\n"]}