{"version":3,"sources":["is-utf8.js"],"names":[],"mappings":";AACA,UAAU,OAAO,OAAP,GAAiB,UAAS,KAAT,EAC3B;AACI,QAAI,IAAI,CAAJ,CADR;AAEI,WAAM,IAAI,MAAM,MAAN,EACV;AACI;AACY,cAAM,CAAN,KAAY,IAAZ,IACA,MAAM,CAAN,KAAY,IAAZ,IACA,MAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAZ,EAE7B;AACE,iBAAK,CAAL,CADF;AAEE,qBAFF;SANJ;;AAWA;AACY,YAAC,IAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAZ,IACpB,QAAQ,MAAM,IAAE,CAAF,CAAd,IAAsB,MAAM,IAAE,CAAF,CAAN,IAAc,IAAd,EAE/B;AACE,iBAAK,CAAL,CADF;AAEE,qBAFF;SAJJ;;AASA,YAAQ;AACI,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB;AAG5B,SAAC,IAAC,IAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAZ,IACrB,MAAM,CAAN,KAAY,IAAZ,IACA,MAAM,CAAN,KAAY,IAAZ,CAFD,IAGC,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAE,CAAF,CAAN,IAAc,IAAd,IACxB,QAAQ,MAAM,IAAE,CAAF,CAAd,IAAsB,MAAM,IAAE,CAAF,CAAN,IAAc,IAAd;AAGvB,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAE,CAAF,CAAd,IAAsB,MAAM,IAAE,CAAF,CAAN,IAAc,IAAd,IACtB,QAAQ,MAAM,IAAE,CAAF,CAAd,IAAsB,MAAM,IAAE,CAAF,CAAN,IAAc,IAAd,EAE5B;AACE,iBAAK,CAAL,CADF;AAEE,qBAFF;SAjBJ;;AAsBA,YAAQ;AACI,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB;AAG5B,YAAC,IAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAZ,IACpB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB;AAGzB,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,IACxB,QAAQ,MAAM,IAAI,CAAJ,CAAd,IAAwB,MAAM,IAAI,CAAJ,CAAN,IAAgB,IAAhB,EAE9B;AACE,iBAAK,CAAL,CADF;AAEE,qBAFF;SAlBJ;;AAuBA,eAAO,KAAP,CAlEJ;KADA;;AAsEA,WAAO,IAAP,CAxEJ;CAD2B","file":"is-utf8-compiled.js","sourcesContent":["\nexports = module.exports = function(bytes)\n{\n    var i = 0;\n    while(i < bytes.length)\n    {\n        if(     (// ASCII\n                    bytes[i] == 0x09 ||\n                    bytes[i] == 0x0A ||\n                    bytes[i] == 0x0D ||\n                    (0x20 <= bytes[i] && bytes[i] <= 0x7E)\n                )\n          ) {\n              i += 1;\n              continue;\n          }\n\n        if(     (// non-overlong 2-byte\n                    (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&\n                    (0x80 <= bytes[i+1] && bytes[i+1] <= 0xBF)\n                )\n          ) {\n              i += 2;\n              continue;\n          }\n\n        if(     (// excluding overlongs\n                    bytes[i] == 0xE0 &&\n                    (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                    (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n                ) ||\n                (// straight 3-byte\n                 ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||\n                  bytes[i] == 0xEE ||\n                  bytes[i] == 0xEF) &&\n                 (0x80 <= bytes[i + 1] && bytes[i+1] <= 0xBF) &&\n                 (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)\n                ) ||\n                (// excluding surrogates\n                 bytes[i] == 0xED &&\n                 (0x80 <= bytes[i+1] && bytes[i+1] <= 0x9F) &&\n                 (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)\n                )\n          ) {\n              i += 3;\n              continue;\n          }\n\n        if(     (// planes 1-3\n                    bytes[i] == 0xF0 &&\n                    (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                    (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                    (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                ) ||\n                (// planes 4-15\n                 (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&\n                 (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                 (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                 (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                ) ||\n                (// plane 16\n                 bytes[i] == 0xF4 &&\n                 (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&\n                 (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                 (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                )\n          ) {\n              i += 4;\n              continue;\n          }\n\n        return false;\n    }\n\n    return true;\n}\n"]}