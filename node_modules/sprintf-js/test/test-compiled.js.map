{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var assert = require(\"assert\"),\n    sprintfjs = require(\"../src/sprintf.js\"),\n    sprintf = sprintfjs.sprintf,\n    vsprintf = sprintfjs.vsprintf\n\ndescribe(\"sprintfjs\", function() {\n    var pi = 3.141592653589793\n\n    it(\"should return formated strings for simple placeholders\", function() {\n        assert.equal(\"%\", sprintf(\"%%\"))\n        assert.equal(\"10\", sprintf(\"%b\", 2))\n        assert.equal(\"A\", sprintf(\"%c\", 65))\n        assert.equal(\"2\", sprintf(\"%d\", 2))\n        assert.equal(\"2\", sprintf(\"%i\", 2))\n        assert.equal(\"2\", sprintf(\"%d\", \"2\"))\n        assert.equal(\"2\", sprintf(\"%i\", \"2\"))\n        assert.equal('{\"foo\":\"bar\"}', sprintf(\"%j\", {foo: \"bar\"}))\n        assert.equal('[\"foo\",\"bar\"]', sprintf(\"%j\", [\"foo\", \"bar\"]))\n        assert.equal(\"2e+0\", sprintf(\"%e\", 2))\n        assert.equal(\"2\", sprintf(\"%u\", 2))\n        assert.equal(\"4294967294\", sprintf(\"%u\", -2))\n        assert.equal(\"2.2\", sprintf(\"%f\", 2.2))\n        assert.equal(\"3.141592653589793\", sprintf(\"%g\", pi))\n        assert.equal(\"10\", sprintf(\"%o\", 8))\n        assert.equal(\"%s\", sprintf(\"%s\", \"%s\"))\n        assert.equal(\"ff\", sprintf(\"%x\", 255))\n        assert.equal(\"FF\", sprintf(\"%X\", 255))\n        assert.equal(\"Polly wants a cracker\", sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\"))\n        assert.equal(\"Hello world!\", sprintf(\"Hello %(who)s!\", {\"who\": \"world\"}))\n    })\n\n    it(\"should return formated strings for complex placeholders\", function() {\n        // sign\n        assert.equal(\"2\", sprintf(\"%d\", 2))\n        assert.equal(\"-2\", sprintf(\"%d\", -2))\n        assert.equal(\"+2\", sprintf(\"%+d\", 2))\n        assert.equal(\"-2\", sprintf(\"%+d\", -2))\n        assert.equal(\"2\", sprintf(\"%i\", 2))\n        assert.equal(\"-2\", sprintf(\"%i\", -2))\n        assert.equal(\"+2\", sprintf(\"%+i\", 2))\n        assert.equal(\"-2\", sprintf(\"%+i\", -2))\n        assert.equal(\"2.2\", sprintf(\"%f\", 2.2))\n        assert.equal(\"-2.2\", sprintf(\"%f\", -2.2))\n        assert.equal(\"+2.2\", sprintf(\"%+f\", 2.2))\n        assert.equal(\"-2.2\", sprintf(\"%+f\", -2.2))\n        assert.equal(\"-2.3\", sprintf(\"%+.1f\", -2.34))\n        assert.equal(\"-0.0\", sprintf(\"%+.1f\", -0.01))\n        assert.equal(\"3.14159\", sprintf(\"%.6g\", pi))\n        assert.equal(\"3.14\", sprintf(\"%.3g\", pi))\n        assert.equal(\"3\", sprintf(\"%.1g\", pi))\n        assert.equal(\"-000000123\", sprintf(\"%+010d\", -123))\n        assert.equal(\"______-123\", sprintf(\"%+'_10d\", -123))\n        assert.equal(\"-234.34 123.2\", sprintf(\"%f %f\", -234.34, 123.2))\n\n        // padding\n        assert.equal(\"-0002\", sprintf(\"%05d\", -2))\n        assert.equal(\"-0002\", sprintf(\"%05i\", -2))\n        assert.equal(\"    <\", sprintf(\"%5s\", \"<\"))\n        assert.equal(\"0000<\", sprintf(\"%05s\", \"<\"))\n        assert.equal(\"____<\", sprintf(\"%'_5s\", \"<\"))\n        assert.equal(\">    \", sprintf(\"%-5s\", \">\"))\n        assert.equal(\">0000\", sprintf(\"%0-5s\", \">\"))\n        assert.equal(\">____\", sprintf(\"%'_-5s\", \">\"))\n        assert.equal(\"xxxxxx\", sprintf(\"%5s\", \"xxxxxx\"))\n        assert.equal(\"1234\", sprintf(\"%02u\", 1234))\n        assert.equal(\" -10.235\", sprintf(\"%8.3f\", -10.23456))\n        assert.equal(\"-12.34 xxx\", sprintf(\"%f %s\", -12.34, \"xxx\"))\n        assert.equal('{\\n  \"foo\": \"bar\"\\n}', sprintf(\"%2j\", {foo: \"bar\"}))\n        assert.equal('[\\n  \"foo\",\\n  \"bar\"\\n]', sprintf(\"%2j\", [\"foo\", \"bar\"]))\n\n        // precision\n        assert.equal(\"2.3\", sprintf(\"%.1f\", 2.345))\n        assert.equal(\"xxxxx\", sprintf(\"%5.5s\", \"xxxxxx\"))\n        assert.equal(\"    x\", sprintf(\"%5.1s\", \"xxxxxx\"))\n\n    })\n\n    it(\"should return formated strings for callbacks\", function() {\n        assert.equal(\"foobar\", sprintf(\"%s\", function() { return \"foobar\" }))\n        assert.equal(Date.now(), sprintf(\"%s\", Date.now)) // should pass...\n    })\n})\n"]}