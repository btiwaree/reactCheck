{"version":3,"sources":["sprintf.js"],"names":[],"mappings":"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","file":"sprintf-compiled.js","sourcesContent":["(function(window) {\n    var re = {\n        not_string: /[^s]/,\n        number: /[diefg]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function sprintf() {\n        var key = arguments[0], cache = sprintf.cache\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\n            cache[key] = sprintf.parse(key)\n        }\n        return sprintf.format.call(null, cache[key], arguments)\n    }\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i])\n            if (node_type === \"string\") {\n                output[output.length] = parse_tree[i]\n            }\n            else if (node_type === \"array\") {\n                match = parse_tree[i] // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))\n                        }\n                        arg = arg[match[2][k]]\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (get_type(arg) == \"function\") {\n                    arg = arg()\n                }\n\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\n                }\n\n                if (re.number.test(match[8])) {\n                    is_positive = arg >= 0\n                }\n\n                switch (match[8]) {\n                    case \"b\":\n                        arg = arg.toString(2)\n                    break\n                    case \"c\":\n                        arg = String.fromCharCode(arg)\n                    break\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10)\n                    break\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n                    break\n                    case \"e\":\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()\n                    break\n                    case \"f\":\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n                    break\n                    case \"g\":\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\n                    break\n                    case \"o\":\n                        arg = arg.toString(8)\n                    break\n                    case \"s\":\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)\n                    break\n                    case \"u\":\n                        arg = arg >>> 0\n                    break\n                    case \"x\":\n                        arg = arg.toString(16)\n                    break\n                    case \"X\":\n                        arg = arg.toString(16).toUpperCase()\n                    break\n                }\n                if (re.json.test(match[8])) {\n                    output[output.length] = arg\n                }\n                else {\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\n                        sign = is_positive ? \"+\" : \"-\"\n                        arg = arg.toString().replace(re.sign, \"\")\n                    }\n                    else {\n                        sign = \"\"\n                    }\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"\n                    pad_length = match[6] - (sign + arg).length\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output.join(\"\")\n    }\n\n    sprintf.cache = {}\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = match[0]\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = \"%\"\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list[field_list.length] = field_match[1]\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\n                }\n                parse_tree[parse_tree.length] = match\n            }\n            else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return parse_tree\n    }\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = (argv || []).slice(0)\n        _argv.splice(0, 0, fmt)\n        return sprintf.apply(null, _argv)\n    }\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\n    }\n\n    function str_repeat(input, multiplier) {\n        return Array(multiplier + 1).join(input)\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    if (typeof exports !== \"undefined\") {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    else {\n        window.sprintf = sprintf\n        window.vsprintf = vsprintf\n\n        if (typeof define === \"function\" && define.amd) {\n            define(function() {\n                return {\n                    sprintf: sprintf,\n                    vsprintf: vsprintf\n                }\n            })\n        }\n    }\n})(typeof window === \"undefined\" ? this : window);\n"]}